/*! Theme: Hero v1.13.2 */
// -- Libraries & Helpers -- ///
/* scss-combine:../../node_modules/normalize.scss/normalize */
/*! normalize.scss v0.1.0 | MIT License | based on git.io/normalize */

/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
  font-family: sans-serif; /* 1 */
  -ms-text-size-adjust: 100%; /* 2 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/**
 * Remove default margin.
 */

body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */

audio,
canvas,
progress,
video {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */

[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */

/**
 * Remove the gray background color from active links in IE 10.
 */

a {
  background-color: transparent;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */

/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */

abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */

b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */

dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */

mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove border when inside `a` element in IE 8/9/10.
 */

img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */

svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */

/**
 * Address margin not present in IE 8/9 and Safari.
 */

figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */

hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */

pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */

code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */

/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */

/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */

button,
input,
optgroup,
select,
textarea {
  color: inherit; /* 1 */
  font: inherit; /* 2 */
  margin: 0; /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */

button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */

button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button; /* 2 */
  cursor: pointer; /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */

input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */

input[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box; /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */

legend {
  border: 0; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */

textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */

optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/* scss-combine:../../node_modules/bc-baseline/baseline */
/* scss-combine:lib/extends */
%clearfix {
  *zoom: 1;

  &:before,
  &:after {
    display: table;
    content: "";
  }

  &:after {
    clear: both;
  }
}

%font-smoothing {
  -moz-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

/* scss-combine:lib/mixins */
@mixin media($max: false, $min: false) {
  @if $max {
    @if $min {
      @media screen and (max-width: $max - 1) and (min-width: $min) { @content; }
    } @else {
      @media screen and (max-width: $max - 1) { @content; }
    }
  } @else {
    @media screen and (min-width: $min) { @content; }
  }
}

@mixin hover($color, $property: color) {
  @if lightness($color) > 10% {
    #{$property}: darken($color,8%);
  } @else {
    #{$property}: lighten($color,10%);
  }
}

@mixin button-hover($color, $property: color) {
  @if lightness($color) > 20% {
    #{$property}: darken($color,5%);
  } @else {
    #{$property}: lighten($color,6%);
  }
}

@mixin retina {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}

/* scss-combine:lib/text-inputs */
// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_text-inputs.scss

@function assign-inputs($inputs, $pseudo: null) {
  $list: ();

  @each $input in $inputs {
    $input: unquote($input);
    $input: if($pseudo, $input + ":" + $pseudo, $input);
    $list: append($list, $input, comma);
  }

  @return $list;
}


$text-inputs-list: 'input[type="color"]',
                  'input[type="date"]',
                  'input[type="datetime"]',
                  'input[type="datetime-local"]',
                  'input[type="email"]',
                  'input[type="month"]',
                  'input[type="number"]',
                  'input[type="password"]',
                  'input[type="search"]',
                  'input[type="tel"]',
                  'input[type="text"]',
                  'input[type="time"]',
                  'input[type="url"]',
                  'input[type="week"]',
                  'input:not([type])',
                  'textarea';

$all-text-inputs:        assign-inputs($text-inputs-list);
$all-text-inputs-active: assign-inputs($text-inputs-list, active);
$all-text-inputs-focus:  assign-inputs($text-inputs-list, focus);
$all-text-inputs-hover:  assign-inputs($text-inputs-list, hover);


/* scss-combine:styles/general */
// scss-lint:disable VariableForProperty ColorVariable

// Box model
// See: http://www.paulirish.com/2012/box-sizing-border-box-ftw/

html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

// - Links

a {
  text-decoration: none;
}

// - Headers

h1,
h2,
h3,
h4,
h5,
h6 {
  line-height: 1.25;
}

// - Basic elements

img {
  max-width: 100%;
}

ul,
ol,
dl {
  padding: 0;
  margin: 0;
}

ul {
  list-style: outside none;
}

ol {
  list-style: outside decimal;
}

li {

}

hr {
  height: 2px;
  border: 0;
}

blockquote {
  > *:first-child {
    margin-top: 0;
  }

  > *:last-child {
    margin-bottom: 0;
  }
}

figure {
  margin: 0;
}

iframe {
  max-width: 100%;
  border: 0;
}

pre {
  padding: 1em;
  background: #fafafa;
}

.show-for-sr {
  // scss-lint:disable ImportantRule
  position: absolute !important;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

/* scss-combine:styles/button */
.button {
  display: inline-block;
  line-height: normal;
  text-align: center;
  cursor: pointer;
  border: 0;
  border-radius: 0;
  -webkit-appearance: none;

  & + & {
    margin-left: 5px;
  }
}

/* scss-combine:styles/form */
// scss-lint:disable VariableForProperty ColorVariable


.form-fieldset {
  padding: 0;
  margin: 0;
  border: 0;
}

// - Fields, a wrapper for a label and input

.form-field {}

// - Labels

// <label class="form-label">
//   <div class="form-label-text">Label</div>
//   ... inputs ...
// </label>
.form-label {
  display: block;
}

.form-label-text,
.form-label-text-inline {
  display: inline-block;
}

// - Inputs

// text, email, password, search, telephone, tel, number, textarea, select
.form-input {
  display: block;
  border: 1px solid;
  border-color: inherit;
  border-radius: 0;
  box-sizing: border-box;

  &::placeholder { opacity: 0.8; }
}

textarea.form-input { resize: vertical; }

#{$all-text-inputs} {
  &.form-input {
    -webkit-appearance: none;
  }
}

// Wrapper for checkbox and radio inputs
// <div class="form-field form-inline">
//   <label class="form-label">
//     <span class="form-label-text">Check Me</span>
//     <input class="form-input" type="checkbox">
//   </label>
// </div>
.form-inline {
  .form-label-text {
    display: inline-block;
    vertical-align: middle;
  }

  .form-input {
    display: inline-block;
  }
}

/* scss-combine:styles/table */
table {
  margin: 1em 0;
  background: transparent;
  border: 1px solid;
  border-collapse: separate;
  border-top: 0;
  border-color: inherit;

  &.table-clean {
    border: 0;
    border-radius: 0;
  }
}

td,
th {
  padding: 20px;
  border-top: 1px solid;
  border-top-color: inherit;

  .table-clean & {
    border: 0;
  }
}

th {
  font-weight: bold;
}

td {
  border-left: 1px solid;
  border-left-color: inherit;

  &:first-child {
    border-left: 0;
  }
}


/* scss-combine:../../node_modules/susy/sass/susy */
// Susy
// ====

/* scss-combine:susy/language/susy */
// Susy Next Syntax
// ================

$susy-version: 2.1;

/* scss-combine:../su */
// Su
// ==

/* scss-combine:su/utilities */
// Map Functions
// =============


// Truncate List
// -------------
// - Return a list, truncated to a given length
@function _susy-truncate-list(
  $list,
  $length
) {
  $_return: ();

  @for $i from 1 through length($list) {
    $_return: if($i <= $length, append($_return, nth($list, $i)), $_return);
  }

  @return $_return;
}


// Deep Get
// --------
// - Return a value deep in nested maps
@function _susy-deep-get(
  $map,
  $keys...
) {
  $_return: $map;

  @each $key in $keys {
    @if type-of($_return) == map {
      $_return: map-get($_return, $key);
    }
  }

  @return $_return;
}


// Deep Set
// --------
// - Set a value deep in nested maps
@function _susy-deep-set(
  $map,
  $keys-value...
) {
  $_value: nth($keys-value, -1);
  $_keys: _susy-truncate-list($keys-value, length($keys-value) - 1);
  $_length: length($_keys);
  $_return: ();

  @for $i from 1 through $_length {
    $_n: 0 - $i;
    $_level: _susy-truncate-list($_keys, $_length + $_n);
    $_level: _susy-deep-get($map, $_level...);
    $_merge: nth($_keys, $_n);
    $_merge: ($_merge: $_value);
    $_return: if($_level, map-merge($_level, $_merge), $_merge);
    $_value: $_return;
  }

  @return $_return;
}


// Deep Merge
// ----------
// Return 2 objects of any depth, merged
@function _susy-deep-merge(
  $map1,
  $map2
) {

  @if type-of($map1) != map or type-of($map2) != map {
    $map1: $map2;
  } @else {
    @each $key, $value in $map2 {
      $_new: ($key: _susy_deep-merge(map-get($map1, $key), $value));
      $map1: map-merge($map1, $_new);
    }
  }

  @return $map1;
}


// Deep Has-Key
// ------------
// - Return true if a deep key exists
@function _susy-deep-has-key(
  $map,
  $keys...
) {
  $_return: null;
  $_stop: false;

  @each $key in $keys {
    @if not($_stop) {
      $_return: map-has-key($map, $key);
    }

    @if $_return {
      $map: map-get($map, $key);
    } @else {
      $_stop: true;
    }
  }

  @return $_return;
}

/* scss-combine:su/settings */
// Settings
// ========

// Version
// -------
$su-version: 1.1;


// Default Settings
// ----------------
// PRIVATE: The basic settings
$susy-defaults: (
  columns: 4,
  gutters: .25,
);


// User Settings
// -------------
// - Define the $susy variable with a map of your own settings.
// - Set EITHER $column-width OR $container
// - Use $column-width for static layouts
$susy: () !default;


// Susy Defaults
// -------------
// PRIVATE: Add defaults to Susy
@mixin susy-defaults(
  $defaults
) {
  $susy-defaults: map-merge($susy-defaults, $defaults) !global;
}


// Susy Set
// --------
// Change one setting
// - $key   : setting name
// - $value : setting value
@mixin susy-set(
  $key-value...
) {
  $susy: _susy-deep-set($susy, $key-value...) !global;
}


// Susy Get
// --------
// Return one setting from a grid
// - $key     : <keyword>
// - $layout  : <settings>
@function susy-get(
  $key,
  $layout: map-merge($susy-defaults, $susy)
) {
  $layout: parse-grid($layout);
  $_options: $layout $susy $susy-defaults;
  $_break: false;
  $_return: null;

  @each $opt in $_options {
    @if type-of($opt) == map and not($_break) {
      $_keyset: _susy-deep-has-key($opt, $key...);
      @if $_keyset {
        $_return: _susy-deep-get($opt, $key...);
        $_break: true;
      }
    }
  }

  @return $_return;
}

/* scss-combine:su/validation */
// Math Validation
// ===============


// Valid Columns
// -------------
// Check that a column setting is valid.
@function valid-columns(
  $columns,
  $silent: false
) {
  $type: type-of($columns);
  $return: null;

  @if $type == number and unitless($columns) {
    $return: $columns;
  } @else if $type == list {
    $fail: null;
    @each $col in $columns {
      @if type-of($col) == number {
        $fail: $fail or if(unitless($col), null, true);
      } @else {
        $fail: true;
      }
    }
    $return: if($fail, $return, $columns);
  }

  @if $return != $columns and not($silent) {
    $return: null;
    $warn: '$columns must be a unitless number or list of unitless numbers.';
    @warn $warn + ' Current value [#{$type}]: #{$columns}';
  }

  @return $return;
}


// Valid Gutters
// -------------
// Check that a gutter setting is valid.
@function valid-gutters(
  $gutters,
  $silent: false
) {
  $type: type-of($gutters);
  $return: null;

  @if $type == number and unitless($gutters) {
    $return: $gutters;
  } @else if not($silent) {
    $warn: '$gutters must be a unitless number.';
    @warn $warn + ' Current value [#{$type}]: #{$gutters}';
  }

  @return $return;
}

/* scss-combine:su/grid */
// Column math
// ===========


// Is Symmetrical
// --------------
// Returns true if a grid is symmetrical.
// - [$columns]   : <number> | <list>
@function is-symmetrical(
  $columns: susy-get(columns)
) {
  $columns: valid-columns($columns);
  @return if(type-of($columns) == number, $columns, null);
}


// Susy Count
// ----------
// Find the number of columns in a given layout
// - [$columns]   : <number> | <list>
@function susy-count(
  $columns: susy-get(columns)
) {
  $columns: valid-columns($columns);
  @return is-symmetrical($columns) or length($columns);
}


// Susy Sum
// --------
// Find the total sum of column-units in a layout
// - [$columns]   : <number> | <list>
// - [$gutters]   : <ratio>
// - [$spread]    : false/narrow | wide | wider
@function susy-sum(
  $columns  : susy-get(columns),
  $gutters  : susy-get(gutters),
  $spread   : false
) {
  $columns: valid-columns($columns);
  $gutters: valid-gutters($gutters);

  $spread: if($spread == wide, 0, if($spread == wider, 1, -1));
  $gutter-sum: (susy-count($columns) + $spread) * $gutters;
  $column-sum: is-symmetrical($columns);

  @if not($column-sum) {
    @each $column in $columns {
      $column-sum: ($column-sum or 0) + $column;
    }
  }

  @return $column-sum + $gutter-sum;
}


// Susy Slice
// ----------
// Return a subset of columns at a given location.
// - $span        : <number>
// - $location    : <number>
// - [$columns]   : <number> | <list>
@function susy-slice(
  $span,
  $location,
  $columns: susy-get(columns)
) {
  $columns: valid-columns($columns);
  $sub-columns: $span;

  @if not(is-symmetrical($columns)) {
    $location: $location or 1;
    $sub-columns: ();
    @for $i from $location to ($location + $span) {
      $sub-columns: append($sub-columns, nth($columns, $i));
    }
  }

  @return $sub-columns;
}


// Susy
// ----
// Find the sum of a column-span.
// - $span        : <number>
// - $location    : <number>
// - [$columns]   : <number> | <list>
// - [$gutters]   : <ratio>
// - [$spread]    : false/narrow | wide | wider
@function susy(
  $span,
  $location     : false,
  $columns      : susy-get(columns),
  $gutters      : susy-get(gutters),
  $spread       : false
) {
  $columns: valid-columns($columns);
  $gutters: valid-gutters($gutters);
  $span: susy-slice($span, $location, $columns);

  @return susy-sum($span, $gutters, $spread);
}


/* scss-combine:../output/float */
// Float API
// =========

/* scss-combine:shared */
// Shared API
// ==========

/* scss-combine:support */
// Susy Browser Support
// ====================

/* scss-combine:support/support */
// Browser Support
// ===============

// Susy Support Defaults
// ---------------------
@include susy-defaults((
  use-custom: (
    clearfix: false,
    background-image: true,
    background-options: false,
    breakpoint: true,
    box-sizing: true,
    rem: true,
  ),
));


// Susy Support [mixin]
// --------------------
// Send property-value pairs to the proper support modules.
// - $prop  : <css property>
// - $val   : <css value>
@mixin susy-support(
  $prop,
  $val
) {
  // Background Support
  @if $prop == background-image {
    @include susy-background-image($val);
  } @else if $prop == background-size {
    @include susy-background-size($val);
  } @else if $prop == background-origin {
    @include susy-background-origin($val);
  } @else if $prop == background-clip {
    @include susy-background-clip($val);
  }

  // Box-Sizing Support
  @else if $prop == box-sizing {
    @include susy-box-sizing($val);
  }

  // Rem Support
  @else {
    @include susy-rem($prop, $val);
  }
}


// Susy Support [function]
// -----------------------
// Check for support of a feature.
// - $feature       : <string>
//                    - e.g "rem" or "box-sizing"
// - $requirements  : <map>
//                    - e.g (variable: rem-with-px-fallback, mixin: rem)
// - $warn          : <bool>
@function susy-support(
  $feature,
  $requirements: (),
  $warn: true
) {
  $_support: susy-get(use-custom $feature);

  @if $_support {
    $_fail: false;

    @each $_type, $_req in $requirements {
      @each $_i in $_req {
        $_pass: call(unquote("#{$_type}-exists"), $_i);

        @if not($_pass) {
          $_fail: true;
          @if $warn {
            @warn "You requested custom support of #{$feature}, but the #{$_i} #{$_type} is not available.";
          }
        }
      }
    }

    $_support: if($_fail, false, $_support);
  }

  @return $_support;
}

/* scss-combine:support/prefix */
// Susy Prefix
// ===========

// Prefix
// ------
// Output simple prefixed properties.
// - $prop      : <css property>
// - $val       : <css value>
// - [$prefix]  : <browser prefix list>
@mixin susy-prefix(
  $prop,
  $val,
  $prefix: official
) {
  @each $fix in $prefix {
    $fix: if($fix == official or not($fix), $prop, '-#{$fix}-#{$prop}');
    @include susy-rem($fix, $val);
  }
}

/* scss-combine:support/background */
// Background Properties
// =====================

// Susy Background Image
// ---------------------
// Check for an existing support mixin, or provide a simple fallback.
// - $image: <background-image>
@mixin susy-background-image(
  $image
) {
  @if susy-support(background-image, (mixin: background-image), $warn: false) {
    @include background-image($image...);
  } @else {
    background-image: $image;
  }
}

// Susy Background Size
// ---------------------
// Check for an existing support mixin, or provide a simple fallback.
// - $image: <background-size>
@mixin susy-background-size(
  $size
) {
  @if susy-support(background-options, (mixin: background-size)) {
    @include background-size($size);
  } @else {
    background-size: $size;
  }
}

// Susy Background Origin
// ----------------------
// Check for an existing support mixin, or provide a simple fallback.
// - $image: <background-origin>
@mixin susy-background-origin(
  $origin
) {
  @if susy-support(background-options, (mixin: background-origin)) {
    @include background-origin($origin);
  } @else {
    background-origin: $origin;
  }
}

// Susy Background Clip
// --------------------
// Check for an existing support mixin, or provide a simple fallback.
// - $image: <background-clip>
@mixin susy-background-clip(
  $clip
) {
  @if susy-support(background-options, (mixin: background-clip)) {
    @include background-clip($clip);
  } @else {
    background-clip: $clip;
  }
}

/* scss-combine:support/box-sizing */
// Box Sizing
// ==========

// Box Sizing
// ----------
// Check for an existing support mixin, or provide a simple fallback.
// - $model: <box-sizing>
@mixin susy-box-sizing(
  $model: content-box
) {
  @if $model {
    @if susy-support(box-sizing, (mixin: box-sizing), $warn: false) {
      @include box-sizing($model);
    } @else {
      $prefix: (moz, webkit, official);
      @include susy-prefix(box-sizing, $model, $prefix);
    }
  }
}

/* scss-combine:support/rem */
// rem Support
// ===========

// rem
// ---
// Check for an existing support mixin, or output directly.
// - $prop  : <css property>
// - $val   : <css value>
@mixin susy-rem(
  $prop,
  $val
) {
  $_reqs: (
    variable: rhythm-unit rem-with-px-fallback,
    mixin: rem,
  );
  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {
    @include rem($prop, $val);
  } @else {
    #{$prop}: $val;
  }
}

/* scss-combine:support/clearfix */
// Susy Fallback Clearfix
// ======================


// Clearfix
// --------
// Check for an existing support mixin, or provide a simple fallback.
@mixin susy-clearfix {
  @if susy-support(clearfix, (mixin: clearfix)) {
    @include clearfix;
  } @else {
    &:after {
      content: " ";
      display: block;
      clear: both;
    }
  }
}



/* scss-combine:shared/inspect */
// Debugging
// =========

// Susy Inspect
// ------------
// Output arguments passed to a inspect.
// - $mixin  : <susy mixin>
// - $inspec   : <mixin arguments>

@mixin susy-inspect(
  $mixin,
  $inspect
) {
  $show: false;

  @each $item in $inspect {
    @if index($item, inspect) {
      $show: true;
    }
  }

  @if $show or susy-get(debug inspect) {
    -susy-#{$mixin}: inspect($inspect);
  }
}

/* scss-combine:shared/output */
// Output
// ======

// Output
// ------
// Output CSS with proper browser support.
// - $styles  : <map of css property-value pairs>
@mixin output(
  $styles
) {
  @each $prop, $val in $styles {
    @include susy-support($prop, $val);
  }
}

/* scss-combine:shared/direction */
// Direction Helpers
// =================

// Susy Flow Defaults
// ------------------
// - PRIVATE
@include susy-defaults((
  flow: ltr,
));

// Get Direction
// -------------
// Return the 'from' or 'to' direction of a ltr or rtl flow.
// - [$flow]  : ltr | rtl
// - [$key]   : from | to
@function get-direction(
  $flow: map-get($susy-defaults, flow),
  $key: from
) {
  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));
  @return map-get($return, $key);
}

// To
// --
// Return the 'to' direction of a flow
// - [$flow]  : ltr | rtl
@function to(
  $flow: map-get($susy-defaults, flow)
) {
  @return get-direction($flow, to);
}

// From
// ----
// Return the 'from' direction of a flow
// - [$flow]  : ltr | rtl
@function from(
  $flow: map-get($susy-defaults, flow)
) {
  @return get-direction($flow, from);
}

/* scss-combine:shared/background */
// Grid Background API
// ===================
// - Sub-pixel rounding can lead to several pixels variation between browsers.

// Grid Background Output
// ----------------------
// - $image: background-image
// - $size: background-size
// - $clip: background-clip
// - [$flow]: ltr | rtl
@mixin background-grid-output (
  $image,
  $size: null,
  $clip: null,
  $flow: map-get($susy-defaults, flow)
) {
  $output: (
    background-image: $image,
    background-size: $size,
    background-origin: $clip,
    background-clip: $clip,
    background-position: from($flow) top,
  );

  @include output($output);
}

/* scss-combine:shared/container */
// Shared Container API
// ====================

// Container Output
// ----------------
// - [$width]         : <length>
// - [$justify]       : left | center | right
// - [$math]          : fluid | static
@mixin container-output(
  $width,
  $justify: auto auto,
  $property: max-width
) {
  $output: (
    #{$property}: $width or 100%,
    margin-left: nth($justify, 1),
    margin-right: nth($justify, 2),
  );

  @include output($output);
}

/* scss-combine:shared/margins */
// Margins API
// ===========

// Margin Output
// -------------
// - $before  : <length>
// - $after   : <length>
// - [$flow]  : ltr | rtl
@mixin margin-output(
  $before,
  $after,
  $flow: map-get($susy-defaults, flow)
) {
  $to: to($flow);
  $from: from($flow);

  $output: (
    margin-#{$from}: $before,
    margin-#{$to}: $after,
  );

  @include output($output);
}

/* scss-combine:shared/padding */
// Padding API
// ===========

// Padding Output
// --------------
// - $before  : <length>
// - $after   : <length>
// - [$flow]  : ltr | rtl
@mixin padding-output(
  $before,
  $after,
  $flow: map-get($susy-defaults, flow)
) {
  $to: to($flow);
  $from: from($flow);

  $output: (
    padding-#{$from}: $before,
    padding-#{$to}: $after,
  );

  @include output($output);
}






/* scss-combine:float/container */
// Float Container API
// ===================

// Float Container
// ---------------
// - [$width]         : <length>
// - [$justify]       : left | center | right
// - [$math]   : fluid | static
@mixin float-container(
  $width,
  $justify: auto auto,
  $property: max-width
) {
  @include susy-clearfix;
  @include container-output($width, $justify, $property);
}

/* scss-combine:float/span */
// Float Span API
// ==============

// Float Span Output
// -----------------
// - $width             : <length>
// - [$float]           : from | to
// - [$margin-before]   : <length>
// - [$margin-after]    : <length>
// - [$padding-before]  : <length>
// - [$padding-after]   : <length>
// - [$flow]            : ltr | rtl
@mixin float-span-output(
  $width,
  $float            : from,
  $margin-before    : null,
  $margin-after     : null,
  $padding-before   : null,
  $padding-after    : null,
  $flow             : map-get($susy-defaults, flow)
) {
  $to     : to($flow);
  $from   : from($flow);

  $output: (
    width: $width,
    float: if($float == to, $to, null) or if($float == from, $from, null),
    margin-#{$from}: $margin-before,
    margin-#{$to}: $margin-after,
    padding-#{$from}: $padding-before,
    padding-#{$to}: $padding-after,
  );

  @include output($output);
}

/* scss-combine:float/end */
// Float Ends API
// ==============

// Susy End Defaults
// -----------------
// - PRIVATE
@include susy-defaults((
  last-flow: to,
));

// Float Last
// ----------
// - [$flow]  : ltr | rtl
@mixin float-last(
  $flow: map-get($susy-defaults, flow),
  $last-flow: map-get($susy-defaults, last-flow),
  $margin: 0
) {
  $to: to($flow);

  $output: (
    float: if($last-flow == to, $to, null),
    margin-#{$to}: $margin,
  );

  @include output($output);
}

// Float First
// -----------
// - [$flow]  : ltr | rtl
@mixin float-first(
  $flow: map-get($susy-defaults, flow)
) {
  $output: (
    margin-#{from($flow)}: 0,
  );

  @include output($output);
}

/* scss-combine:float/isolate */
// Float Isolation API
// ===================

// Isolate Output
// --------------
// - $push    : <length>
// - [$flow]  : ltr | rtl
@mixin isolate-output(
  $push,
  $flow: map-get($susy-defaults, flow)
) {
  $to: to($flow);
  $from: from($flow);

  $output: (
    float: $from,
    margin-#{$from}: $push,
    margin-#{$to}: -100%,
  );

  @include output($output);
}



/* scss-combine:susy/settings */
// Susy Settings
// =============

// Susy Language Defaults
// ----------------------
// - PRIVATE
@include susy-defaults((
  container: auto,
  math: fluid,
  output: float,
  container-position: center,
  gutter-position: after,
  global-box-sizing: content-box,
  debug: (
    image: hide,
    color: rgba(#66f, .25),
    output: background,
    toggle: top right,
  ),
));


// Valid Keyword Values
// --------------------
// - PRIVATE: DONT'T TOUCH
$susy-keywords: (
  container: auto,
  math: static fluid,
  output: isolate float,
  container-position: left center right,
  flow: ltr rtl,
  gutter-position: before after split inside inside-static,
  box-sizing: border-box content-box,
  span: full,
  edge: first alpha last omega full,
  spread: narrow wide wider,
  gutter-override: no-gutters no-gutter,
  role: nest,
  clear: break nobreak,
  debug image: show hide show-columns show-baseline,
  debug output: background overlay,
);


// Parse Susy Keywords and Maps
// ----------------------------
@function parse-settings(
  $short: $susy
) {
  $_return: ();

  @if type-of($short) == map {
    $_return: $short;
  } @else {
    @each $item in $short {
      // strings
      @if type-of($item) == string {
        @each $key, $value in $susy-keywords {
          @if index($value, $item) {
            $_key-value: append($key, $item);
            $_return: _susy-deep-set($_return, $_key-value...);
          }
        }
      // maps
      } @else if type-of($item) == map {
        $_return: map-merge($_return, $item);
      }
    }
  }

  @return $_return;
}


// Parse Columns & Gutters
// -----------------------
@function parse-layout(
  $short
) {
  $_return: ();
  $_columns: ();
  $_gutters: null;

  @if not(unitless(nth(nth($short, 1), 1))) {
    $_gutters: nth($short, 1);
  } @else {
    $_columns: (columns: nth($short, 1));
    $_gutters: if(length($short) > 1, nth($short, 2), $_gutters);
  }

  @if type-of($_gutters) == list and length($_gutters) > 0 {
    $_gutters: (
      gutters: nth($_gutters, 2) / nth($_gutters, 1),
      column-width: nth($_gutters, 1),
    );
  } @else {
    $_gutters: if($_gutters, (gutters: $_gutters), ());
  }

  $_return: map-merge($_return, $_columns);
  $_return: map-merge($_return, $_gutters);

  @return $_return;
}


// Parse Grid/Context
// ------------------
@function parse-grid(
  $short: $susy
) {
  $_return: parse-settings($short);
  $_layout: ();

  @if type-of($short) == map {
    $_return: $short;
  } @else {
    @each $item in $short {
      // number or list
      @if type-of($item) == number or type-of($item) == list {
        @if type-of($item) == list or unitless($item) {
          $_layout: append($_layout, $item);
        } @else {
          $_return: map-merge($_return, (container: $item));
        }
      }
    }

    $_layout: if(length($_layout) > 0, parse-layout($_layout), $_layout);
  }

  @return map-merge($_return, $_layout);
}


// Parse Span
// ----------
@function parse-span(
  $short,
  $key: span
) {
  $_return: ();

  @if type-of($short) == map {
    $_return: $short;
  } @else {
    $_at: index($short, at);

    @if $_at {
      $_loci: $_at + 1;
      $_location: nth($short, $_loci);
      $_return: map-merge($_return, (location: $_location));
      $short: set-nth($short, $_at, null);
      $short: set-nth($short, $_loci, null);
    }

    $_i: 1;
    $_span: ();

    @while $_i <= length($short) {
      $_this: nth($short, $_i);

      @if type-of($_this) == number {
        $_span: append($_span, $_this);
        $short: set-nth($short, $_i, null);
      } @else if $_this == of {
        $short: set-nth($short, $_i, null);
        $_i: length($short) + 1;
      }

      $_i: $_i + 1;
    }

    @if length($_span) > 0 {
      $_span: if(length($_span) == 1, nth($_span, 1), $_span);
      $_return: map-merge($_return, ($key: $_span));
    }

    $_return: map-merge($_return, parse-grid($short));
  }

  @return $_return;
}


// Parse Gutters
// -------------
@function parse-gutters(
  $short: $susy
) {
  $_gutters: parse-span($short, gutter-override);
  $_span: susy-get(gutter-override, $_gutters);

  @if $_span and not(map-get($_gutters, columns)) {
    $_context: ();
    $_new: ();

    @each $item in $_span {
      @if type-of($item) == number and unitless($item) {
        $_context: append($_context, $item);
      } @else {
        $_new: append($_new, $item);
      }
    }

    $_context: parse-grid($_context);
    $_new: if(length($_new) == 0, null, $_new);
    $_new: if(length($_new) == 1, nth($_new, 1), $_new);
    $_new: (gutter-override: if($_new != $_span, $_new, $_span));

    $_gutters: map-merge($_gutters, $_new);
    $_gutters: map-merge($_gutters, $_context);
  }

  @return $_gutters;
}

/* scss-combine:susy/validation */
// Validation
// ==========


// Validate Column Math
// --------------------
@function valid-column-math(
  $math,
  $column-width
) {
  @if $math == static and not($column-width) {
    @error 'Static math requires a valid column-width setting.';
  }

  @return $column-width;
}

/* scss-combine:susy/grids */
// Grid Syntax
// ===========


// Layout
// ------
// Set a new layout using a shorthand
// - $layout: <settings>
// - $clean: boolean
@mixin layout(
  $layout,
  $clean: false
) {
  $inspect  : $layout;
  $susy     : _get-layout($layout, $clean) !global;

  @include susy-inspect(layout, $inspect);
}


// Use Grid
// --------
// Use an arbitrary layout for a section of code
// - $layout: <settings>
// - $clean: boolean
@mixin with-layout(
  $layout,
  $clean: false
) {
  $inspect  : $layout;
  $old      : $susy;
  $susy     : _get-layout($layout, $clean) !global;

  @include susy-inspect(with-layout, $inspect);

  @content;

  $susy: $old !global;
}


// Layout
// ------
// Return a parsed layout map based on shorthand syntax
// - $layout: <settings>
@function layout(
  $layout: $susy
) {
  @return parse-grid($layout);
}


// Get Layout
// ----------
// Return a new layout based on current and given settings
// - $layout: <settings>
// - $clean: boolean
@function _get-layout(
  $layout,
  $clean: false
) {
  $layout: layout($layout);
  @return if($clean, $layout, _susy-deep-merge($susy, $layout));
}

/* scss-combine:susy/box-sizing */
// Susy Box Sizing
// =================

// Global Box Sizing
// -----------------
// Set a box model globally on all elements.
// - [$box]: border-box | content-box
// - [$inherit]: true | false
@mixin global-box-sizing(
  $box: susy-get(global-box-sizing),
  $inherit: false
) {
  $inspect: $box;

  @if $inherit {
    @at-root {
       html { @include output((box-sizing: $box)); }
       *, *:before, *:after { box-sizing: inherit; }
     }
  } @else {
    *, *:before, *:after { @include output((box-sizing: $box)); }
  }

  @include susy-inspect(global-box-sizing, $inspect);
  @include update-box-model($box);
}

// Border Box Sizing
// -----------------
// A legacy shortcut...
// - [$inherit]: true | false
@mixin border-box-sizing(
  $inherit: false
) {
  @include global-box-sizing(border-box, $inherit);
}

// Update Box Model
// ----------------
// PRIVATE: Updates global box model setting
@mixin update-box-model(
  $box
) {
  @if $box != susy-get(global-box-sizing) {
  @include susy-set(global-box-sizing, $box);
  }
}

/* scss-combine:susy/context */
// Context Syntax
// ==============

// Nested [function]
// -----------------
// Return a subset grid for nested context.
// - $context   : <span>
@function nested(
  $context
) {
  $context    : parse-span($context);
  $span       : susy-get(span, $context);
  $location   : get-location($context);
  $columns    : susy-get(columns, $context);

  @return susy-slice($span, $location, $columns);
}

// Nested [mixin]
// --------------
// Use a subset grid for a nested context
// - $context   : <span>
// - @content   : <content>
@mixin nested(
  $context
) {
  $inspect  : $context;
  $context  : parse-span($context);
  $old      : susy-get(columns);
  $susy     : map-merge($susy, (columns: nested($context))) !global;

  @include susy-inspect(nested, $inspect);
  @content;

  $susy     : map-merge($susy, (columns: $old)) !global;
}

/* scss-combine:susy/background */
// Background Grid Syntax
// ======================

$susy-overlay-grid-head-exists: false;


// Show Grid/s
// -----------
// Show grid on any element using either background or overlay.
// - [$grid]  : <settings>
@mixin show-grid(
  $grid: $susy
) {
  $inspect: $grid;
  $_output: debug-get(output, $grid);

  @include susy-inspect(show-grid, $inspect);
  @if $_output == overlay and susy-get(debug image, $grid) != hide {
    @include overlay-grid($grid);
  } @else {
    @include background-grid($grid);
  }
}

@mixin show-grids(
  $grid: $susy
) {
  @include show-grid($grid);
}

// Background Grid
// ---------------
// Show a grid background on any element.
// - [$grid]  : <settings>
@mixin background-grid(
  $grid: $susy
) {
  $inspect  : $grid;
  $_output  : get-background($grid);

  @if length($_output) > 0 {
    $_flow: susy-get(flow, $grid);

    $_image: ();
    @each $name, $layer in map-get($_output, image) {
      $_direction: if($name == baseline, to bottom, to to($_flow));
      $_image: append($_image, linear-gradient($_direction, $layer), comma);
    }
    $_output: map-merge($_output, (image: $_image));

    @include background-grid-output($_output...);
    @include susy-inspect(background-grid, $inspect);
  }
}


// Overlay Grid
// ------------
// Generate an icon to trigger grid-overlays on any given elements.
// $grids...  : <selector> [<settings>] [, <selector>]*
@mixin overlay-grid (
  $grid: $susy
) {
  @if not($susy-overlay-grid-head-exists) {
    @at-root head { @include overlay-head($grid); }
    @at-root head:before { @include overlay-trigger; }
    @at-root head:hover { @include overlay-trigger-hover; }
    $susy-overlay-grid-head-exists: true !global;
  }

  head:hover ~ &,
  head:hover ~ body & {
    position: relative;
    &:before {
      @include grid-overlay-base;
      @include background-grid($grid);
    }
  }
}


// [Private] Overlay Trigger
// -------------------------
@mixin overlay-trigger {
  content: "|||";
  display: block;
  padding: 5px 10px;
  font: {
    family: sans-serif;
    size: 16px;
    weight: bold;
  }
}


// [Private] Overlay Trigger Hover
// -------------------------------
@mixin overlay-trigger-hover {
  background: rgba(white, .5);
  color: red;
}


// [Private] Overlay Head
// ----------------------
// <head> styles to create grid overlay toggle
@mixin overlay-head (
  $grid: $susy
) {
  $_toggle: debug-get(toggle, $grid);
  $_horz: null;
  $_vert: null;

  @each $side in $_toggle {
    $_horz: if($side == left or $side == right, $side, $_horz);
    $_vert: if($side == top or $side == bottom, $side, $_vert);
  }

  display: block;
  position: fixed;
  #{$_horz}: 10px;
  #{$_vert}: 10px;
  z-index: 999;
  color: #333;
  background: rgba(white, .25);
}


// [Private] Grid Overlay Base
// ---------------------------
// Base styles for generating a grid overlay
@mixin grid-overlay-base() {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  content: " ";
  z-index: 998;
}


// Get Symmetrical Background
// --------------------------
// - $grid: <map>
@function get-background-sym(
  $grid
) {
  $grid           : parse-grid($grid);
  $_gutters       : susy-get(gutters, $grid);
  $_column-width  : susy-get(column-width, $grid);
  $_math          : susy-get(math, $grid);

  $_color         : debug-get(color);
  $_trans         : transparent;
  $_light         : lighten($_color, 15%);

  $_end           : 1 + $_gutters;
  $_after         : percentage(1/$_end);
  $_stops         : ();
  $_size          : span(1 $grid wide);

  @if is-inside($grid) {
    $_stops: $_color, $_light;
  } @else if is-split($grid) {
    $_split: $_gutters/2;
    $_before: percentage($_split/$_end);
    $_after: percentage((1 + $_split)/$_end);
    $_stops: $_trans $_before, $_color $_before, $_light $_after, $_trans $_after;
  } @else {
    $_stops: $_color, $_light $_after, $_trans $_after;
  }

  @if $_math == static {
    $_size: valid-column-math($_math, $_column-width) * $_end;
  }

  $_output: (
    image: (columns: $_stops),
    size: $_size,
  );

  @return $_output;
}


// Get Asymmetrical Inside
// -----------------------
// - $grid: <settings>
@function get-asym-inside(
  $grid
) {
  $grid     : parse-grid($grid);
  $_columns : susy-get(columns, $grid);

  $_color   : debug-get(color);
  $_light   : lighten($_color, 15%);
  $_stops   : ();

  @for $location from 1 through susy-count($_columns) {
    $this-stop: ();

    @if $location == 1 {
      $this-stop: append($this-stop, $_color, comma);
    } @else {
      $start: parse-span(1 at $location $grid);
      $start: get-isolation($start);
      $this-stop: append($this-stop, $_color $start, comma);
    }

    @if $location == susy-count($_columns) {
      $this-stop: append($this-stop, $_light, comma);
    } @else {
      $_end: parse-span(1 at ($location + 1) $grid);
      $_end: get-isolation($_end);
      $this-stop: append($this-stop, $_light $_end, comma);
    }

    $_stops: join($_stops, $this-stop, comma);
  }

  @return $_stops;
}


// Get Asymmetrical Split
// ----------------------
// - $grid: <settings>
@function get-asym-split(
  $grid
) {
  $grid     : parse-grid($grid);
  $_columns : susy-get(columns, $grid);

  $_color   : debug-get(color);
  $_light   : lighten($_color, 15%);
  $_stops   : ();

  @for $location from 1 through susy-count($_columns) {
    $this-stop: ();

    $start: parse-span(1 at $location $grid);
    $start: get-isolation($start);
    $this-stop: append($this-stop, transparent $start, comma);
    $this-stop: append($this-stop, $_color $start, comma);

    $_end: $start + span(1 at $location $grid);
    $this-stop: append($this-stop, $_light $_end, comma);
    $this-stop: append($this-stop, transparent $_end, comma);

    $_stops: join($_stops, $this-stop, comma);
  }

  @return $_stops;
}


// Get Asymmetrical Outside
// ------------------------
// - $grid: <settings>
@function get-asym-outside(
  $grid
) {
  $grid     : parse-grid($grid);
  $_columns : susy-get(columns, $grid);

  $_color   : debug-get(color);
  $_light   : lighten($_color, 15%);
  $_trans   : transparent;
  $_stops   : ();

  @for $location from 1 through susy-count($_columns) {
    $this-stop: ();

    @if $location == 1 {
      $this-stop: append($this-stop, $_color, comma);
    } @else {
      $start: parse-span(1 at $location $grid);
      $start: get-isolation($start);
      $this-stop: append($this-stop, $_color $start, comma);
    }

    @if $location == susy-count($_columns) {
      $this-stop: append($this-stop, $_light, comma);
    } @else {
      $gutter: get-span-width(first $location $grid);

      $_end: parse-span(1 at ($location + 1) $grid);
      $_end: get-isolation($_end);

      $gutter: $_light $gutter, $_trans $gutter, $_trans $_end;
      $this-stop: join($this-stop, $gutter, comma);
    }

    $_stops: join($_stops, $this-stop, comma);
  }

  @return $_stops;
}


// Get Asymmetrical Background
// ---------------------------
// - $grid: <settings>
@function get-background-asym(
  $grid
) {
  $_stops: ();

  @if is-inside($grid) {
    $_stops: get-asym-inside($grid);
  } @else if is-split($grid) {
    $_stops: get-asym-split($grid);
  } @else {
    $_stops: get-asym-outside($grid);
  }

  @return (image: (columns: $_stops));
}


// Get Background
// --------------
// - $grid: <settings>
@function get-background(
  $grid
) {
  $grid     : parse-grid($grid);
  $_show    : susy-get(debug image, $grid);
  $_return  : ();

  @if $_show and $_show != 'hide' {
    $_columns: susy-get(columns, $grid);

    @if $_show != 'show-baseline' {
      $_sym: is-symmetrical($_columns);
      $_return: if($_sym, get-background-sym($grid), get-background-asym($grid));
      $_return: map-merge($_return, (clip: content-box));
    }

    @if $_show != 'show-columns'
      and global-variable-exists(base-line-height)
      and type-of($base-line-height) == 'number'
      and not unitless($base-line-height) {
      $_color: variable-exists('grid-background-baseline-color');
      $_color: if($_color, $grid-background-baseline-color, #000);

      $_image: map-get($_return, image);
      $_size: map-get($_return, size);
      $_baseline: (baseline: ($_color 1px, transparent 1px));
      $_baseline-size: 100% $base-line-height;

      $_return: map-merge($_return, (
        image: if($_image, map-merge($_image, $_baseline), $_baseline),
        size: if($_size, ($_size, $_baseline-size), $_baseline-size),
      ));

      @if $_show == 'show' {
        $_clip: map-get($_return, clip);
        $_return: map-merge($_return, (clip: join($_clip, border-box, comma)));
      }
    } @else if $_show == 'show-baseline' {
      @warn 'Please provide a $base-line-height with the desired height and units';
    }
  }

  @if map-get($_return, image) {
    $_return: map-merge($_return, (flow: susy-get(flow, $grid)));
  }

  @return $_return;
}


// Get Debug
// ---------
// Return the value of a debug setting
// - $key: <setting>
@function debug-get(
  $key,
  $grid: $susy
) {
  $key: join(debug, $key, space);
  @return susy-get($key, $grid);
}

/* scss-combine:susy/container */
// Container Syntax
// ================

// Container [mixin]
// -----------------
// Set a container element
// - [$layout]  : <settings>
@mixin container(
  $layout: $susy
) {
  $inspect    : $layout;
  $layout     : parse-grid($layout);

  $_width     : get-container-width($layout);
  $_justify   : parse-container-position(susy-get(container-position, $layout));
  $_property  : if(susy-get(math, $layout) == static, width, max-width);

  $_box       : susy-get(box-sizing, $layout);

  @if $_box {
    @include output((box-sizing: $_box));
  }

  @include susy-inspect(container, $inspect);
  @include float-container($_width, $_justify, $_property);
  @include show-grid($layout);
}

// Container [function]
// --------------------
// Return container width
// - [$layout]  : <settings>
@function container(
  $layout: $susy
) {
  $layout: parse-grid($layout);
  @return get-container-width($layout);
}

// Get Container Width
// -------------------
// Calculate the container width
// - [$layout]: <settings>
@function get-container-width(
  $layout: $susy
) {
  $layout         : parse-grid($layout);
  $_width         : susy-get(container, $layout);
  $_column-width  : susy-get(column-width, $layout);
  $_math          : susy-get(math, $layout);

  @if not($_width) or $_width == auto {
    @if valid-column-math($_math, $_column-width) {
      $_columns   : susy-get(columns, $layout);
      $_gutters   : susy-get(gutters, $layout);
      $_spread    : if(is-split($layout), wide, narrow);
      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;
    } @else {
      $_width: 100%;
    }
  }

  @return $_width;
}

// Parse Container Position
// ------------------------
// Parse the $container-position into margin values.
// - [$justify]   : left | center | right | <length> [<length>]
@function parse-container-position(
  $justify: map-get($susy-defaults, container-position)
) {
  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);

  @if not(index(left right center, $justify)) {
    $_return: nth($justify, 1);
    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);
  }

  @return $_return;
}

/* scss-combine:susy/span */
// Span Syntax
// ===========

// Span [mixin]
// ------------
// Set a spanning element using shorthand syntax.
// - $span  : <span>
@mixin span(
  $span
) {
  $inspect: $span;
  $span: parse-span($span);
  $output: span-math($span);
  $nesting: susy-get(span, $span);
  $clear: susy-get(clear, $span);

  $box: susy-get(box-sizing, $span);
  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);
  $box: $box or if(is-inside($span) and $content-box, border-box, null);

  @if $clear == break {
    @include break;
  } @else if $clear == nobreak {
    @include nobreak;
  }

  @include susy-inspect(span, $inspect);
  @include output((box-sizing: $box));
  @include float-span-output($output...);

  @if valid-columns($nesting, silent) {
    @include nested($span) { @content; }
  } @else {
    @content;
  }
}

// Span [function]
// ---------------
// Return the width of a span.
// - $span  : <span>
@function span(
  $span
) {
  @return get-span-width($span);
}

// Span Math
// ---------
// Get all the span results.
// - $span: <map>
@function span-math(
  $span
) {
  $nest             : if(susy-get(role, $span) == nest, true, false);
  $split-nest       : if(is-split($span) and $nest, true, false);
  $edge             : get-edge($span);
  $location         : get-location($span);

  $float            : from;
  $padding-before   : null;
  $padding-after    : null;
  $margin-before    : null;
  $margin-after     : null;

  // calculate widths
  $spread: index(map-values($span), spread);
  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);
  $width: get-span-width($span);
  $gutters: get-gutters($span);

  // apply gutters
  @if is-inside($span) {
    @if not(susy-get(role, $span)) {
      $padding-before: map-get($gutters, before);
      $padding-after: map-get($gutters, after);
    }
  } @else {
    @if not($split-nest) {
      $margin-before: map-get($gutters, before);
      $margin-after: map-get($gutters, after);
    }
  }

  // special margin handling
  @if susy-get(output, $span) == isolate and $location {
    $margin-before: get-isolation($span);
    $margin-after: -100%;
  } @else if $edge {
    $is-split: is-split($span);
    $pos: susy-get(gutter-position, $span);

    @if $edge == last {
      $float: susy-get(last-flow, $span);
    }

    @if not($is-split) {
      @if $edge == full or ($edge == first and $pos == before) {
        $margin-before: 0;
      }
      @if $edge == full or ($edge == last and $pos == after) {
        $margin-after: 0;
      }
    }

  }

  @return (
    width           : $width,
    float           : $float,
    margin-before   : $margin-before,
    margin-after    : $margin-after,
    padding-before  : $padding-before,
    padding-after   : $padding-after,
    flow            : susy-get(flow, $span),
  );
}

// Get Span Width
// --------------
// Return span width.
// - $span: <map>
@function get-span-width(
  $span
) {
  $span     : parse-span($span);

  $n        : susy-get(span, $span);
  $location : get-location($span);
  $columns  : susy-get(columns, $span);
  $gutters  : susy-get(gutters, $span);
  $spread   : susy-get(spread, $span);

  $context  : null;
  $span-sum : null;
  $width    : null;

  @if $n == 'full' {
    $pos: susy-get(gutter-position, $span);
    $role: susy-get(role, $span);
    $n: if($pos == split and $role != nest, susy-count($columns), 100%);
  }

  @if type-of($n) != number {
    @warn "(#{type-of($n)}) #{$n} is not a valid span.";
  } @else if unitless($n) {
    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));
    $spread: if(is-inside($span), $spread or wide, $spread);
    $span-sum: susy($n, $location, $columns, $gutters, $spread);

    $_math: susy-get(math, $span);
    $_column-width: susy-get(column-width, $span);
    @if $_math == static {
      $width: $span-sum * valid-column-math($_math, $_column-width);
    } @else {
      $width: percentage($span-sum / $context);
    }
  } @else {
    $width: $n;
  }

  @return $width;
}

/* scss-combine:susy/gutters */
// Gutter Syntax
// =============


// Gutters
// -------
// Set gutters on an element.
// - [$span]   : <settings>
@mixin gutters(
  $span: $susy
) {
  $inspect  : $span;
  $span     : parse-gutters($span);
  $_gutters : get-gutters($span);

  $_output: (
    before: map-get($_gutters, before),
    after: map-get($_gutters, after),
    flow: susy-get(flow, $span),
  );

  @include susy-inspect(gutters, $inspect);

  @if is-inside($span) {
    @include padding-output($_output...);
  } @else {
    @include margin-output($_output...);
  }
}

@mixin gutter(
  $span: $susy
) {
  @include gutters($span);
}


// Gutter
// ------
// Return the width of a gutter.
// - [$span]   : <settings>
@function gutter(
  $span: $susy
) {
  $span: parse-gutters($span);

  $_gutters: get-gutters($span);
  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);

  @return $_gutters;
}

@function gutters(
  $span: $susy
) {
  @return gutter($span);
}


// Get Gutter Width
// ----------------
// Return gutter width.
// - [$context]: <context>
@function get-gutter-width(
  $context: $susy
) {
  $context  : parse-gutters($context);

  $_gutters : susy-get(gutters, $context);
  $_gutter  : susy-get(gutter-override, $context);

  @if $_gutters and ($_gutters > 0) and not($_gutter) {
    $_column-width: susy-get(column-width, $context);
    $_math: gutter-math($context);
    @if $_math == static {
      $_gutter: $_gutters * valid-column-math($_math, $_column-width);
    } @else {
      $_columns : susy-get(columns, $context);
      $_spread  : if(is-split($context), wide, susy-get(spread, $context));
      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));
    }
  }

  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);

  @return $_gutter;
}


// Get Gutters
// -----------
// Return before and after gutter values.
// - [$context]: <context>
@function get-gutters(
  $context: $susy
) {
  $context            : parse-gutters($context);

  $_gutter-position   : susy-get(gutter-position, $context);
  $_gutter            : get-gutter-width($context);

  $_return            : (before: null, after: null);

  @if is-split($context) and $_gutter {
    $_gutter: $_gutter / 2;
    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));
  } @else {
    $_return: map-merge($_return, ($_gutter-position: $_gutter));
  }

  @return $_return;
}


// Is Inside
// ---------
// Returns true if gutters are inside.
// $context: <context>
@function is-inside(
  $context
) {
  $_inside: inside inside-static;
  $_gutter-position: susy-get(gutter-position, $context);

  @return if(index($_inside, $_gutter-position), true, false);
}


// Is Split
// --------
// Returns true if gutters are split.
// $context: <context>
@function is-split(
  $context
) {
  $_split: split inside inside-static;
  $_gutter-position: susy-get(gutter-position, $context);

  @return if(index($_split, $_gutter-position), true, false);
}


// Gutter Math
// -----------
// Return the math to use for gutter calculations
// $context: <context>
@function gutter-math(
  $context: $susy
) {
  $_return  : susy-get(math, $context);
  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);

  @return $_return;
}

/* scss-combine:susy/isolate */
// Isolation Syntax
// ================


// Isolate [Mixin]
// ---------------
// Set isolation as an override.
// - $location: <span>
@mixin isolate(
  $isolate: 1
) {
  $inspect: $isolate;

  $output: (
    push: isolate($isolate),
    flow: susy-get(flow, $isolate),
  );

  @include susy-inspect(isolate, $inspect);
  @include isolate-output($output...);
}


// Isolate [function]
// ------------------
// Return an isolation offset width.
// - $location: <span>
@function isolate(
  $isolate: 1
) {
  $isolate: parse-span($isolate);
  $isolation: susy-get(span, $isolate);

  @if $isolation and not(get-location($isolate)) {
    $new: (
      span: null,
      location: $isolation,
    );
    $isolate: map-merge($isolate, $new);
  }

  @return get-isolation($isolate);
}


// Get Isolation
// -------------
// Return the isolation offset width
// - $input: <map>
@function get-isolation(
  $input
) {
  $location   : get-location($input);
  $columns    : susy-get(columns, $input);
  $width      : null;

  @if type-of($location) == number and not(unitless($location)) {
    $width: $location;
  } @else if $location {
    $push: $location - 1;
    @if $push > 0 {
      $push: map-merge($input, (
        span: $push,
        location: 1,
        spread: wide,
      ));
      $width: get-span-width($push);
    }
  }

  @if susy-get(gutter-position, $input) == split
      and susy-get(gutters, $input) > 0 {
    $width: if($width == null, gutters($input), $width + gutters($input));
  }

  @return $width or 0;
}

/* scss-combine:susy/gallery */
// Gallery Syntax
// ==============

// Gallery
// -------
// Create an isolated gallery
// - $span        : <span>
// - [$selector]  : child | of-type
@mixin gallery(
  $span,
  $selector: child
) {
  $inspect    : $span;
  $span       : parse-span($span);
  $span       : map-merge($span, (location: 1));

  $n            : susy-get(span, $span);
  $columns      : susy-get(columns, $span);
  $context      : susy-count($columns);
  $flow         : susy-get(flow, $span);

  $inside       : is-inside($span);
  $from         : from($flow);
  $line         : floor($context / $n);
  $symmetrical  : is-symmetrical($columns);

  $output: (
    width             : null,
    float             : from,
    margin-before     : null,
    margin-after      : null,
    padding-before    : null,
    padding-after     : null,
    flow              : $flow,
  );

  @if $inside {
    $gutters: get-gutters($span);
    $output: map-merge($output, (
      padding-before: map-get($gutters, before),
      padding-after: map-get($gutters, after),
    ));
  }

  @if $symmetrical {
    $output: map-merge($output, (width: get-span-width($span)));
  }

  $box          : susy-get(box-sizing, $span);
  $global-box   : if(susy-get(global-box-sizing) == 'border-box', true, false);

  @include susy-inspect(gallery, $inspect);

  // Collective Output
  @if $box == border-box or ($inside and not($box) and not($global-box)) {
    @include output((box-sizing: border-box));
  } @else if $box == content-box {
    @include output((box-sizing: content-box));
  }

  @include float-span-output($output...);

  // Individual Loop
  @for $item from 1 through $line {
    $nth: '#{$line}n + #{$item}';
    &:nth-#{$selector}(#{$nth}) {
      // Individual Prep
      $output: (
        width             : if($symmetrical, null, get-span-width($span)),
        float             : null,
        margin-before     : get-isolation($span),
        margin-after      : -100%,
        padding-before    : null,
        padding-after     : null,
        flow              : $flow,
      );

      // Individual Output
      @include float-span-output($output...);

      @if get-edge($span) == first {
        @include break;
        @include first($span);
      } @else {
        @include nobreak;
      }

      // Individual Location Increment
      $location: get-location($span) + $n;
      $location: if($location > $context, 1, $location);
      $span: map-merge($span, (location: $location));
    }
  }
}

/* scss-combine:susy/rows */
// Row Start & End
// ===============

// Break
// -----
// Apply to any element that should force a line break.
@mixin break {
  @include output((clear: both));
}


// NoBreak
// -------
// Cancel the break() effect, e.g. when using media queries.
@mixin nobreak {
  @include output((clear: none));
}


// Full
// ----
// - [$context]: <layout shorthand>
@mixin full(
  $context: $susy
) {
  $inspect : $context;
  @include susy-inspect(full, $inspect);
  @include span(full of parse-grid($context) break);
}


// First
// -----
// - [$context]: <settings>
@mixin first(
  $context: $susy
) {
  $inspect  : $context;
  $context  : parse-grid($context);
  $flow     : susy-get(flow, $context);

  @include susy-inspect(first, $inspect);
  @if not(is-split($context)) {
    @include float-first($flow);
  }
}

@mixin alpha(
  $context: $susy
) {
  @include first($context);
}


// Last
// ----
// - [$context]: <settings>
@mixin last(
  $context: $susy
) {
  $inspect  : $context;
  $context  : parse-grid($context);

  @include susy-inspect(last, $inspect);

  $output: (
    flow: susy-get(flow, $context),
    last-flow: susy-get(last-flow, $context),
    margin: if(is-split($context), null, 0),
  );

  @include float-last($output...);
}

@mixin omega(
  $context: $susy
) {
  @include last($context);
}


// Get Edge
// --------
// Calculate edge value based on location, if possible
@function get-edge(
  $span
) {
  $span       : parse-span($span);
  $edge       : susy-get(edge, $span);

  @if not($edge) {
    $count: susy-count(susy-get(columns, $span));
    $location: susy-get(location, $span);
    $n: susy-get(span, $span);

    $number: if(type-of($location) == number, true, false);
    $index: if($number and unitless($location), true, false);

    @if $n == $count {
      $edge: full;
    } @else if $location and $n and $index {
      @if $location == 1 {
        $edge: if($n == $count, full, first);
      } @else if $location + $n - 1 == $count {
        $edge: last;
      }
    }
  }

  @if $edge == alpha or $edge == omega {
    $edge: if($edge == alpha, first, last);
  }

  @return $edge;
}


// Get Location
// ------------
// Calculate location value based on edge, if possible
@function get-location(
  $span
) {
  $span       : parse-span($span);
  $location   : susy-get(location, $span);
  $edge       : get-edge($span);
  $n          : susy-get(span, $span);

  @if $edge and not($location) and type-of($n) == number and unitless($n) {
    @if $edge == first {
      $location: 1;
    } @else if $edge == last {
      $location: susy-count(susy-get(columns, $span)) - $n + 1;
    }
  }

  @return $location
}

/* scss-combine:susy/margins */
// Margin Syntax
// =============

// Pre
// ---
// Add spanning-margins before an element.
// - $span  : <span>
@mixin pre(
  $span
) {
  $inspect: $span;
  $span   : map-merge((spread: wide), parse-span($span));
  $flow   : susy-get(flow, $span);
  $split  : if(susy-get(gutter-position, $span) == split, true, false);
  $gutter : gutter($span);
  $span   : span($span);
  $width  : if($split and $gutter, $span + $gutter, $span);

  @include susy-inspect(pre, $inspect);
  @include margin-output($width, null, $flow);
}

// Post
// ----
// Add spanning-margins after an element.
// - $span  : <span>
@mixin post(
  $span
) {
  $inspect  : $span;
  $span     : map-merge((spread: wide), parse-span($span));
  $flow     : susy-get(flow, $span);
  $split    : if(susy-get(gutter-position, $span) == split, true, false);
  $width    : if($split, span($span) + gutter($span), span($span));

  @include susy-inspect(post, $inspect);
  @include margin-output(null, $width, $flow);
}

// Push
// ----
// Simple synonymn for pre.
// - $span  : <span>
@mixin push(
  $span
) {
  @include pre($span);
}

// Pull
// ----
// Add negative spanning-margins before an element.
// - $span  : <span>
@mixin pull(
  $span
) {
  $inspect  : $span;
  $span     : map-merge((spread: wide), parse-span($span));
  $flow     : susy-get(flow, $span);
  $split    : if(susy-get(gutter-position, $span) == split, true, false);
  $width    : if($split, 0 - span($span) + gutter($span), 0 - span($span));

  @include susy-inspect(pull, $inspect);
  @include margin-output($width, null, $flow);
}

// Squish
// ------
// Add spanning-margins before and after an element.
// - $pre     : <span>
// - [$post]  : <span>
@mixin squish(
  $pre,
  $post: false
) {
  $inspect      : ($pre, $post);
  $pre          : map-merge((spread: wide), parse-span($pre));

  @if $post {
    $post: map-merge((spread: wide), parse-span($post));
  } @else {
    $span: susy-get(span, $pre);
    @if length($span) > 1 {
      $pre: map-merge($pre, (span: nth($span, 1)));
      $post: map-merge($pre, (span: nth($span, 2)));
    } @else {
      $post: $pre;
    }
  }

  @include susy-inspect(squish, $inspect);
  @include pre($pre);
  @include post($post);
}

/* scss-combine:susy/padding */
// Padding Syntax
// ==============

// Prefix
// ------
// Add spanning-padding before an element.
// - $span  : <span>
@mixin prefix(
  $span
) {
  $inspect  : $span;
  $span     : map-merge((spread: wide), parse-span($span));
  $flow     : susy-get(flow, $span);
  $width    : span($span);

  @if is-inside($span) {
    $gutter: gutter($span);
    $width: if($gutter and comparable($width, $gutter), $width + $gutter, $width);
  }

  @include susy-inspect(prefix, $inspect);
  @include padding-output($width, null, $flow);
}

// Suffix
// ------
// Add spanning-padding after an element.
// - $span  : <span>
@mixin suffix(
  $span
) {
  $inspect  : $span;
  $span     : map-merge((spread: wide), parse-span($span));
  $flow     : susy-get(flow, $span);
  $width    : span($span);

  @if is-inside($span) {
    $gutter: gutter($span);
    $width: if($gutter and comparable($width, $gutter), $width + $gutter, $width);
  }

  @include susy-inspect(suffix, $inspect);
  @include padding-output(null, $width, $flow);
}

// Pad
// ---
// Add spanning-padding before and after an element.
// - $pre     : <span>
// - [$post]  : <span>
@mixin pad(
  $pre,
  $post: false
) {
  $inspect  : ($pre, $post);
  $pre      : map-merge((spread: wide), parse-span($pre));

  @if $post {
    $post: map-merge((spread: wide), parse-span($post));
  } @else {
    $span: susy-get(span, $pre);
    @if length($span) > 1 {
      $pre: map-merge($pre, (span: nth($span, 1)));
      $post: map-merge($pre, (span: nth($span, 2)));
    } @else {
      $post: $pre;
    }
  }

  @include susy-inspect(pad, $inspect);
  @include prefix($pre);
  @include suffix($post);

}

/* scss-combine:susy/bleed */
// Bleed Syntax
// ============

// Bleed
// -----
// Add negative margins, and equal positive padding to create bleed.
// - $bleed  : <span>
@mixin bleed(
  $bleed: 0 gutter()
) {
  $inspect  : $bleed;
  $output   : get-bleed($bleed);

  @if susy-get(global-box-sizing) != content-box {
    $output: map-merge((box-sizing: content-box), $output);
  }

  @include susy-inspect(bleed, $inspect);
  @include output($output);
}


// Bleed-x
// -------
// Shortcut for horizontal bleed.
// - $bleed  : <span>
@mixin bleed-x(
  $bleed: gutter()
) {
  $bleed  : parse-span($bleed);
  $trbl   : susy-get(span, $bleed);

  @if length($trbl) == 1 {
    $bleed: map-merge($bleed, (span: 0 nth($trbl, 1)));
  } @else if length($trbl) == 2 {
    $bleed: map-merge($bleed, (span: 0 nth($trbl, 2) 0 nth($trbl, 1)));
  } @else {
    @warn 'bleed-x only takes 2 lengths, but #{length($trbl)} were passed.';
  }

  @include bleed($bleed);
}


// Bleed-y
// -------
// Shortcut for vertical bleed.
// - $bleed  : <span>
@mixin bleed-y(
  $bleed: if(function-exists(rhythm), rhythm(1), 1em)
) {
  $bleed  : parse-span($bleed);
  $trbl   : susy-get(span, $bleed);

  @if length($trbl) == 1 {
    $bleed: map-merge($bleed, (span: nth($trbl, 1) 0));
  } @else if length($trbl) == 2 {
    $bleed: map-merge($bleed, (span: nth($trbl, 1) 0 nth($trbl, 2) 0));
  } @else {
    @warn 'bleed-y only takes 2 lengths, but #{length($trbl)} were passed.';
  }

  @include bleed($bleed);
}


// Get Bleed
// ---------
// Return bleed output values
// - $bleed: <span>
@function get-bleed(
  $bleed
) {
  $bleed    : map-merge((spread: wide), parse-span($bleed));
  $trbl     : susy-get(span, $bleed);
  $short    : null;
  $output   : ();

  @for $i from 1 through length($trbl) {
    $this: nth($trbl, $i);
    $new: ();
    $margin: null;
    $padding: null;
    $padding-x: null;

    @if $this > 0 {
      $this: map-merge($bleed, (span: $this));
      $margin: span($this);
      $padding: $margin;
      $padding-x: $padding;
    }

    @if $margin and $margin > 0 {
      $margin: - $margin;

      @if is-inside($this) {
        $gutter: gutter($this);
        $join: if($gutter and comparable($padding, $gutter), true, false);
        $padding-x: if($join and $padding > 0, $padding + $gutter, $padding);
      }
    }

    @if $i == 1 {
      $new: (
        margin-top: $margin,
        padding-top: $padding,
        margin-right: $margin,
        padding-right: $padding-x,
        margin-bottom: $margin,
        padding-bottom: $padding,
        margin-left: $margin,
        padding-left: $padding-x,
      );
    } @else if $i == 2 {
      $new: (
        margin-right: $margin,
        padding-right: $padding-x,
        margin-left: $margin,
        padding-left: $padding-x,
      );
    } @else if $i == 3 {
      $new: (
        margin-bottom: $margin,
        padding-bottom: $padding,
      );
    } @else if $i == 4 {
      $new: (
        margin-left: $margin,
        padding-left: $padding-x,
      );
    }

    $output: map-merge($output, $new);
  }

  @each $prop, $value in $output {
    $output: if($value == 0, map-merge($output, ($prop: null)), $output);
  }

  @return bleed-shorthand($output);
}

// Bleed Shorthand
// ---------------
// Convert bleed output into shorthand when possible.
// - $bleed: <output map>
@function bleed-shorthand(
  $bleed
) {
  $margin: ();
  $padding: ();
  $return: ();

  @each $key, $value in $bleed {
    @if str-index($key, margin) {
      $margin: map-merge($margin, ($key: $value));
    } @else if str-index($key, padding) > 0 {
      $padding: map-merge($padding, ($key: $value));
    }
  }

  $props: (
    margin: $margin,
    padding: $padding,
  );

  @each $name, $map in $props {
    $four: if(length(map-keys($map)) == 4, true, false);
    $null: if(index(map-values($map), null), true, false);

    @if $four and not($null) {
      $top: map-get($map, '#{$name}-top');
      $right: map-get($map, '#{$name}-right');
      $bottom: map-get($map, '#{$name}-bottom');
      $left: map-get($map, '#{$name}-left');

      $tb: if($top == $bottom, $top, null);
      $rl: if($right == $left, $right, null);
      $all: if($tb == $rl, $tb, null);

      $new: if($all, $all, null);

      @if not($new) {
        @if $tb and $rl {
          $new: $tb $rl;
        } @else if $rl {
          $new: $top $rl $bottom;
        } @else {
          $new: $top $right $bottom $left;
        }
      }

      $return: map-merge($return, ($name: $new));
    } @else {
      $return: map-merge($return, $map);
    }
  }

  @return $return;
}

/* scss-combine:susy/breakpoint-plugin */
// Breakpoint Integration
// ======================

$susy-media: () !default;
$susy-media-fallback: false !default;

$_susy-media-context: ();


// Susy Breakpoint
// ---------------
// Change grids at different media query breakpoints.
// - $query     : <min-width> [<max-width>] | <property> <value> | <map>
// - $layout    : <settings>
// - $no-query  : <boolean> | <selector>
@mixin susy-breakpoint(
  $query,
  $layout: false,
  $no-query: $susy-media-fallback
) {
  @include susy-media-router($query, $no-query) {
    @if $layout {
      @include with-layout($layout) {
        @content;
      }
    } @else {
      @content;
    }
  }
}


// Susy Media
// ----------
// - $query: <min-width> [<max-width>] | <property> <value>
// - $no-query: <boolean> | <selector>
@mixin susy-media(
  $query,
  $no-query: $susy-media-fallback
) {
  $old-context: $_susy-media-context;
  $name: if(map-has-key($susy-media, $query), $query, null);
  $query: susy-get-media($query);
  $query: susy-parse-media($query);

  @include susy-media-context($query, $name);

  @if $no-query and type-of($no-query) != string {
    @content;
  } @else {
    @media #{susy-render-media($query)} {
      @content;
    }

    @if type-of($no-query) == string {
      #{$no-query} & {
        @content;
      }
    }
  }

  @include susy-media-context($old-context, $clean: true);
}


// Media Router
// ------------
// Rout media arguments to the correct mixin.
@mixin susy-media-router(
  $query,
  $no-query: $susy-media-fallback
) {
  @if susy-support(breakpoint, (mixin: breakpoint), $warn: false) {
    @include breakpoint($query, $no-query) {
      @content;
    }
  } @else {
    @include susy-media($query, $no-query) {
      @content;
    }
  }
}


// Update Context
// -------------
// Set the new media context
@mixin susy-media-context(
  $query,
  $name: null,
  $clean: false
) {
  $query: map-merge((name: $name), $query);

  @if $clean {
    $_susy-media-context: $query !global;
  } @else {
    $_susy-media-context: map-merge($_susy-media-context, $query) !global;
  }
}


// Media Context
// -------------
// Return the full media context, or a single media property (e.g. min-width)
@function susy-media-context(
  $property: false
) {
  @if $property {
    @return map-get($_susy-media-context, $property);
  } @else {
    @return $_susy-media-context;
  }
}


// Get Media
// ---------
// Return a named media-query from $susy-media.
// - $name: <key>
@function susy-get-media(
  $name
) {
  @if map-has-key($susy-media, $name) {
    $map-value: map-get($susy-media, $name);
    @if ($name == $map-value) {
      $name: $map-value;
    } @else {
      $name: susy-get-media($map-value);
    }
  }

  @return $name;
}


// Render Media
// ------------
// Build a media-query string from various media settings
@function susy-render-media(
  $query
) {
  $output: null;
  @each $property, $value in $query {
    $string: null;

    @if $property == media {
      $string: $value;
    } @else {
      $string: '(#{$property}: #{$value})';
    }

    $output: if($output, '#{$output} and #{$string}', $string);
  }

  @return $output;
}


// Parse Media
// -----------
// Return parsed media-query settings based on shorthand
@function susy-parse-media(
  $query
) {
  $mq: null;
  @if type-of($query) == map {
    $mq: $query;
  } @else if type-of($query) == number {
    $mq: (min-width: $query);
  } @else if type-of($query) == list and length($query) == 2 {
    @if type-of(nth($query, 1)) == number {
      $mq: (
        min-width: min($query...),
        max-width: max($query...),
      );
    } @else {
      $mq: (nth($query, 1): nth($query, 2));
    }
  } @else {
    $mq: (media: '#{$query}');
  }

  @return $mq;
}




// Settings
/* scss-combine:lib/font-mapper */

// List of font weights: normal / medium / bold
$font-weights-alice: (400, 400, 400);
$font-weights-crimson-text: (400, 400, 700);
$font-weights-domine: (400, 400, 700);
$font-weights-dosis: (400, 500, 700);
$font-weights-fira-sans: (400, 500, 700);
$font-weights-josefin-sans: (400, 400, 700);
$font-weights-karla: (400, 400, 700);
$font-weights-lato: (400, 400, 700);
$font-weights-lora: (400, 400, 700);
$font-weights-merriweather: (400, 400, 700);
$font-weights-open-sans: (400, 600, 700);
$font-weights-oswald: (400, 400, 700);
$font-weights-playfair-display: (400, 400, 700);
$font-weights-raleway: (400, 500, 600);
$font-weights-roboto: (400, 500, 700);
$font-weights-roboto-condensed: (400, 400, 700);
$font-weights-source-sans-pro: (400, 400, 700);
$font-weights-titillium-web: (400, 600, 700);

$fonts: (
  Alice: $font-weights-alice,
  CrimsonText: $font-weights-crimson-text,
  Domine: $font-weights-domine,
  Dosis: $font-weights-dosis,
  FiraSans: $font-weights-fira-sans,
  JosefinSans: $font-weights-josefin-sans,
  Karla: $font-weights-karla,
  Lato: $font-weights-lato,
  Lora: $font-weights-lora,
  Merriweather: $font-weights-raleway,
  OpenSans: $font-weights-open-sans,
  Oswald: $font-weights-oswald,
  PlayfairDisplay: $font-weights-playfair-display,
  Raleway: $font-weights-raleway,
  Roboto: $font-weights-roboto,
  RobotoCondensed: $font-weights-roboto-condensed,
  SourceSansPro: $font-weights-source-sans-pro,
  TitilliumWeb: $font-weights-titillium-web,
);

// Helper to normalise font names
@function font-cleanup($string, $search: " ", $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
            font-cleanup(str-slice($string, $index +
            str-length($search)), $search, $replace);
  }

  @return $string;
}

// Get the font family for a stencil setting
@function get-font-family($font-type: "primary-font") {
  @if (type_of($font-type) == 'null') {
    @warn "You've passed a null value for $font-type, please check your settings";
    $font-type: "primary-font";
  }
  $font-family: stencilFontFamily($font-type);
  @return $font-family;
}

// Get the appropriate font weight for a listed font
@function get-font-weight($font-type: "primary-font", $weight: "normal") {
  @if (type_of($weight) == 'null') {
    @warn "You've passed a null value for $weight, please check your settings";
    $weight: "normal";
  }

  $nth-to-get: 1;
  @if ($weight == "normal") { $nth-to-get: 1; }
  @if ($weight == "medium") { $nth-to-get: 2; }
  @if ($weight == "bold") { $nth-to-get: 3; }

  $font-setting: get-font-family($font-type);
  $font-family: #{font-cleanup($font-setting)};
  $font-weights: map-get($fonts, #{$font-family});
  @if (length($font-weights) < $nth-to-get) {
    @warn "#{$font-family} does not have the weight #{$weight}";
  } @else {
    $font-weight: nth($font-weights, $nth-to-get);
    @return $font-weight
  }

  // Return a default value of 400 / normal if no indexed font weight
  @return 400;
}

// Get the font attributes for a stencil setting
@mixin get-font($setting: "body-font", $weight: false) {
  $font-type: stencilString($setting);
  font-family: get-font-family($font-type);

  @if ($weight) {
    font-weight: get-font-weight($font-type, $weight);
  }
}

/* scss-combine:user-settings */
//-- Primary / Secondary Font Designations --//
//-- Config Settings - Font Family --//
$body-font-type: "primary-font";
$meta-font-type: stencilString("meta-font");
$button-font-type: stencilString("button-font");
$banner-font-type: stencilString("banner-font");
$carousel-font-type: stencilString("carousel-font");

//-- Config Settings - Font Sizes --//
$body-font-size: stencilNumber("body-font-size", "px");
$h1-modifier: stencilNumber("h1-font-size", "px");
$h2-modifier: stencilNumber("h2-font-size", "px");
$h3-modifier: stencilNumber("h3-font-size", "px");

//-- Config Settings - Font weights --//
$h1-font-weight: stencilColor("h1-font-weight");
$h2-font-weight: stencilColor("h2-font-weight");
$h3-font-weight: stencilColor("h3-font-weight");

//-- Other Settings --//
$body-background: stencilColor("body-background");

$content-background: stencilColor("content-background");
$content-border-color: stencilColor("content-border-color");

$body-color: stencilColor("body-color");
$body-font: get-font-family($body-font-type);
$body-font-weight: get-font-weight($body-font-type, "normal");

$accent-color: stencilColor("accent-color");
$border-color: $content-border-color;

$heading-color: stencilColor("heading-color");

$meta-font: get-font-family($meta-font-type);
$meta-color: stencilColor("meta-color");

$input-color: stencilColor("input-color");

$button-font: get-font-family($button-font-type);
$button-weight: get-font-weight($button-font-type, "bold");

$primary-button-color: stencilColor("button-primary-color");
$primary-button-background: stencilColor("button-primary-background");

$secondary-button-color: stencilColor("button-secondary-color");
$secondary-button-background: stencilColor("button-secondary-background");

//-- Alerts --//
$error-color: stencilColor("alert-color-error");
$info-color: stencilColor("alert-color-info");
$success-color: stencilColor("alert-color-success");

//----- Main Header -----//
$header-background: stencilColor("header-background");
$header-color: stencilColor("header-color");
$modal-background: stencilColor("modal-background");

$header-enable-border: (stencilString("header-enable-border") == "true");
$header-use-megamenu: (stencilString("header-menu-style") == "mega-menu");
$header-mega-menu-columns: stencilNumber("header-menu-mega-columns", "");

//-- Footer --//
$alternate-style-for-newsletter: (stencilString("alternate-style-for-newsletter") == "true");
$alternate-style-for-footer: (stencilString("alternate-style-for-footer") == "true");

//----- Masthead -----//
$masthead-color: stencilColor("masthead-color");
$masthead-background: stencilColor("masthead-background");

//-- Collections --//
$alternate-style-for-collections: (stencilString("alternate-style-for-collections") == "true");

//------ Page Banners ------//
$banner-background: stencilColor("banner-background");
$banner-color: stencilColor("banner-color");
$banner-font: get-font-family($banner-font-type);
$banner-weight: get-font-weight($banner-font-type, "normal");

//------ Product ------//
$alternate-style-for-product: (stencilString("alternate-style-for-product") == "true");
$alternate-style-for-product-item: (stencilString("alternate-style-for-product-item") == "true");

$product-item-image-crop: stencilString("product-item-crop");
$product-item-image-ratio: stencilString("product-item-size");
$alternate-product-item-size: ($product-item-image-ratio == "ratio-3-2");

//-- Cards --//
$card-image: (
  width: stencilNumber("card-image-width"),
  height: stencilNumber("card-image-height")
);

//-- Carousel --//
$carousel-font: get-font-family($carousel-font-type);
$carousel-font-weight: get-font-weight($carousel-font-type, stencilString("carousel-font-weight"));
$carousel-title-color: stencilColor("carousel-title-color");
$carousel-title-background: stencilColor("carousel-background-color");
$carousel-title-size: stencilNumber("carousel-title-size");
$carousel-caption-size: stencilNumber("carousel-caption-size");
$carousel-text-alignment: stencilString("carousel-text-alignment");
/* scss-combine:lib/functions */
// https://github.com/heygrady/scss-blend-modes/blob/master/stylesheets/_blend-modes.scss
//--------------------------------
// Normal
//--------------------------------
@function blend-normal($foreground, $background) {
  $opacity: opacity($foreground);
  $background-opacity: opacity($background);

  // calculate opacity
  $bm-red: red($foreground) * $opacity + red($background) * $background-opacity * (1 - $opacity);
  $bm-green: green($foreground) * $opacity + green($background) * $background-opacity * (1 - $opacity);
  $bm-blue: blue($foreground) * $opacity + blue($background) * $background-opacity * (1 - $opacity);
  @return rgb($bm-red, $bm-green, $bm-blue);
}

// https://github.com/heygrady/scss-blend-modes/blob/master/stylesheets/_blend-modes.scss
//--------------------------------
// Multiply
//--------------------------------
@function blend-multiply($foreground, $background) {
  $bm-red: red($background) * red($foreground) / 255;
  $bm-green: green($background) * green($foreground) / 255;
  $bm-blue: blue($background) * blue($foreground) / 255;
  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

/// Strips the unit from a number.
///
/// @param {Number (With Unit)} $value
///
/// @example scss - Usage
///   $dimension: strip-units(10em);
///
/// @example css - CSS Output
///   $dimension: 10;
///
/// @return {Number (Unitless)}

@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}

// Convert pixels to ems
// eg. for a relational value of 12px write em(12) when the parent is 16px
// if the parent is another value say 24px write em(12, 24)

@function em($pxval, $base: $body-font-size) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }
  @if not unitless($base) {
    $base: strip-units($base);
  }
  @return ($pxval / $base) * 1em;
}

// Determines if a color is dark or light, and returns a darker/lighter variant
// Can be used to force to a specific amount too, which then runs through it again to soften the difference
@function brightness-adjust($color, $force: false, $amount: 10%, $threshold: 30%) {
  @if ($force) {
    @if ($force == lighten) {
      @return brightness-adjust(lighten($color, $amount));
    } @else {
      @return brightness-adjust(darken($color, $amount));
    }
  } @else {
    @if lightness($color) > $threshold {
      @return darken($color, $amount - 2%);
    } @else {
      @return lighten($color, $amount);
    }
  }
}

@function shade($color, $percent) {
  @return mix(#000, $color, $percent);
}

@function tint($color, $percent) {
  @return mix(#fff, $color, $percent);
}

@function contrast($color, $percent: 6%) {
  @if (lightness($color) > 50) {
    @return shade($color, $percent);
  } @else {
    @return tint($color, $percent);
  }
}

@function header-color-accent($color, $background) {
  $mix-base: mix($color, $background, 45%);

  @if lightness($mix-base) > 50% {
    @return $mix-base;
  } @else {
    @return contrast($mix-base, 95%);
  }
}

@function body-same-content() {
  @if ($body-background == $content-background) {
    @return true;
  } @else {
    @return false;
  }
}

@function content-base-adjust($color, $body-matches-content, $adjust: 7%) {
  @if ($body-matches-content) {
    @return contrast($color, $adjust);
  } @else {
    @return $color;
  }
}

// ================================================================ */
//  Function to create an optimized svg url
// from: http://codepen.io/jakob-e/pen/doMoML

@function svg-url($svg) {
  //
  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  //
  $encoded: "";
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg) / $slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //
    //   Encode (may need a few extra replacements)
    //
    $chunk: str-replace($chunk, '"', '\'');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');
    $chunk: str-replace($chunk, '&', '%26');
    $chunk: str-replace($chunk, '#', '%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }

  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(str-slice($string, $index +
            str-length($search)), $search, $replace);
  }
  @return $string;
}

@function item-ratio($item-ratio, $constraint: width) {
  // default ratio of `ratio-1-1`
  $width: 100;
  $height: 100;

  @if ($item-ratio == "ratio-3-2") {
    $width: 300;
    $height: 200;
  }

  @if ($item-ratio == "ratio-2-3") {
    $width: 200;
    $height: 300;
  }

  @if ($item-ratio == "ratio-1-2") {
    $width: 100;
    $height: 200;
  }

  @if ($constraint == width) {
    @return $width;
  }

  @if ($constraint == height) {
    @return $height;
  }
}

/* scss-combine:lib/variables */
/// Contents of this file contain:
/// - #set values to be used theme wide
/// - #derived values based on theme preset / merchant selection
/// - #mixed values that have combination of #derived and #set

//------ Global Layout Elements ------//
// -- Layout - #set -- //
$max-width: 1140px;
$gutter: 30px;
$column-gutter: 45px;
$columns: 12;
$column-width: ($max-width - (($columns + 1) * $column-gutter)) / $columns;

$zindex: (
  zoom-modal: 1400,
  main-overlay: 1300,
  navigation-wrap: 1200,
  header-dropdown: 1100,
  header: 1000,
  header-overlay: 900,
  body-menus: 800,
  compare-bar: 700
);

$breakpoint-s: 500px;
$breakpoint-ms: 720px;
$breakpoint-m: 960px;
$breakpoint-l: 1060px;
$breakpoint-xl: 1280px;

// -- Layout - #derived -- //
$gutter-third: $gutter / 3;
$gutter-half: $gutter / 2;
$gutter-double: $gutter * 2;

// -- Transitions - #set -- //
$ease-out-quad: cubic-bezier(0.250, 0.460, 0.450, 0.940);

//------ Layout Components ------//
//-- Main Content Settings #derived --//
$content-same-as-background: body-same-content();
$content-border-color-alt: brightness-adjust($content-border-color);
$content-background-transparent: rgba($content-background, 0.75);

$body-color-alt: brightness-adjust($body-color, false, 20%);

//-- Header Settings #mixed --//
$header-font-size: em(12px, $body-font-size);
// Be careful with the above font size. Anything smaller and its likely to get blurry
$header-logo-size: 40px;
$header-logotype-size: em(18, 13);
$header-nav-padding-small: $gutter-half;
$header-nav-padding-large: $gutter;

$header-height: 65px;
$header-height-large: 90px;
$mobile-menu-search-icon: 17px;
$mobile-menu-padding: 12px;
$mobile-menu-dropdown-icon: 15px;

$mobile-menu-width-xs: 250px;
$mobile-menu-width-s: 320px;

$mobile-menu-color-darkest: brightness-adjust($header-background, $amount: 25%);
$mobile-menu-color-dark: brightness-adjust($header-background, $amount: 12%);
$mobile-menu-color-medium: brightness-adjust($header-background, $amount: 7%);
$mobile-menu-color-light: brightness-adjust($header-background, $amount: 5%);
$mobile-menu-buttons: mix($header-color, $header-background, 75%);
$mobile-menu-border: $content-border-color;

$header-color-accent: header-color-accent($color: $header-color, $background: $header-background);

//-- Search Modal #derived --//
$search-modal-color: contrast($modal-background, 100%);
$search-modal-color-accent: mix($search-modal-color, $modal-background, 45%);
$search-modal-icon: (width: $gutter, height: $gutter);
$search-modal-success-color: $search-modal-color-accent;
$search-modal-error-color: $search-modal-color-accent;

//-- Header Drop Down Settings #mixed --//
$header-dropdown-padding-small: $header-nav-padding-small;
$header-dropdown-padding-large: $header-nav-padding-large;

$header-dropdown-quick-cart-small: 325px;
$header-dropdown-quick-cart-large: 400px;
$header-dropdown-currency: 200px;
$header-dropdown-shop: 250px;
$header-dropdown-offset: 12px + $gutter-third; //Header font size + space

//-- Banner Settings #derived --//
$banner-link-color: brightness-adjust($banner-color);

//------ Modals #mixed ------//
$modal-background-color: $heading-color;
$modal-content-background: $content-background;
$modal-accent-color: contrast($modal-background-color, 80%);
$modal-accent-color-active: mix($modal-background-color, $modal-accent-color, 30%);
$modal-icon-size: 24px;
$modal-max-width: 470px;
$modal-gutter: $gutter;

//-- Loading Overlay #derived --//
$loading-background: rgba(brightness-adjust($header-background), 0.9);

//------ Typography and Text Visuals ------//
//-- Font Modifiers #set -- //
// These values represent the font values as per the original design
// and will allow for dynamic increases or decreases as per the Theme Editor
$font-modifier: 14;
$h4-modifier: 20;
$h5-modifier: 18;
$h6-modifier: 16;

//-- Variable Font Sizes #derived --//
$h1-font-base: $body-font-size * ($h1-modifier / $font-modifier);
$h2-font-base: $body-font-size * ($h2-modifier / $font-modifier);
$h3-font-base: $body-font-size * ($h3-modifier / $font-modifier);
$h4-font-base: $body-font-size * ($h4-modifier / $font-modifier);
$h5-font-base: $body-font-size * ($h5-modifier / $font-modifier);
$h6-font-base: $body-font-size * ($h6-modifier / $font-modifier);

$h1-font-size: em($h1-font-base);
$h2-font-size: em($h2-font-base);
$h3-font-size: em($h3-font-base);
$h4-font-size: em($h4-font-base);
$h5-font-size: em($h5-font-base);
$h6-font-size: em($h6-font-base);

$body-font-weight-bold: get-font-weight($body-font-type, "bold");

//-- Meta #derived --//
$meta-color-alt: brightness-adjust($meta-color, false, 12%, 50%);

//-- Inputs #derived --//
$input-background-color: desaturate($body-background, 60%);
$input-border-color: $input-background-color;
$input-border-color-accent: $heading-color;
$input-color: contrast($input-background-color, 50%);
$input-max-width: 360px;

//-- Button Settings #derived  --//
$primary-button-border: $primary-button-background;
$secondary-button-border: $secondary-button-color;

$disabled-button-background: mix($content-background, desaturate($primary-button-border, 100%), 80%);
$disabled-button-color: contrast($disabled-button-background, 100%);

$primary-button-accent-background: brightness-adjust($primary-button-background, false, 22%, 60%);
$primary-button-accent-border: brightness-adjust($primary-button-border, false, 22%, 60%);
$primary-button-accent-color: $primary-button-color;

$secondary-button-accent-color: $secondary-button-background;
$secondary-button-accent-background: contrast($secondary-button-border, 50%);
$secondary-button-accent-border: $secondary-button-accent-background;

$button-padding-vertical: (37px - 18px) / 2;
$button-padding-horizontal: $gutter * 0.75;

//-- Footer  #mixed --//
$newsletter-width: 520px + $gutter-double;

$newsletter-background: if($alternate-style-for-newsletter, $body-background, $content-background);
$newsletter-input-background: $content-background;
$newsletter-input-border: if($alternate-style-for-newsletter, $content-background, $border-color);
$newsletter-input-color: contrast($newsletter-background, 50%);

$footer-background: if($alternate-style-for-footer, contrast($content-background, 100%), $content-background);
$footer-border-color: $content-border-color;

$footer-font-base: 14px;
$footer-primary: contrast($footer-background, 100%);
$footer-secondary: contrast($footer-background, 60%);
$footer-tertiary: if($alternate-style-for-footer, $footer-primary, contrast($footer-background, 30%));


//-- Product Item #derived --//
$product-item-background: if($alternate-style-for-product-item, $content-background, transparent);
$price-color-alternate: rgba($meta-color, 0.75);

$product-item-image: (
 width: item-ratio($product-item-image-ratio, width),
 height: item-ratio($product-item-image-ratio, height)
);

//-- Product Item Actions #derived --//
$product-item-sale-color: mix(#fff, $error-color, 90%);
$product-item-sale-background: $error-color;

$product-item-sold-out-color: $secondary-button-accent-color;
$product-item-sold-out-background: $secondary-button-accent-background;

$product-item-quick-view-color: $primary-button-color;
$product-item-quick-view-background: $primary-button-background;

$product-item-compare: contrast(opacify($content-background-transparent, 1), 70%);
$product-item-compare-alt: contrast(opacify($content-background-transparent, 1), 100%);

//-- Compare Bar #derived --//
$compare-bar-border: $content-border-color;
$compare-bar-accent: $heading-color;

//-- Product Page #mixed--//
$product-page-background: if($alternate-style-for-product, $body-background, $content-background);

$product-gutter: $gutter-double - 10px;
$product-gutter-half: $product-gutter / 2;

$product-option: (space: 4px, padding: $gutter-third, selected: $input-border-color-accent, hover: $meta-color);
$product-pick-list: (size: 65px, padding: $gutter-third 0);
$product-swatch: (space: 10px, size: 35px, border: 3px);

$star-color: #4A4A4A;
$star-size-small: em(12px);
$star-size-medium: em(15px);
$star-size-large: em(20px);

//-- Tabs #derived--//
$tab-color: $meta-color;
$tab-color-active: $accent-color;
$tab-vertical-padding: $gutter;

//-- Blog Settings #derived --//
$blog-gutter: $gutter;
$blog-sidebar-link-title: $heading-color;
$blog-sidebar-meta: $body-color;
$blog-recent-posts-background: stencilString("background-for-recent-blog-posts");

//-- Share Buttons #mixed --//
$share-color-facebook: #535cad;
$share-color-google: #d25639;
$share-color-pinterest: #db3b3b;
$share-color-tumblr: #363a5e;
$share-color-twitter: #439dec;
$share-color-linkedin: #0077b5;
$share-color-default: $body-color-alt;

$share-color-button: $meta-color;
$share-color-active: $accent-color;
$share-color-button-base: $content-background;
$share-color-button-accent: content-base-adjust($body-background, $content-same-as-background);

$share-button-padding: $gutter-half;

//-- Alerts #derived--//
$alert-error-base: $error-color;
$alert-error-color: $error-color;
$alert-error-accent: $error-color;
$alert-foreground: $content-background;

//-- Carousel #mixed --//
$carousel-arrow-size: 66px;
$carousel-button-background: contrast($carousel-title-color, 100%);
$carousel-button-foreground: $carousel-title-color;

$carousel-pagination: $carousel-button-foreground;
$carousel-pagination-active: mix($carousel-button-background, $carousel-button-foreground, 50%);
$carousel-pagination-size: $gutter-third;

$product-carousel-button-background: content-base-adjust($body-background, $content-same-as-background);
$product-carousel-button-foreground: contrast($product-carousel-button-background, 50%);

$zoom-icon-size: 20px;
$zoom-icon-padding: 11px;

$product-carousel-pagination: $product-carousel-button-background;
$product-carousel-pagination-active: $product-carousel-button-foreground;

$carousel-text-color: $body-color;
$carousel-text-background: $content-background;

//-- Masthead #mixed --//
$masthead-height: (xs: 200px, ms: 340px);

//-- Collections #derived --//
$collections-background: if($alternate-style-for-collections, $body-background, $content-background);

//-- Search Page #derived --//
$search-masthead-accent: mix($masthead-color, $masthead-background, 60%);
$search-search-icon: (width: $gutter, height: $gutter);

//-- Cart #mixed --//
$cart-item-cell: (
  columns: 12,
  product: 5,
  price: 1,
  quantity: 1,
  total: 1,
  giftwrap: 2,
  action: 1,
);

$cart-item-thumbnail: (small: 80px, large: 120px);
$cart-item-info-offset-small: map-get($cart-item-thumbnail, small) + $gutter-half;
$cart-item-info-offset-large: map-get($cart-item-thumbnail, large) + $gutter-half;

$cart-total-value-color: $heading-color;
$cart-total-link-color: $cart-total-value-color;
$cart-item-icon-size: $modal-icon-size;

$apple-pay-style: stencilString('apple-pay-style');

//-- Account Variables #mixed --//
$account-link-color: $heading-color;
$account-light-color: $content-background;
$account-accent-color: $accent-color;
$account-border-color: $content-border-color;
$account-gutter: $gutter;
$account-font-size: $body-font-size;
$account-border-radius: 0;
$account-text-color: $body-color;
$account-text-color-light: mix($body-color, $accent-color, 90%);

$account-card-background-color: $content-background;

$account-alert-text-color: $alert-foreground;
$account-alert-info-color: $info-color;
$account-alert-error-color: $error-color;
$account-alert-success-color: $success-color;

$account-breakpoint-small: $breakpoint-s;
$account-breakpoint-medium: $breakpoint-m;

$giftcard-nav-use-default-styles: false;

$account-nav-link: $meta-color;
$account-nav-link-active: $heading-color;
$account-form-spacing: $account-gutter / 2;

$account-settings-background: contrast($content-background, 90%);

/* scss-combine:modules/susy */
$susy: (
  columns: $columns,
  column-width: false,
  container: $max-width,
  gutters: $column-gutter / $column-width,
  math: fluid,
  output: float,
  gutter-position: before,
  last-flow: from
);


// Modules
/* scss-combine:core/account */
// Default Variables

$account-link-color: #888 !default;
$account-light-color: #fff !default;
$account-accent-color: #5dc5e3 !default;
$account-border-color: #e4e4e4 !default;
$account-gutter: 30px !default;
$account-font-size: 15px !default;
$account-border-radius: 0 !default;
$account-text-color: #5f5f5f !default;

$account-card-background-color: #f5f5f5 !default;

$giftcard-nav-use-default-styles: true !default;

$account-breakpoint-x-small: 400px !default; // the account table columns change to full-width
$account-breakpoint-small: 620px !default; // menu changes from full-width to column
$account-breakpoint-medium: 900px !default; // menu changes from 35% to 25% width

// Internal Variables

$account-font-size-heading: $account-font-size + 2 !default;

$account-text-color-light: lighten($account-text-color,20%) !default;

$account-gutter-inner: $account-gutter / 2 !default;

$auth-gutter: $account-gutter !default;
$auth-font-size: $account-font-size !default;

// Imports

/* scss-combine:account/components/layout */
.account-wrapper {
  @extend %clearfix;
  font-size: $account-font-size;
}

.account-nav,
.account-body {
  vertical-align: top;
}

.account-body {
  @media screen and (min-width: $account-breakpoint-small) {
    float: right;
    width: 65%;
    padding-left: $account-gutter-inner;
  }

  @media screen and (min-width: $account-breakpoint-medium) {
    width: 75%;
  }

  > :first-child {
    margin-top: 0;
  }

  .account-nav-hidden & {
    float: none;
    width: 100%;
    padding-left: 0;
    margin-left: 0;
  }
}

.account-nav {
  @media screen and (max-width: $account-breakpoint-small - 1) {
    margin-bottom: $account-gutter;
  }

  @media screen and (min-width: $account-breakpoint-small) {
    float: left;
    width: 35%;
    padding-right: $account-gutter-inner;
  }

  @media screen and (min-width: $account-breakpoint-medium) {
    width: 25%;
  }
}

/* scss-combine:account/components/forms */
.account-wrapper {
  .form-label-text {
    display: inline-block;
    width: 100%;
    margin-bottom: 5px;
  }

  .form-field-checkbox,
  .form-field-radio {
    .form-label-text { width: auto; }
  }

  .form-field {
    margin-bottom: $account-gutter-inner;
  }

  .form-input {
    width: 100%;

    &.account-form-half {
      width: 50%;
    }
  }

  .form-actions {
    clear: both;
  }
}

.account-form-column-container {
  @extend %clearfix;

  .form-field {
    @media screen and (min-width: 480px) {
      float: left;
      width: 50%;

      &:nth-child(odd) { padding-right: $account-gutter-inner; }
      &:nth-child(even) { padding-left: $account-gutter-inner; }
    }
  }
}

/* scss-combine:account/components/table */
.account-wrapper {
  table {
    width: 100%;
    margin-top: $account-gutter-inner;
    margin-bottom: $account-gutter-inner;
  }

  td,
  th {
    padding: $account-gutter-inner;
  }
}

.account-table-tight {
  th,
  td {
    padding: 10px 0;
    border-bottom: 1px solid $account-border-color;
  }
}

/* scss-combine:account/components/list */
// Layout
// Each list item has 3 sections: thumbnail, body, and badge.

.account-items {
  margin-bottom: $account-gutter;
}

.account-item {
  position: relative;
  display: table;
  width: 100%;
  border-bottom: 1px solid $account-border-color;

  &:first-of-type {
    border-top: 1px solid $account-border-color;
  }
}

.account-item-thumbnail,
.account-item-body,
.account-item-badge,
.account-item-actions {
  padding-top: $account-gutter-inner;
  padding-bottom: $account-gutter-inner;

  @media screen and (min-width: $account-breakpoint-x-small) {
    display: table-cell;
    vertical-align: top;
  }
}

// Link
// Makes the entire item clickable

.account-item-link {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 100;
}

// Thumbnail

.account-item-thumbnail {
  min-width: 100px;

  img {
    height: auto;
    max-width: 100px;
  }
}

// Body

.account-item-body {
  width: 100%;

  @media screen and (min-width: $account-breakpoint-x-small) {
    .account-item-thumbnail + & {
      padding-left: $account-gutter-inner;
    }
  }
}

.account-item-title {
  margin-top: 3px;
  font-size: $account-font-size;

  a {
    color: inherit;
  }
}

.account-item-title-large {
  font-size: $account-font-size * 1.2;
}

.account-item-description {
  margin-top: 0;
  margin-bottom: 5px;
  color: $account-text-color;
}

.account-item-details {
  @extend %clearfix;
  font-size: $account-font-size;
  color: $account-text-color;
}

.account-item-detail {
  float: left;
  margin-top: $account-gutter-inner;
  margin-right: $account-gutter;
}

//scss-lint:disable VariableForProperty
.account-item-detail-title {
  display: block;
  margin-top: 0;
  margin-bottom: 3px;
  font-size: 12px;
  font-weight: normal;
  letter-spacing: 1px;
  color: mix($account-light-color,$account-text-color,60%);
  text-transform: uppercase;
}

// Badge

.account-item-badge,
.account-item-actions {
  white-space: nowrap;
}

/* scss-combine:account/components/header */
.account-header {
  display: table;
  width: 100%;
  margin-bottom: $account-gutter-inner;
}

.account-heading,
.account-toolbar {
  display: table-cell;
  vertical-align: baseline;
}

.account-toolbar {
  text-align: right;

  * {
    display: inline;
  }
}

.account-tool {
  position: relative;
  z-index: 10;
  display: inline-block;
  padding: 0;
  background: transparent;
  margin-left: 10px;
  cursor: pointer;
  color: inherit;
  border: 0;

  &:hover { color: $account-link-color; }

  &:focus { outline: 0; }
}

/* scss-combine:account/components/navigation */
.account-nav-list {
  padding: 0;
  margin-bottom: $account-gutter-inner;
  list-style: none;
  border: 1px solid $account-border-color;
  border-radius: $account-border-radius;
}

.account-nav-item {
  color: $account-link-color;
  border-top: 1px solid $account-border-color;

  &:first-child {
    border-top: 0;
  }

  &.is-active {
    color: $account-accent-color;
    border-left: 3px solid $account-accent-color;
  }
}

.account-nav-link {
  display: block;
  padding: 15px;
  color: inherit;
}

.account-nav-badge {
  float: right;
}

/* scss-combine:account/components/pagination */
.account-wrapper .pagination {
  margin-top: $account-gutter-inner;
}

/* scss-combine:account/components/card */
%account-card-style {
  background: $account-card-background-color;

  .form-input {
    background-color: $account-light-color;
  }
}

.account-card {
  @extend %account-card-style;
  padding: $account-gutter-inner;
  margin: $account-gutter-inner 0;
  border-radius: $account-border-radius;
}

/* scss-combine:account/components/toggle */
// Set the initial toggle state to hidden
.account-toggle-hidden {
  display: none;
}

/* scss-combine:account/components/status */
// Status
// A label used to mark the status of an item

.account-status {
  padding: 6px 10px 5px;
  margin: 0;
  font-size: 12px;
  font-weight: normal;
  line-height: 1;
  letter-spacing: 1px;
  color: $account-light-color;
  text-align: center;
  text-transform: uppercase;
  background: #8e8e8e; // TODO: Colors for each status
}

/* scss-combine:account/components/shipments */
// Shipments
// A list of shipments made for an order. Shown on the Order Details page.

.account-shipments {
  margin-bottom: $account-gutter;
}

.account-shipments-table {
  th,
  td {
    padding: 10px 0;
    text-align: left;
  }

  th {
    padding: $account-gutter-inner 0 0;
    border-top: 1px solid $account-border-color;
  }

  // Override default margins
  .account-wrapper & {
    margin-top: 0;
    margin-bottom: 0;
  }
}


/* scss-combine:account/pages/address */
// Address List

.account-page-add-address {
  .account-content {
    padding-top: $account-gutter-inner;
    border-top: 1px solid $account-border-color;
  }
}

.account-address-detail {
  display: block;
}

// Add Address

.account-address-form {
  padding-top: $account-gutter-inner;

  @media screen and (min-width: $account-breakpoint-medium) {
    .form-field {
      float: left;
      width: 50%;
      padding-right: $account-gutter-inner;

      &:nth-of-type(2n) {
        padding-right: 0;
        padding-left: $account-gutter-inner;
      }
    }
  }

  .form-actions {
    padding-top: $account-gutter-inner;
  }
}

/* scss-combine:account/pages/orders-receipt */
.account-page-orders-receipt .account-content {
  padding-top: $account-gutter-inner;
  border-top: 1px solid $account-border-color;
}

// Summary

.account-receipt-summaries {
  @extend %clearfix;
}

.account-receipt-summary {
  float: left;
  width: 33%;
  padding-right: $account-gutter;
}

.account-receipt-summary-title {
  margin-top: 5px;
  margin-bottom: 10px;
  font-size: $account-font-size;
}

.account-receipt-summary-address {
  line-height: 1.5;
}

.account-receipt-detail {
  margin-bottom: 5px;
}

.account-receipt-detail-title {
  color: $account-text-color-light;
}

// Comments

.account-receipt-comments {
  white-space: pre-line;
}

// Receipt Items (products)

.account-receipt-items {
  padding-top: $account-gutter-inner;
}

.account-receipt-download {
  margin: 10px 0;
}

// Totals

.account-receipt-totals {
  display: table;
  width: 50%;
  margin-left: 50%;
}

.account-receipt-total {
  display: table-row;
  margin-bottom: $account-gutter-inner;
}

.account-receipt-total-title,
.account-receipt-total-value {
  display: table-cell;
  padding-top: $account-gutter-inner;
  padding-bottom: $account-gutter-inner;
  border-top: 1px solid $account-border-color;

  .account-receipt-total:first-of-type & {
    border-top: 0;
  }
}

.account-receipt-total-title {
  font-weight: normal;
  letter-spacing: 1px;
  color: $account-text-color-light;
}

.account-receipt-total-value {
  text-align: right;
}

/* scss-combine:account/pages/recent-items */

/* scss-combine:account/pages/returns */
// Return form

.account-return-table {
  th {
    text-align: left;

    &:last-of-type {
      text-align: right;
    }
  }

  .form-field {
    margin-bottom: 0;
  }
}

.account-return-fields {
  margin-top: $account-gutter;

  .form-field-select {
    width: 50%;
  }
}

/* scss-combine:account/pages/wishlists */
.account-wishlists {
  margin-bottom: 30px;
}

/* scss-combine:account/pages/messages */
// Listing

.account-messages-table.table-clean {
  border-bottom: 1px solid $account-border-color;

  td {
    padding-right: 0;
    padding-left: 0;
    vertical-align: top;
    border-top: 1px solid $account-border-color;
  }
}

.account-messages-table-date {
  width: 22%;
  text-align: right;
}

.account-message-subject {
  margin-top: 0;
  margin-bottom: 10px;
  font-size: $account-font-size-heading;
  font-weight: 500;

  .account-message-is-reply &:before {
    padding-right: 5px;
    content: "\21c9";
  }

  .account-message-is-read & {
    color: $account-text-color-light;
  }
}

.account-message-content {
  padding-right: $account-gutter;
  font-size: $account-font-size;
  line-height: 1.5;
  color: $account-text-color;
  white-space: pre-line;

  .account-message-is-read & {
    color: lighten($account-text-color-light,10%);
  }
}

.account-message-date {
  color: $account-text-color-light;
}

// Form

.account-messages-form-subject {
  width: 50%;
}

/* scss-combine:account/pages/download */
// List

.account-download {
  padding: $account-gutter-inner 0 0;
  margin: $account-gutter-inner 0;
  border-top: 1px solid $account-border-color;
}

.account-download-title {
  margin: 0;
  font-size: 1em;
}

.account-download-link {
  color: inherit;
  text-decoration: underline;
}

.account-download-filename {
  font-size: 1.2em;
}

.account-download-filesize {
  padding-left: 5px;
  font-weight: normal;
  color: $account-text-color-light;
}

.account-download-description {
  padding-top: 10px;
  padding-bottom: 10px;
}

.account-download-expiry {
  font-size: 0.9em;
  color: $account-text-color-light;
}

.account-download-expiry-item {
  display: block;
  padding-bottom: 5px;

  &:last-of-type {
    padding-bottom: 0;
  }
}

// Gallery

.account-downloads-gallery-image {
  text-align: center;
}

.account-downloads-gallery-thumbs {
  @extend %clearfix;
  text-align: center;
}

.account-downloads-gallery-thumb {
  display: inline-block;
  width: 10%;
  height: 10%;
  padding: 0 2px;
  vertical-align: middle;
  cursor: pointer;

  img {
    width: 100%;
    height: auto;
  }
}

/* scss-combine:account/pages/invoice */
.account-invoice-date {
  margin-top: -20px;
  font-size: $account-font-size;
}

// Address

.account-invoice-addresses {
  @extend %clearfix;
  margin-top: $account-gutter;
  margin-bottom: $account-gutter;
}

.account-invoice-address {
  float: left;
  margin-right: $account-gutter;
}

.account-invoice-address-title {
  margin-top: 5px;
  margin-bottom: 10px;
  font-size: $account-font-size;
}

.account-invoice-address-body {
  line-height: 1.5;
}

// List

.account-invoice-table {
  .account-wrapper & {
    margin-bottom: 0;
  }

  th,
  td {
    padding-right: $account-gutter-inner;
    text-align: left;
    vertical-align: top;

    &:nth-of-type(0n+3) {
      width: 10%;
    }

    &:last-of-type {
      width: 160px;
      padding-right: 0;
      text-align: right;
    }
  }

  td:first-of-type {
    width: 60px + 25px;
  }
}

.account-invoice-item-thumbnail {
  width: 60px;
  height: auto;
}

.account-invoice-item-name {
  margin-bottom: 5px;
  font-weight: bold;
}

.account-invoice-total-title {
  font-weight: bold;
}

// Totals

.account-invoice-totals {
  .account-wrapper & {
    width: auto;
    margin-top: 0;
    margin-left: auto;
  }

  th,
  td {
    padding-right: $account-gutter-inner;

    &:last-of-type {
      width: 160px;
      padding-right: 0;
      text-align: right;
    }
  }
}

/* scss-combine:account/pages/settings */
.account-page-settings {
  .alert:first-of-type {
    margin-top: 0;
  }

  .account-content {
    padding-top: $account-gutter-inner;
    border-top: 1px solid $account-border-color;
  }
}

.account-settings-form {
  @extend %clearfix;
  padding-top: $account-gutter-inner;

  .form-field {
    float: left;
    width: 50%;
    padding-right: $account-gutter-inner / 2;
    vertical-align: top;

    &:nth-of-type(2n+0) {
      padding-right: 0;
      padding-left: $account-gutter-inner / 2;
    }
  }

  .form-actions {
    padding-top: $account-gutter-inner;
  }
}


/* scss-combine:account/pages/auth-login */

.account-page-login .alert {
  max-width: 860px;
  margin-top: 0;
  margin-right: auto;
  margin-bottom: $account-gutter;
  margin-left: auto;
}

.account-login-wrapper {
  max-width: 860px;
  margin-right: auto;
  margin-left: auto;

  @media screen and (min-width: $account-breakpoint-small) {
    display: table;
    width: 100%;
    table-layout: fixed;
  }
}

.account-page-login .account-sub-heading {
  margin: 0 0 20px;
}

.account-login,
.account-create {
  @media screen and (min-width: $account-breakpoint-small) {
    display: table-cell;
    vertical-align: top;
  }
}

// Login Form

.account-login {
  @media screen and (max-width: $account-breakpoint-small - 1) {
    margin-bottom: $account-gutter;
  }

  @media screen and (min-width: $account-breakpoint-small) {
    padding: $account-gutter-inner (30px + $account-gutter-inner) $account-gutter-inner 0;
  }
}

.account-login-button {
  margin-right: $account-gutter-inner;
}

// New Account

.account-create {
  padding: $account-gutter-inner;
  background: $account-card-background-color;
}

.account-create-intro {
  &:empty {
    display: none;
  }
}

.account-create-facts {
  padding-left: 20px;
  margin-bottom: 30px;
  list-style: disc;

  li:empty {
    display: none;
  }
}

/* scss-combine:account/pages/auth-forgot */
.account-page-forgot .account-body {
  width: 100%;
  max-width: 600px;
  margin-right: auto;
  margin-left: auto;
  text-align: center;
  float: none;
}

.account-forgot-form {
  display: table;
  width: 100%;
  margin-top: $account-gutter;

  .form-field,
  .form-actions {
    display: table-cell;
    text-align: left;
    vertical-align: bottom;
  }

  .form-actions {
    width: 1px;
    padding-left: 10px;
  }
}

/* scss-combine:account/pages/auth-create */
.account-page-create {
  .account-header {
    padding-bottom: $account-gutter-inner;
    margin-bottom: $account-gutter;
    border-bottom: 1px solid $account-border-color;
  }

  .account-body {
    max-width: 860px;
    margin-right: auto;
    margin-left: auto;
  }
}

.account-create-form {
  .g-recaptcha > div {
    margin: 0 auto;
  }

  @media screen and (min-width: $account-breakpoint-small) {
    .form-field {
      float: left;
      width: 50%;
      padding-right: $account-gutter-inner;

      &:nth-of-type(2n) {
        padding-right: 0;
        padding-left: $account-gutter-inner;
      }

      &:nth-of-type(2n + 1) {
        clear: left;
      }
    }
  }
}

.account-create-details,
.account-create-address {
  @extend %clearfix;
  padding-bottom: $account-gutter-inner;
  margin-bottom: $account-gutter;
  border-bottom: 1px solid $account-border-color;
}

.account-create-form-actions {
  text-align: center;
}

.account-create-captcha {
  display: inline-block;
  vertical-align: middle;

  @media screen and (max-width: $account-breakpoint-small - 1) {
    margin-bottom: $account-gutter-inner;
  }

  @media screen and (min-width: $account-breakpoint-small) {
    margin-right: $account-gutter-inner;
  }
}

/* scss-combine:account/pages/auth-created */
.account-page-created .account-body {
  float: none;
  width: 100%;
  max-width: 600px;
  margin-right: auto;
  margin-left: auto;
  text-align: center;

  p {
    margin-bottom: $account-gutter;
    line-height: 1.5;
  }

  em {
    font-family: monospace;
    font-style: normal;
    font-weight: bold;
    background: $account-card-background-color;
  }
}

/* scss-combine:account/pages/auth-new-password */
.account-page-new-password .account-content {
  width: 100%;
  max-width: 400px;
  margin-right: auto;
  margin-left: auto;
}

.new-password-requirements {
  margin-bottom: $account-gutter;
  text-align: center;
}


/* scss-combine:account/pages/gift-certificate */
// (optional) gift card nav

@if ($giftcard-nav-use-default-styles) {
  .giftcard-nav {
    padding: $account-gutter * 2;
    margin-bottom: $account-gutter * 2;
    text-align: center;
  }

  .giftcard-nav-item {
    display: inline-block;
    margin: 0 1em;
    color: $account-link-color;

    &.is-active { color: $account-text-color; }
  }
}

.giftcard-heading-container {
  margin-bottom: $account-gutter * 2;
  text-align: center;
}


// Purchase

.giftcard-form-help-message {
  display: block;
  margin-top: 6px;
}

.giftcard-form-preview {
  iframe { width: 100%; }
}

.giftcard-single-theme {
  display: none;
}


// Check balance

.giftcard-balance-container {
  max-width: 600px;
  margin: 0 auto;
}

.form-giftcard-balance {
  position: relative;

  .form-field-title {
    position: absolute;
    left: -9999px;
  }

  .form-field-control {
    display: block;

    @media screen and (min-width: 600px + ($account-gutter-inner * 2)) {
      margin-right: calc(30% + #{$account-gutter-inner});
    }
  }

  .form-actions {
    @media screen and (min-width: 600px + ($account-gutter-inner * 2)) {
      position: absolute;
      top: 0;
      right: 0;
      width: 30%;
    }
  }

  .button {
    width: 100%;
  }
}


// Redeem

.giftcard-redeem-steps {
  line-height: 1.5;

  li { margin-bottom: 0.75em; }
}


/* scss-combine:core/unavailable */
.unavailable-container {
  display: table;
  text-align: center;
  width: 100%;
  height: 100vh;
  font-size: 14px;

  @media (min-width: 400px) {
    font-size: 16px;
  }
}

.unavailable-container-inner {
  display: table-cell;
  padding: 20px;
  vertical-align: middle;
}

.unavailable-logo {
  margin-top: 0;
}

.unavailable-heading {
  font-size: 1.5em; // 24px desktop
}

.unavailable-message {
  max-width: 400px;
  margin: 0 auto;
  font-size: 0.875em; // 14px desktop
}


//-- Helpers --//
/* scss-combine:lib/mixins */
//-- Breakpoints --//
@mixin breakpoint($point) {
  @if $point == xl {
    @include media($min: $breakpoint-xl) { @content; }
  }
  @if $point == l {
    @include media($min: $breakpoint-l) { @content; }
  }
  @if $point == m {
    @include media($min: $breakpoint-m) { @content; }
  }
  @if $point == ms {
    @include media($min: $breakpoint-ms) { @content; }
  }
  @if $point == s {
    @include media($min: $breakpoint-s) { @content; }
  }
  @if $point == xs {
    @include media($max: $breakpoint-s) { @content; }
  }

  @if $point == l-only {
    @include media($max: $breakpoint-xl, $min: $breakpoint-l) { @content; }
  }
  @if $point == m-only {
    @include media($max: $breakpoint-l, $min: $breakpoint-m) { @content; }
  }
  @if $point == ms-only {
    @include media($max: $breakpoint-m, $min: $breakpoint-ms) { @content; }
  }
  @if $point == s-only {
    @include media($max: $breakpoint-ms, $min: $breakpoint-s) { @content; }
  }
  @if $point == xs-only {
    @include media($max: $breakpoint-s) { @content; }
  }

  @if $point == l-down {
    @include media($max: $breakpoint-xl) { @content; }
  }
  @if $point == m-down {
    @include media($max: $breakpoint-l) { @content; }
  }
  @if $point == ms-down {
    @include media($max: $breakpoint-m) { @content; }
  }
  @if $point == s-down {
    @include media($max: $breakpoint-ms) { @content; }
  }
}

//-- Creates a table-grid layout --//
@mixin layout-group($gutter: 0, $gutter-vertical: null) {
  @if $gutter-vertical == null {
    $gutter-vertical: $gutter;
  }
  display: table;
  width: 100%;
  border-collapse: separate;
  border-spacing: $gutter $gutter-vertical;
  box-sizing: border-box;
  table-layout: fixed;
}

@mixin layout-group-item($vertical-align: false) {
  display: table-cell;
  @if $vertical-align {
    vertical-align: $vertical-align;
  }
}

@mixin hover($color, $property: color) {
  #{$property}: brightness-adjust($color);
}

@mixin smallcaps($letter-spacing: 1, $font-size: 10) {
  text-transform: uppercase;
  @if($letter-spacing){
    letter-spacing: em($letter-spacing, $font-size);
  }
}

@mixin anchor-underline($border: "off-hover", $color: $accent-color, $hover: $meta-color, $hover-border: null) {
  @if $hover-border == null {
    $hover-border: $hover;
  }

  color: $color;
  border-bottom: 1px solid;
  letter-spacing: 0.1em;

  @if ($border == "off-hover") {
    border-color: $hover-border;
  } @else {
    border-color: transparent;
  }

  &:hover {
    color: $hover;

    @if ($border == "on-hover") {
      border-color: $hover-border;
    } @else {
      border-color: transparent;
    }
  }
}

//-- Maintain Aspect Ratio --//
// @include aspect-ratio(16 9);
@mixin aspect-ratio($ratio: 1 1) {
  @if length($ratio) < 2 or length($ratio) > 2 {
    @warn "$ratio must be a list with two values.";
  }

  $width: 100%;
  $height: percentage(nth($ratio, 2) / nth($ratio, 1));
  width: $width;
  height: 0;
  padding-bottom: $height;
}

//-- Centerer --//
@mixin centerer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

//-- Coverer --//
@mixin coverer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

//-- Diagonal Background Mixin --//
@mixin diagonal-background($fill-color, $triangle: upper-left) {
  $fill-shape: "";
  $bottom-right: "M32 32h-32l32-32v32z"; // ◢
  $bottom-left: "M0 32v-32l32 32h-32z"; // ◣
  $upper-right: "M32 0v32l-32-32h32z"; // ◥
  $upper-left: "M0 0h32l-32 32v-32z"; // ◤

  @if $triangle == bottom-right {
    $fill-shape: $bottom-right;
  } @else if $triangle == bottom-left {
    $fill-shape: $bottom-left;
  } @else if $triangle == upper-right {
    $fill-shape: $upper-right;
  } @else {
    $fill-shape: $upper-left;
  }

  background: {
    image: svg-url("<svg fill='#{$fill-color}' width='32' height='32' xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='none' viewBox='0 0 32 32'><path d='#{$fill-shape}'></path></svg>");
    repeat: no-repeat;
    size: 100% 100%;
  }
}

//-- Icon Mixin -- Allows variable color fills --//
@mixin icon-plus($fill-color-horizontal, $fill-color-vertical: null) {
  @if $fill-color-vertical == null {
    $fill-color-vertical: $fill-color-horizontal;
  }

  background: {
    image: svg-url("<svg width='32' height='32' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><path fill='#{$fill-color-vertical}' d='M19.037 3.544h-6.076v24.911h6.076v-24.911z'></path> <path fill='#{$fill-color-horizontal}' d='M3.999 13.266v5.468h24v-5.468h-24z'></path></svg>");
    position: 50% 50%;
    repeat: no-repeat;
    size: contain;
  }
}

@mixin icon-unchecked($fill-color) {
  background: {
    image: svg-url("<svg fill='#{$fill-color}' width='18' height='18' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><path d='M1.135 3.394v0 25.211c0 1.246 1.012 2.259 2.259 2.259h25.211c1.246 0 2.259-1.012 2.259-2.259v-25.211c0-1.246-1.012-2.259-2.259-2.259h-25.211c-1.246 0-2.259 1.012-2.259 2.259v0zM0 3.394c0-1.875 1.522-3.394 3.394-3.394h25.211c1.875 0 3.394 1.522 3.394 3.394v25.211c0 1.875-1.522 3.394-3.394 3.394h-25.211c-1.875 0-3.394-1.522-3.394-3.394v-25.211z'></path></svg>");
    position: 50% 50%;
    repeat: no-repeat;
    size: contain;
  }
}

@mixin icon-checked($fill-color, $inside-fill: contrast($content-background, 100%)) {
  background: {
    image: svg-url("<svg width='18' height='18' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><path fill='#{$inside-fill}' d='M13.302 18.025l-3.939-3.939-2.506 2.506 6.445 6.445 12.532-12.532-2.506-2.506-10.025 10.025z'></path><path fill='#{$fill-color}' d='M1.135 3.394v0 25.211c0 1.246 1.012 2.259 2.259 2.259h25.211c1.246 0 2.259-1.012 2.259-2.259v-25.211c0-1.246-1.012-2.259-2.259-2.259h-25.211c-1.246 0-2.259 1.012-2.259 2.259v0zM0 3.394c0-1.875 1.522-3.394 3.394-3.394h25.211c1.875 0 3.394 1.522 3.394 3.394v25.211c0 1.875-1.522 3.394-3.394 3.394h-25.211c-1.875 0-3.394-1.522-3.394-3.394v-25.211z'></path></svg>");
    position: 50% 50%;
    repeat: no-repeat;
  }
}

@mixin icon-input-error($fill-color) {
  background: {
    image: svg-url("<svg fill='#{$fill-color}' width='18' height='18' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><path d='M32 4.48l-4.48-4.48-11.52 11.52-11.52-11.52-4.48 4.48 11.52 11.52-11.52 11.52 4.48 4.48 11.52-11.52 11.52 11.52 4.48-4.48-11.52-11.52 11.52-11.52z'></path></svg>");
    position: 50% 50%;
    repeat: no-repeat;
  }
}

@mixin icon-input-valid($fill-color) {
  background: {
    image: svg-url("<svg fill='#{$fill-color}' width='18' height='18' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><path d='M10.868 20.226l-6.641-6.642-4.226 4.226 10.868 10.868 21.132-21.132-4.226-4.226-16.906 16.906z'></path></svg>");
    position: 50% 50%;
    repeat: no-repeat;
  }
}

@mixin icon-spinner($fill-color) {
  background: {
    image: url("<svg fill='#{$fill-color}' width='18' height='18' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><path d='M26.652 23.233c-2.152 3.163-5.675 5.317-9.715 5.608v-2.508c2.417-0.215 4.662-1.26 6.399-2.997 0.424-0.424 0.806-0.878 1.145-1.357l2.171 1.253zM26.375 16c0 1.53-0.329 3.009-0.954 4.357l2.17 1.253c0.822-1.696 1.284-3.599 1.284-5.61s-0.461-3.914-1.283-5.61l-2.17 1.253c0.624 1.348 0.954 2.827 0.954 4.357zM16.938 5.667c2.417 0.215 4.662 1.26 6.399 2.997 0.424 0.424 0.806 0.878 1.145 1.357l2.171-1.253c-2.152-3.163-5.675-5.317-9.715-5.608v2.508zM5.625 16c0-1.53 0.33-3.009 0.954-4.357l-2.17-1.253c-0.822 1.696-1.284 3.599-1.284 5.61s0.461 3.914 1.284 5.61l2.17-1.253c-0.624-1.348-0.954-2.827-0.954-4.357zM7.518 10.021c0.339-0.479 0.722-0.933 1.145-1.357 1.737-1.737 3.981-2.781 6.399-2.997v-2.508c-4.040 0.291-7.563 2.445-9.715 5.608l2.171 1.253zM15.063 26.333c-2.417-0.215-4.662-1.26-6.399-2.997-0.424-0.424-0.806-0.878-1.145-1.357l-2.171 1.253c2.152 3.163 5.675 5.317 9.715 5.608v-2.508z'></path></svg>");
    position: 50% 50%;
    repeat: no-repeat;
  }
}

@mixin icon-close-thin($fill-color: contrast($body-color, 100%)) {
  background: {
    image: svg-url("<svg width='18' height='18' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1024 1024'><path fill='#{$fill-color}' d='M987.582 6.248l-981.333 981.333 30.17 30.17 981.333-981.333-30.17-30.17z'></path><path fill='#{$fill-color}' d='M1017.752 987.582l-981.333-981.333-30.17 30.17 981.333 981.333 30.17-30.17z'></path></svg>");
    position: 50% 50%;
    repeat: no-repeat;
  }
}

//-- Clearfix --//
// - You're not supposed to @extend from within mixins
// - You can't @extend for a media query range
@mixin clearfix {
  *zoom: 1;

  &:before,
  &:after {
    display: table;
    content: "";
  }

  &:after {
    clear: both;
  }
}

//-- Alert Mixin --//
@mixin alert($type: "info") {
  $alert-color: '';
  $dismiss-color: '';

  @if ($type == "error") {
    $alert-color: $error-color;
  } @else if ($type == "success") {
    $alert-color: $success-color;
  } @else {
    $alert-color: $info-color;
  }

  $background: $alert-color;
  $dismiss-color: mix($background, invert($alert-foreground), 75%);
  $foreground: $alert-foreground;

  background-color: $background;
  color: $foreground;
  transition: all 0.5s $ease-out-quad;

  .alert-message {
    a {
      @include anchor-underline("off-hover", $foreground, $foreground);
    }
  }

  .alert-dismiss {
    @include anchor-underline("none", $dismiss-color, brightness-adjust($dismiss-color));
    cursor: pointer;

    use {
      transition: all 0.5s $ease-out-quad;
      fill: $dismiss-color;
    }

    &:hover {

      use {
        fill: brightness-adjust($dismiss-color, false, 50%);
      }
    }
  }
}

@mixin button-with-arrow($color: $primary-button-color) {
  position: relative;
  padding-right: $gutter + $gutter-half;

  &:after {
    position: absolute;
    top: 50%;
    right: $gutter-half;
    display: inline-block;
    margin-top: - 0.2em;
    border-top: 0.3em solid transparent;
    border-bottom: 0.3em solid transparent;
    border-left: 0.3em solid $color;
    content: "";
  }
}

/* scss-combine:lib/extends */
//-- General --//
%header-box-shadow {
 box-shadow: 0 2px 3px rgba(contrast($header-background, 50%), 0.25);
}

%overlay {
  position: fixed;
  top: 0;
  right: 0;
  z-index: map-get($zindex, main-overlay);
  display: none;
  width: 100%;
  height: 100vh;
  opacity: 0;
  visibility: hidden;
  transition: all 0.5s $ease-out-quad;

  &.visible {
    display: block;
    opacity: 1;
    visibility: visible;
  }
}

%section-title-text-treatment {
  @extend %as-h5;
  letter-spacing: em(1px, $h5-font-base);
  color: $heading-color;
  text-transform: uppercase;
}

%meta-text-treatment {
  font-family: $meta-font;
  letter-spacing: 0.05em;
  color: $meta-color;
  text-transform: uppercase;
}

%wrapper {
  max-width: $max-width;
  padding-right: $gutter;
  padding-left: $gutter;
  margin-right: auto;
  margin-left: auto;

  @include breakpoint(s-down) {
    padding-right: $gutter-half;
    padding-left: $gutter-half;
  }
  // Solves border-box issue with max-width in IE8
  .lt-ie9 & {
    width: $max-width;
  }
}

%vertical-padding {
  padding-top: $gutter;
  padding-bottom: $gutter;

  @include breakpoint(s-down) {
    padding-top: $gutter-half;
    padding-bottom: $gutter-half;
  }
}

%full-width {
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
}

%show-for-sr {
  // scss-lint:disable ImportantRule
  position: absolute !important;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

%checkbox-hide {
  position: absolute;
  z-index: 1;
  width: 100%;
  height: 100%;
  cursor: pointer;
  opacity: 0;
}

%button-reset {
  padding: 0;
  background: transparent;
  border: 0;
  appearance: normal;

  &:focus {
    outline: none;
  }
}

//------ Typography ------//
//-- Font Groupings --//

%primary-font {
  font-family: get-font-family("primary-font");
}

%primary-font-normal {
  font-weight: get-font-weight("primary-font", "normal");
}

%primary-font-bold {
  font-weight: get-font-weight("primary-font", "bold");
}

%secondary-font {
  font-family: get-font-family("secondary-font");
}

%secondary-font-normal {
  font-weight: get-font-weight("secondary-font", "normal");
}

%secondary-font-bold {
  font-weight: get-font-weight("secondary-font", "bold");
}

%tertiary-font {
  font-family: get-font-family("tertiary-font");
}

%as-h1 {
  //always uses `secondary-font`
  @extend %secondary-font;
  margin-top: 0.67em;
  margin-bottom: 0.67em;
  font-size: $h1-font-size;
  font-weight: get-font-weight("secondary-font", $h1-font-weight);
}

%as-h2 {
  //always uses `secondary-font`
  @extend %secondary-font;
  margin-top: 0.83em;
  margin-bottom: 0.83em;
  font-size: $h2-font-size;
  font-weight: get-font-weight("secondary-font", $h2-font-weight);
}

%as-h3 {
  //always uses `primary-font`
  @extend %primary-font;
  margin-top: 1em;
  margin-bottom: 1em;
  font-size: $h3-font-size;
  font-weight: get-font-weight("primary-font", $h3-font-weight);
}

%as-h4 {
  //always uses `primary-font`
  @extend %secondary-font, %secondary-font-normal;
  margin-top: 1em;
  margin-bottom: 1em;
  font-size: $h4-font-size;
}

%as-h5 {
  //always uses `primary-font`
  @extend %primary-font, %primary-font-bold;
  margin-top: 1em;
  margin-bottom: 1em;
  font-size: $h5-font-size;
  letter-spacing: 0.02em;
}

%as-h6 {
  //always uses `secondary-font`
  @extend %secondary-font, %secondary-font-normal;
  margin-top: 1em;
  margin-bottom: 1em;
  font-size: $h6-font-size;
}

//-- Smoothing --//
%subpixel-smooth {
  -webkit-font-smoothing: subpixel-antialiased;
}

%font-smoothing {
  -moz-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

//-- Button Extends allow for re-application to other dom elements --//
%button-base {
  @extend %font-smoothing;
  padding: $button-padding-vertical $button-padding-horizontal;
  font-weight: $button-weight;
  letter-spacing: em(2px, 12px);
  text-transform: uppercase;
  border-style: solid;
  border-width: 1px;
  transition: all 0.2s $ease-out-quad;
}

%button-primary {
  color: $primary-button-color;
  background-color: $primary-button-background;
  border-color: $primary-button-border;

  &:hover {
    color: $primary-button-accent-color;
    background-color: $primary-button-accent-background;
    border-color: $primary-button-accent-border;
  }
}

%button-secondary {
  color: $secondary-button-color;
  background-color: $secondary-button-background;
  border-color: $secondary-button-border;

  &:hover {
    color: $secondary-button-accent-color;
    background-color: $secondary-button-accent-background;
    border-color: $secondary-button-accent-border;
  }
}

%button-secondary-inverse {
  color: $secondary-button-accent-color;
  background-color: $secondary-button-accent-background;
  border-color: $secondary-button-accent-border;

  &:hover {
    color: $secondary-button-accent-color;
    background-color: brightness-adjust($secondary-button-accent-background);
    border-color: brightness-adjust($secondary-button-accent-background);
  }
}

%button-large {
  padding: ($button-padding-vertical * 2) $button-padding-horizontal;
}

%button-small {
  padding: ($button-padding-vertical / 2) ($button-padding-horizontal / 2);
  font-size: em(12px, $body-font-size);
}

%primary-link-style {
  @include smallcaps;
  @include anchor-underline("on-hover", $heading-color, $heading-color);
  font-size: em(12px, $body-font-size);
  letter-spacing: em(1px, $body-font-size);
  transition: all 0.4s $ease-out-quad;
}

%secondary-link-style {
  @include smallcaps;
  @include anchor-underline("on-hover", $accent-color, $accent-color);
  font-size: em(12px, $body-font-size);
  font-weight: get-font-weight($weight: "medium");
  letter-spacing: em(1px, $body-font-size);
  transition: all 0.4s $ease-out-quad;
}

//-- Tabs --//
%tab-link-active {
  color: $tab-color-active;
  border-color: $tab-color-active;
}

%tab-link {
  @include smallcaps();
  display: block;
  padding-top: $tab-vertical-padding;
  padding-bottom: $tab-vertical-padding - 2px;
  font-size: em(12, $body-font-size);
  font-weight: get-font-weight($weight: "medium");
  letter-spacing: em(2px, $body-font-size);
  color: $tab-color;
  border-bottom: 2px solid transparent;
  transition: all 0.5s $ease-out-quad;

  &:hover {
    @extend %tab-link-active;
  }
}

//-- Collections --//
%collection-header-list {
  text-align: center;

  li {
    display: inline-block;
  }
}

%collection-header-list-item {
  @extend %secondary-link-style;
  font-weight: get-font-weight($weight: "bold");
  opacity: 0.5;
  transition: all 0.4s $ease-out-quad;
}

%collection-header-list-item-accent {
  color: $heading-color;
  opacity: 1;
}

//-- Backgrounds --//
%background-body {
  background-color: $body-background;
}

%background-content {
  background-color: $content-background;
}

%background-triangle-upper-left {
  @extend %background-content;
  @include diagonal-background($body-background, upper-left);
}

%background-triangle-upper-right {
  @extend %background-content;
  @include diagonal-background($body-background, upper-right);
}

%background-triangle-bottom-left {
  @extend %background-content;
  @include diagonal-background($body-background, bottom-left);
}

%background-triangle-bottom-right {
  @extend %background-content;
  @include diagonal-background($body-background, bottom-right);
}

//-- Product Items --//
%product-item {
  @include span(full);
  margin-top: gutter();
  background-color: $product-item-background;

  &:first-child {
    margin-top: 0;
  }
}

%product-item-image {
  position: relative;
  overflow: hidden;

  .item-thumbnail {
    @include aspect-ratio(map-get($product-item-image, width) map-get($product-item-image, height));
    display: block;
    overflow: hidden;
    background-position: 50% 50%;
    background-repeat: no-repeat;
    background-size: $product-item-image-crop;
    transform: scale(1, 1);
    transition: all 0.5s $ease-out-quad;

    a {
      display: block;
    }
  }

  .item-overlay {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    display: block;
    background: $content-background-transparent;
    opacity: 0;
    transition: all 0.5s $ease-out-quad;

    .no-js & {
      display: none;
    }
  }

  &:hover {

    .item-thumbnail {
      transform: scale(1.1, 1.1);
    }

    .item-overlay {
      opacity: 1;
    }

    .item-badges {
      opacity: 0;
    }

    .item-overlay-button {
      top: 50%;
      opacity: 1;
    }

    .item-overlay-remove {
      top: auto;
      bottom: 0;
    }
  }
}

%item-overlay-button {
  //scss-lint:disable NameFormat
  @extend %subpixel-smooth;
  position: absolute;
  top: 54%;
  left: 50%;
  width: 160px;
  padding: 0 $gutter-half;
  margin-left: -80px;
  text-align: center;
  opacity: 0;
  transition: all 0.5s $ease-out-quad;

  @if $alternate-product-item-size {
    height: 36px;
    margin-top: -18px;
    line-height: 34px;
  } @else {
    height: 56px;
    margin-top: -28px;
    line-height: 54px;
  }

  &:hover {
    color: $product-item-quick-view-color;
    background-color: contrast($product-item-quick-view-background, 20%);
  }

  &.item-overlay-remove {
    top: auto;
    bottom: -4%;
  }
}

%product-item-title {
  @extend %as-h3, %primary-font, %primary-font-normal;
  @include smallcaps;
  margin-top: 0;
  margin-bottom: em(8px, 18);
  font-size: em(14px);
  line-height: 1.2;

  a {
    color: $heading-color;
  }
}

%product-item-badges {
  position: absolute;
  top: 0;
  right: 0;
  left: 0;
  display: block;
  transition: all 0.5s $ease-out-quad;

  .badge-out-of-stock,
  .badge-sale-tag {
    @extend %subpixel-smooth;
    @extend %meta-text-treatment;
    display: inline-block;
    padding: 7px 10px;
    font-size: em(10, 14);
    color: $product-item-sale-color;
    pointer-events: none;
    background-color: $product-item-sale-background;
  }

  .badge-out-of-stock {
    color: $product-item-sold-out-color;
    background-color: $product-item-sold-out-background;
  }

  .badge-sale-tag {
    float: right;
  }
}

%product-item-grid-3 {
  @include breakpoint(s) {
    @include gallery(6 of 12);

    &:nth-child(-n+2) {
      margin-top: 0;
    }
  }

  @include breakpoint(m) {
    @include gallery(4 of 12);

    &:nth-child(-n+3) {
      margin-top: 0;
    }
  }
}

%product-item-grid-4 {
  @include breakpoint(s) {
    @include gallery(6 of 12);

    &:nth-child(-n+2) {
      margin-top: 0;
    }
  }

  @include breakpoint(m) {
    @include gallery(3 of 12);

    &:nth-child(-n+4) {
      margin-top: 0;
    }
  }
}


// Module overrides
/* scss-combine:modules/flickity */
// *! Flickity v1.1.1
// http://flickity.metafizzy.co

.flickity-enabled {
  position: relative;

  &.is-draggable {
    user-select: none;
    tap-highlight-color: transparent;

    .flickity-viewport {
      //scss-lint:disable DuplicateProperty, NestingDepth
      cursor: move;
      cursor: grab;

      &.is-pointer-down { cursor: grabbing; }
    }
  }

  &:focus { outline: none; }
}

.flickity-viewport {
  position: relative;
  height: 100%;
  overflow: hidden;
}

.flickity-slider {
  position: absolute;
  width: 100%;
  height: 100%;
}

.flickity-prev-next-button {
  position: absolute;
  top: $gutter-half;
  z-index: 2;
  display: none;
  width: $carousel-arrow-size / 1.5;
  height: $carousel-arrow-size / 1.5;
  margin-top: 0;
  background-color: transparent;
  border: 2px solid rgba($carousel-title-color, 0.4);
  border-radius: 50%;
  transition: all 0.3s $ease-out-quad;

  @include breakpoint(m) {
    top: 50%;
    width: $carousel-arrow-size;
    height: $carousel-arrow-size;
    margin-top: -($carousel-arrow-size / 2);
  }

  .display-controls & {
    display: block;
  }

  &:hover {
    cursor: pointer;
    background-color: rgba($carousel-button-background, 0.25);
    border-color: $carousel-title-color;

    svg {
      fill: $carousel-title-color;
    }
  }

  &.previous {
    left: $gutter-half;

    @include breakpoint(m) {
      left: $gutter;
    }
  }

  &.next {
    right: $gutter-half;

    @include breakpoint(m) {
      right: $gutter;
    }
  }

  &:focus {
    outline: none;
  }


  &:disabled {
    cursor: auto;
  }

  svg {
    @include centerer();
    width: $carousel-arrow-size / 5;
    height: $carousel-arrow-size / 5;
    transition: all 0.4s $ease-out-quad;
    fill: rgba($carousel-title-color, 0.4);

    @include breakpoint(m) {
      width: $carousel-arrow-size / 4;
      height: $carousel-arrow-size / 4;
    }
  }
}

/* scss-combine:modules/baguettebox */
/*!
 * baguetteBox.js
 * @author  feimosi
 * @version 1.4.1
 * @url https://github.com/feimosi/baguetteBox.js
 */

// scss-lint:disable QualifyingElement, IdSelector, SelectorFormat

%arrow-button {
  top: calc(50% - 30px);
  width: 44px;
  height: 60px;
}

#baguetteBox-overlay {
  @extend %overlay;
  z-index: map-get($zindex, zoom-modal);
  background-color: $modal-background-color;

  .full-image {
    position: relative;
    display: inline-block;
    width: 100%;
    height: 100%;
    text-align: center;

    figure {
      display: inline;
      height: 100%; // Opera 12 image stretching fix
      margin: 0;
    }

    img {
      display: inline-block;
      width: auto;
      height: auto;
      max-width: 100%;
      max-height: calc(100% - #{$gutter * 3});
      vertical-align: middle;
    }

    figcaption {
      position: absolute;
      bottom: 0;
      display: block;
      width: 100%;
      padding-bottom: 16px;
      font-weight: 300;
      line-height: 1.8;
      color: $content-background;
      text-align: center;
      white-space: normal;
    }

    &:before {
      display: inline-block;
      width: 1px;
      height: 50%;
      margin-right: -1px;
      content: "";
    }
  }
}

#baguetteBox-slider {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  white-space: nowrap;
  transition: left 0.4s ease, transform 0.4s ease;

  &.bounce-from-right {
    animation: bounceFromRight 0.4s ease-out;
  }

  &.bounce-from-left {
    animation: bounceFromLeft 0.4s ease-out;
  }
}

@keyframes bounceFromRight {
  0% { margin-left: 0; }
  50% { margin-left: -30px; }
  100% { margin-left: 0; }
}

@keyframes bounceFromLeft {
  0% { margin-left: 0; }
  50% { margin-left: 30px; }
  100% { margin-left: 0; }
}

.baguetteBox-button {
  position: absolute;
  padding: 0;
  margin: 0;
  font-size: $body-font-size;
  color: $modal-accent-color;
  cursor: pointer;
  background-color: transparent;
  border: 0;
  border-radius: 15%;
  outline: none;
  transition: background-color 0.4s ease;

  &:hover {
    color: $modal-accent-color-active;
  }

  &#next-button {
    @extend %arrow-button;
    right: 2%;
  }

  &#previous-button {
    @extend %arrow-button;
    left: 2%;
  }

  &#close-button {
    @include icon-close-thin($fill-color: $modal-accent-color);
    top: $gutter-half;
    right: $gutter-half;
    width: 24px;
    height: 24px;
    padding: 0px;

    &:hover {
      @include icon-close-thin($fill-color: $modal-accent-color-active);
    }

    svg { visibility: hidden;}
  }

  // Firefox fix
  svg {
    position: absolute;
    top: 0;
    left: 0;
  }
}

// http://tobiasahlin.com/spinkit/
.spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  display: inline-block;
  width: 64px;
  height: 64px;
  margin-top: -32px;
  margin-left: -32px;
}

.double-bounce1,
.double-bounce2 {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: $content-background;
  border-radius: 50%;
  opacity: 0.6;
  animation: bounce 2s infinite ease-in-out;
}

.double-bounce2 { animation-delay: -1s; }

@keyframes bounce {
  0%, 100% { transform: scale(0); }

  50% { transform: scale(1); }
}

/* scss-combine:modules/carousel */
// Carousel
.carousel {
  position: relative;
  width: 100%;
  background-color: $content-background;

  img {
    display: none;
  }

  *:focus {
    outline: none;
  }
}

.flickity-viewport {
  height: 0;
  overflow: hidden;
  transition: height 0.4s $ease-out-quad, max-height 0.4s $ease-out-quad;

  img {
    display: block;
  }
}

// Carousel Item
.carousel-item {
  position: relative;
  display: block;
  width: 100%;
  transition: transform 0.4s $ease-out-quad;

  &.is-selected {
    //scss-lint:disable NestingDepth
    + .carousel-item {
      height: 100%;

      img,
      .carousel-item-image {
        height: 100%;
      }
    }
  }

  figure,
  img {
    width: 100%;
  }
}

// Carousel Text
.carousel-item-info {
  position: relative;
  top: auto;
  left: auto;
  width: 100%;
  padding: 0 10%;
  font-family: $carousel-font;
  text-align: $carousel-text-alignment;
  opacity: 0;
  transition: opacity 0.3s $ease-out-quad;

  @include breakpoint(ms) {
    @include centerer;
    width: percentage(2 / 3);
    padding: 0;
  }

  .is-selected & {
    opacity: 1;
  }

  *:first-child {
    margin-top: 0;

    @include breakpoint(ms-only) {
      margin-top: $gutter;
    }
  }

  *:last-child {
    margin-bottom: 0;
  }

  .carousel-title-background & {
    padding: $gutter-double $gutter;
    background-color: rgba($carousel-title-background, 0.8);
  }
}

.carousel-item-heading {
  @extend %as-h1;
  margin: $gutter-half 0;
  font-size: em(18px, $body-font-size);
  font-weight: $carousel-font-weight;
  color: $carousel-title-color;
  transition: all 0.3s $ease-out-quad;

  @include breakpoint(s) {
    font-size: $carousel-title-size / 2;
  }

  @include breakpoint(m) {
    font-size: $carousel-title-size / 1.66;
  }

  @include breakpoint(l) {
    font-size: $carousel-title-size / 1.33;
  }

  @include breakpoint(xl) {
    font-size: $carousel-title-size;
  }
}

.carousel-item-description {
  max-width: 100%;
  margin: 15px 0;
  font-family: inherit;
  font-size: $body-font-size;
  color: $carousel-title-color;
  transition: all 0.3s $ease-out-quad;

  @include breakpoint(s) {
    font-size: $carousel-caption-size / 1.33;
  }

  @include breakpoint(l) {
    font-size: $carousel-caption-size;
  }
}

.carousel-item-button {
  @include breakpoint(s) {
    margin: 15px 0;
  }

  @include breakpoint(l) {
    //TODO: Ensure this is added to the extends
    @extend %button-large;
  }
}

.carousel-slides {
  ~ * {
    display: none;
  }

  &.flickity-enabled ~ * {
    display: block;
  }
}

// Pagination
.flickity-page-dots {
  position: absolute;
  bottom: 15px;
  z-index: 2;
  display: none;
  width: 100%;
  padding: 0;
  text-align: center;

  @include breakpoint(xl) {
    bottom: 60px;
  }

  .display-controls & {
    display: block;
  }

  .dot {
    display: inline-block;
    width: 10px;
    height: 10px;
    margin: 5px;
    cursor: pointer;
    background-color: rgba($carousel-title-color, 0.3);
    transform: rotate(45deg);

    @include breakpoint(l) {
      width: 16px;
      height: 16px;
      margin: 8px;
    }

    &:hover,
    &.is-selected {
      transform: rotate(135deg);
      transition: transform 0.7s $ease-out-quad;
    }

    &.is-selected {
      background-color: $carousel-title-color;
    }
  }
}

// Optional Fade Transition
.fade-transition {
  .flickity-slider {
    background-color: $content-background;
    transform: none !important; //scss-lint:disable ImportantRule
  }

  .carousel-item {
    left: 0 !important; //scss-lint:disable ImportantRule
    background-color: $content-background;
    opacity: 0;
    transition: opacity 0.6s $ease-out-quad;

    &.is-selected {
      z-index: 1;
      opacity: 1;
    }
  }
}

/* scss-combine:modules/tabs */

.tabs {
  border-bottom: 1px solid $content-border-color;
}

.tab-title {
  display: inline-block;
  margin-left: $gutter-half;
  font-weight: normal;

  @include breakpoint(l) {
    &:first-child {
      margin-left: 0;
    }  
  }

  .tab-link {
    @extend %tab-link;
  }

  &.active .tab-link {
    @extend %tab-link-active;
  }
}

.tab-content-panel {
  display: none;

  &.active {
    display: block;
  }
}

.tab-loading {
  position: relative;
  width: 100%;
  min-height: 300px;
}

/* scss-combine:modules/core-extends */

%account-nav {
  padding: 0;
  font-size: em(12, $body-font-size);
  list-style: none;
  border-width: 0;
  border-radius: $account-border-radius;

  a {
    @include smallcaps($font-size: 12);
    padding: 0;
    font-weight: get-font-weight($weight: "medium");
    color: $account-nav-link;

    &:hover { color: $account-nav-link-active; }
  }

  li {
    margin-top: $gutter-half;
    line-height: 1.3;
    border: 0;

    &:first-child { margin-top: 0; }

    &.is-active {
      border-left: 0;

      a { color: $account-nav-link-active; }
    }
  }

}

%account-layout-nav {
  @include span(12 first);
  padding-right: 0;
  padding-bottom: em($gutter-double);

  @include breakpoint(ms) {
    @include span(9 of 12);
    float: none;
    padding-bottom: em($gutter);
    margin-right: auto;
    margin-left: auto;
  }

  @include breakpoint(m) {
    @include span(3 of 12 first);
    padding-right: em($gutter-half);
    padding-bottom: 0;
  }

  .alert {
    margin-top: $gutter;
  }
}

%account-layout-body {
  @include span(12 first);
  padding-left: 0;

  @include breakpoint(ms) {
    @include span(9 of 12);
    float: none;
    margin-right: auto;
    margin-left: auto;
  }

  @include breakpoint(m) {
    @include span(9 of 12);
    padding-bottom: 0;

    .account-nav-hidden & {
      float: none;
      margin-right: auto;
      margin-left: auto;
    }
  }
}


// General
/* scss-combine:general/icons */
.icon-sprite {
  display: none;
}

.icon-increment-vertical {
  transition: all 0.4s $ease-out-quad;
  transform-origin: 50% 50%;
}

/* scss-combine:general/layout */
.page-content {
  @extend %clearfix;
}

.layout-container {
  @extend %wrapper;

  &.nested {
    padding-right: 0;
    padding-left: 0;
  }
}

//-- Backgrounds --//
.background-body {
  @extend %background-body;
}

.background-content {
  @extend %background-content;
}

.background-triangle-upper-left {
  @extend %background-triangle-upper-left;
}

.background-triangle-upper-right {
  @extend %background-triangle-upper-right;
}

.background-triangle-bottom-left {
  @extend %background-triangle-bottom-left;
}

.background-triangle-bottom-right {
  @extend %background-triangle-bottom-right;
}

/* scss-combine:general/general */
//-- General --//

body {
  font-family: $body-font;
  font-size: $body-font-size;
  line-height: 1.666;
  color: $body-color;
  background-color: $body-background;

  &.scroll-locked {
    overflow: hidden;
  }
}

//-- Links --//

a {
  color: $accent-color;
  transition: color 0.2s $ease-out-quad;

  &:hover {
    @include hover($accent-color);
  }
}

//-- Headers --//

h1,
h2,
h3,
h4,
h5,
h6 {
  color: $heading-color;
  line-height: 1.25;
}

h1 {
  @extend %as-h1;
}


h2 {
  @extend %as-h2;
}

h3 {
  @extend %as-h3;
}

h4 {
  @extend %as-h4;
}

h5 {
  @extend %as-h5;
}

h6 {
  @extend %as-h6;
}

.page-title {
  @extend %as-h1;
  font-size: $h3-font-size;

  @include breakpoint(ms) {
    margin-top: 1em;
    margin-bottom: 1em;
    font-size: $h2-font-size;
  }

  @include breakpoint(l) {
    margin-top: 1.67em;
    margin-bottom: 1.67em;
    font-size: $h1-font-size;
  }

  .error-page  & {
    text-align: center;
  }
}

.section-title {
  @extend %section-title-text-treatment;
  margin-top: 0;
  text-align: center;

  + .section-sub-title {
    margin-bottom: em((28 * 0.75), 14);
  }
}

.section-sub-title {
  display: block;
  text-align: center;
}

//-- Basic elements --//

hr {
  background: $content-border-color;
}

cite {
  color: $meta-color;
}

.hidden {
  display: none;
}

[style*="no-image"],
[src*="no-image"],
.no-image {
  background-color: $body-background;
}

/* scss-combine:general/button */
//------ Buttons ------//
.button {
  @extend %button-base, %button-primary, %font-smoothing;
  font-size: em(12px, $body-font-size);

  &.button-wide {
    width: 100%;
  }

  &.button-large {
    @extend %button-large;
  }

  &.button-small {
    @extend %button-small;
  }

  &.secondary {
    @extend %button-secondary;
  }

  &.secondary-inverse {
    @extend %button-secondary-inverse;
  }

  &.button-disabled {
    color: $disabled-button-color;
    cursor: default;
    background: $disabled-button-background;
    border-color: $disabled-button-background;
  }
}

/* scss-combine:general/form */
//------ Forms ------//
.form-field {
  @extend %tertiary-font;

  //scss-lint:disable UnnecessaryParentReference
  .modal:not(.modal-quick-shop) & {
    & ~ .form-field {
      margin-top: $gutter-third;
    }
  }
}

.form-inline {
  .form-label-text,
  .form-field-title {
    display: inline-block;
    vertical-align: middle;
  }

  .form-input {
    display: inline-block;
  }
}

.page-form {
  .form-field {
    margin: $gutter-half 0;
  }
}

//-- Field Labels --//
.form-label-text,
.form-field-title {
  @extend %meta-text-treatment;
  display: block;
  margin-bottom: em($gutter-third);
  font-size: em(12px);
  font-weight: get-font-weight($weight: "bold");
  letter-spacing: 0.1em;

  .required-text {
    // Additional styles in place in case these should be shown later
    color: $body-color;
  }

  .modal:not(.modal-quick-shop) & {
    @extend %show-for-sr;
  }
}

.form-inline-message {
  @extend %meta-text-treatment;
  font-size: 0.8em;

  .form-field-invalid & {
    color: $error-color;
  }

  .form-field-valid & {
    color: $success-color;
  }
}

//-- Text Inputs --//
.form-input {
  display: block;
  width: 100%;
  min-height: $body-font-size + $gutter;
  padding: $gutter-third $gutter-half;
  line-height: inherit;
  color: $input-color;
  background: $input-background-color;
  border-color: $input-border-color;
  border-radius: 0;
  transition: border-color 0.2s $ease-out-quad;

  &::placeholder {
    color: lighten($input-color, 10%);
  }

  &:focus {
    outline: none;
  }

  .form-icon-inline & {
    padding-right: $body-font-size + $gutter-third * 2 + $gutter-half;
  }

  .form-field-invalid & {
    border-color: $error-color;
  }

  .form-field-valid & {
    border-color: $success-color;
  }
}

//-- Form Errors --//
.form-error {
  color: $error-color;
  border-color: $error-color;

  &::placeholder {
    color: lighten($error-color, 30%);
  }
}

.form-error-message {
  color: $error-color;
}

//-- Select Wrapper --//
.form-select-wrapper {
  position: relative;
  display: inline-block;
  width: 100%;
  min-height: $body-font-size + $gutter;
  padding: $gutter-third $gutter $gutter-third $gutter-half;
  font-size: $body-font-size;
  line-height: 1.6;
  color: $input-color;
  cursor: pointer;
  background-color: $input-background-color;
  border: 1px solid $input-border-color;

  @include breakpoint(l) {
    max-width: $input-max-width;
  }

  .modal:not(.modal-quick-shop) & {
    max-width: 100%;
  }

  //TODO: Establish a No-js fall back to this
  &:after {
    position: absolute;
    top: 50%;
    right: em($gutter-half);
    margin-top: -2px;
    border-top: 4px solid contrast($input-border-color, 50%);
    border-right: 4px solid transparent;
    border-left: 4px solid transparent;
    content: "";
  }

  select {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 2;
    width: 100%; // needed for Firefox
    height: 100%; // needed for IE
    cursor: pointer;
    opacity: 0;
    appearance: none;

    // For IE 10+
    &::-ms-expand { display: none; }
  }
}

//-- Checkboxes & Radios --//
.form-field-radio,
.form-field-checkbox {
  position: relative;

  .form-field-control {
    vertical-align: middle;
  }
}

.form-radio,
.form-checkbox {
  @extend %checkbox-hide;
  width: 0;

  + .form-label-text {
    margin-bottom: 0;
    vertical-align: middle;
    cursor: pointer;

    //scss-lint:disable ImportantRule, NestingDepth
    .modal:not(.modal-quick-shop) & {
      position: relative !important;
      width: auto;
      height: auto;
      overflow: visible;
      clip: inherit;
    }

    &:before {
      @include icon-unchecked($input-color);
      position: relative;
      top: 2px;
      display: inline-block;
      width: 1em;
      height: 1em;
      margin-right: $gutter-third;
      cursor: pointer;
      content: "";
    }

    &:hover {
      color: $body-color-alt;

      &:before {
        @include icon-checked($input-color, mix($input-color, $content-background, 50%));
      }
    }
  }

  &:checked + .form-label-text {
    color: $body-color-alt;

    &:before {
      @include icon-checked($input-color);
    }
  }
}

//-- Quantity Increment Components --//
.form-field-quantity {
  position: relative;
  display: block;
  width: 80px;

  .form-input {
    height: 55px;
    padding: 0 34px 0 5px;
    text-align: center;
    background-color: brightness-adjust($input-background-color, false, 5%);
    border: 0;

    .js & {
      -moz-appearance: textfield;
    }

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
    }
  }
}

.quantity-control {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 1;
  width: 30px;
  height: 29px;
  padding: 0;
  cursor: pointer;
  background-color: brightness-adjust($input-background-color, false, 13%);
  border: 2px solid $content-background;
  transition: all 0.3s $ease-out-quad;
  user-select: none;

  .no-js & {
    pointer-events: none;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s $ease-out-quad;
  }

  &:hover {
    z-index: 10;
    background-color: $primary-button-background;

    use {
      fill: $primary-button-color;
    }
  }

  &.quantity-increment {
    z-index: 1;
    border-top: 0;
  }

  &.quantity-decrement {
    top: auto;
    bottom: 0;
    border-bottom: 0;
  }
}

.form-control-quantity {
  position: absolute;
  top: 50%;
  left: 50%;
  display: block;
  width: 10px;
  height: 10px;
  padding: 0;
  margin: -5px 0 0 -5px;

  use {
    transition: all 0.3s $ease-out-quad;
    fill: brightness-adjust($input-background-color, false, 50%);
  }

  &:hover {
    z-index: 10;
  }
}

//-- Form Icons --//
.form-icon-button {
  display: inline-block;
  width: 45px;
  min-height: 100%;
  background-color: $input-background-color;
  border: 1px solid $input-border-color;
  transition: background-color 0.3s $ease-out-quad;

  svg {
    position: absolute;
    top: 50%;
    left: 50%;
    display: inline-block;
    width: 14px;
    height: 14px;
    margin: -7px 0 0 -7px;
  }

  use {
    transition: fill 0.3s $ease-out-quad;
    fill: $input-color;
  }

  &:hover,
  &:active {
    background-color: contrast($input-background-color, 10%);

    use {
      fill: $input-border-color-accent;
    }
  }
}

//-- Form Captchas --//
.form-field-captcha {
  //scss-lint:disable NestingDepth, SelectorDepth
  float: left;
  width: 100%;

  @include breakpoint(m-only) {
    font-size: 0;

    .form-label,
    .captcha-note { font-size: $body-font-size; }
  }

  .captcha-image {
    display: inline-block;
    padding: em(5px);
    margin: em(15px) em(15px) em(15px) 0;
    vertical-align: middle;
    background-color: rgba($input-border-color, 0.5);
    border: 1px solid contrast($input-border-color, 15%);

    @include breakpoint(m-only) {
      width: 48%;
      margin-right: 4%;
    }

    img {
      display: block;
      height: em(75px);

      @include breakpoint(m-only) {
        width: 100%;
        height: auto;
      }
    }
  }

  .form-field-control {
    display: inline-block;
  }
}

/* scss-combine:general/table */
//-- Tables --//

table {
  color: $body-color;
  border-color: $content-border-color;
}

th {
  @extend %as-h6;
  color: $input-color;
  background: $input-background-color;
}

/* scss-combine:general/rte */
//------ Rich Text Editor ------//
.rte {
  @extend %clearfix;
  font-size: $body-font-size;
  text-align: left;

  > *:first-child {
    margin-top: 0;
  }

  > *:last-child {
    margin-bottom: 0;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    line-height: 1.5;
  }

  ul {
    list-style: disc;
  }

  ul,
  ol,
  dl {
    margin-left: $gutter;
  }

  blockquote {
    padding-left: $gutter;
    margin-left: 0;
    border-left: 2px solid $accent-color;
  }

  img {
    height: auto;
    max-width: 100%;
  }
}


// -- Components -- //
/* scss-combine:components/alerts */
.main-alert {
  opacity: 0;
  transition: opacity 0.5s $ease-out-quad;

  &.visible {
    opacity: 1;
  }
}

.alert {
  position: relative;
  height: auto;
  padding: $gutter-half $gutter * 2 $gutter-half $gutter-half;

  &,
  &.alert-message {
    transition: all 10s $ease-out-quad;
  }

  &.alert-error {
    @include alert("error");
  }

  &.alert-info {
    @include alert("info");
  }

  &.alert-success {
    @include alert("success");
  }

  &.dismissed {
    height: 0;
    padding: 0;

    .alert-message {
      opacity: 0;
    }
  }

  .modal-quick-shop & {
    transition: background-color 0.5s $ease-out-quad, color 0.5s $ease-out-quad; ;
  }
}

.alert-dismiss {
  @include anchor-underline("none");
  @include icon-close-thin();
  position: absolute;
  top: 50%;
  right: $gutter-half;
  display: inline-block;
  width: $gutter-half;
  font-size: $gutter;
  line-height: 1;
  text-indent: -9999px;
  background-size: contain;
  transform: translateY(-50%);
  transition: all 0.5s $ease-out-quad;

  .icon-dismiss,
  &.has-icon {
    width: $gutter * 2 / 3;
    height: 100%;
  }
}

/* scss-combine:components/banners */
.banner-wrapper-top {
  display: table-row;
  width: 100%;
  font-family: $banner-font;
  font-weight: $banner-weight;
  color: $banner-color;
  background-color: $banner-background;

  .mobile-nav-open &,
  .search-open & {
    display: none;
  }

  .container {
    display: table-cell;
    padding: $gutter / 2 $gutter;
    font-size: 115%;
    text-align: center;
  }

  a:not(.button),
  a {
    .main-header & {
      color: $banner-link-color;

      &:hover {
        color: brightness-adjust($banner-link-color);
      }
    }
  }
}

.banner-wrapper-bottom {
  @if($newsletter-background == $body-background){
    border-top: 1px solid $content-border-color;
  }

  + .footer-container {
    border-top-color: transparent;
  }

  .layout-container {
    padding-top: $gutter-double;
    padding-bottom: $gutter-double;
  }
}

/* scss-combine:components/blog/sidebar */
//-- Blog Sidebar --//
.blog-sidebar-heading {
  @extend %meta-text-treatment;
  padding: $blog-gutter;
  margin: 0;
  font-size: $h6-font-size;
  border-bottom: 1px solid $content-border-color;

  @include breakpoint(s-down) {
    &:first-child {
      border-top: 1px solid $content-border-color;
    }
  }
}

.blog-sidebar-component {
  padding: $blog-gutter;
  border-bottom: 1px solid $content-border-color;
  
  &:last-child {
    border-bottom: 0;
  }
}

.blog-sidebar-item {
  margin-top: $blog-gutter;

  &:first-child {
    margin-top: 0;
  }

  span {
    display: block;
    line-height: 1.4;
  }
}

.blog-sidebar-link-title {
  color: $blog-sidebar-link-title;
}

.blog-sidebar-meta {
  margin-top: 5px;
  color: $blog-sidebar-meta;
}

/* scss-combine:components/blog/blog-item */
.blog-item {
  margin-top: $gutter;
}

.blog-item-featured-image {
  @include aspect-ratio(12 7);
  display: block;
  background: 50% 50% $content-background no-repeat;
  background-size: cover;
}

.blog-item-title {
  @extend %as-h2;
  padding: $blog-gutter * 2 $blog-gutter * 2 $blog-gutter;
  margin: 0;
  text-align: center;

  @include breakpoint(s-down) {
    font-size: $h3-font-size;
  }

  a {
    color: $heading-color;
    transition: color 0.2s $ease-out-quad;

    &:hover {
      color: $body-color-alt;
    }
  }
}

.blog-item-header-caption {
  @include smallcaps;
  padding: 0 $blog-gutter;
  font-size: em(12px, $body-font-size);
  color: $meta-color;
  text-align: center;

  &:after {
    display: block;
    width: em(35px);
    margin: $blog-gutter auto 0;
    border-bottom: 1px solid $content-border-color;
    content: "";
  }
}

.blog-item-author {
  margin-left: $blog-gutter / 2;
}

.blog-item-tags {
  display: inline-block;
  text-align: left;

  .template-blog & {
    display: block;
    margin-bottom: $gutter;
    text-align: center;
  }
}

.blog-item-tags-label,
.blog-item-tags-list {
  //scss-
  @include smallcaps;
  display: inline-block;
  margin-left: 0 !important; //override RTE list styles
  color: $meta-color;
  vertical-align: middle;
}

.blog-item-tags-label {
  margin-right: $gutter-third;
}

.blog-item-tag {
  display: inline;
}

.blog-item-actions {
  margin-top: $blog-gutter;

  @include breakpoint(m) {
    margin-top: $blog-gutter * 2;
  }

  .template-blog & {
    text-align: center;
  }

  .share-buttons {
    margin-top: $blog-gutter;

    @include breakpoint(ms) {
      float: right;
      margin-top: 0;
    }
  }

  .share-buttons-list-trigger {
    position: relative;
    left: em(55px, $body-font-size) / 2;
    padding: 0;
    border: 0;

    @include breakpoint(ms) {
      left: 0;
      float: right;
    }

    &:hover {
      border: 0;

    }
  }

  .share-buttons-list {
    top: $gutter-third;
    margin-top: $gutter;
    margin-left: 0;
  }
}

/* scss-combine:components/cart/content */
//-- Initial Cell / Table Settings --//
.cart-item-header {
  display: none;

  .cart-item-cell {
    @include smallcaps;
    font-size: em(12px, $body-font-size);
    letter-spacing: em(2px, $body-font-size);
    color: $meta-color;
    text-align: right;

    &:first-of-type {
      text-align: left;
    }
  }
}

.cart-item-cell {
  width: 100%;
}

//-- Main Cart Area --//
.cart-item-row {
  border-bottom: 1px solid $content-border-color;

  @include breakpoint(ms) {
    @include layout-group(0, $gutter);
  }
}

//-- Cart Content Rows --//
.cart-item-thumbnail {
  float: left;
  width: map-get($cart-item-thumbnail, large);
  height: map-get($cart-item-thumbnail, large);
  margin-right: $gutter-half;
  vertical-align: middle;
  background-position: 50% 0;
  background-repeat: no-repeat;
  background-size: contain;

  @include breakpoint(ms-only) {
    width: map-get($cart-item-thumbnail, small);
    height: map-get($cart-item-thumbnail, small);
  }
}

.cart-item-info {
  float: left;
  width: calc(100% - #{$cart-item-info-offset-large});

  @include breakpoint(ms-only) {
    width: calc(100% - #{$cart-item-info-offset-small});
  }
}

.cart-item-brand {
  @extend %meta-text-treatment;
  display: block;
  margin-bottom: $gutter-third / 2;
  font-size: em(12px);
  text-transform: uppercase;
}

.cart-item-title {
  @include smallcaps;
  @include anchor-underline('on-hover', $heading-color, $heading-color);
  position: relative;
  top: em(-5px, $body-font-size); // account for line-height shift
  display: inline-block;
  max-width: 100%;
  transition: border 0.4s $ease-out-quad;

  &.no-link {
    border: 0;
  }
}

.cart-item-block {
  display: block;
}

.cart-item-accent {
  display: block;
  line-height: 1;

  &.price {
    font-size: em(16px, $body-font-size);
  }

  &.price-discounted {
    margin-bottom: em(8px, $body-font-size);
    text-decoration: line-through;
  }
}

//-- Cart Item Options --//
.cart-item-option-list {
  padding-top: em(5px, $body-font-size);
}

.cart-item-option {
  @include smallcaps;
  display: block;
  font-size: em(11px, $body-font-size);
  color: $meta-color;
}

.cart-item-option-value {
  font-weight: normal;
  color: $body-color-alt;
}

.cart-item-giftwrap {
  width: 100%;
}

//-- Cart Item Actions --//
.cart-item-action {
  text-align: right;
}

.cart-item-remove {
  display: inline-block;

  &:hover svg {
    fill: $heading-color;
  }

  svg {
    display: block;
    width: $cart-item-icon-size;
    height: $cart-item-icon-size;
    transition: fill 0.4s $ease-out-quad;
    fill: $body-color;
  }
}

/* scss-combine:components/cart/content-small */
//-- Cart Content -- Small Only --//
@include breakpoint(s-down) {
  .cart-item-row {
    @include clearfix();
    padding: $gutter $gutter-half;

    .button {
      display: block;
      padding: 5px;
      font-size: 1em;
    }
  }

  .cart-item-product {
    @include span(12 first);
    padding-bottom: $gutter-half;
  }

  .cart-item-quantity {
    @include span(6 first);
    padding-bottom: $gutter-half;
  }

  .cart-item-total {
    @include span(6);
    position: relative;
    padding-bottom: $gutter-half;
    font-size: $h4-font-size;
    text-align: right;

    @include breakpoint(s-down) {
      padding-bottom: 5px;
    }
  }

  .cart-item-price {
    display: none;
  }

  .cart-item-giftwrap {
    @include break();
    @include span(12 first);
  }

  .cart-item-action {
    @include span(6);
  }
}

/* scss-combine:components/cart/content-medium-small */
//-- Cart Content -- Medium-Small Up --//
@include breakpoint(ms) {

  .cart-item-cell {
    @include layout-group-item(top);
    text-align: right;
  }

  .cart-item-row .button {
    padding: 5px;
    font-size: em($body-font-size - 2);
  }

  .cart-item-product {
    width: percentage(map-get($cart-item-cell, product) / map-get($cart-item-cell, columns));
    text-align: left;
  }

  .cart-item-price {
    width: percentage(map-get($cart-item-cell, price) / map-get($cart-item-cell, columns));
  }

  .cart-item-quantity {
    width: percentage(1 / map-get($cart-item-cell, columns));

    .form-field-quantity {
      display: inline-block;
    }
  }

  .cart-item-total {
    display: none;
  }

  .cart-item-action {
    width: percentage(map-get($cart-item-cell, action) / map-get($cart-item-cell, columns));
  }
}

/* scss-combine:components/cart/content-medium */
//-- Cart Content -- Medium Up --//
@include breakpoint(m) {

  .cart-item-quantity {
    width: percentage(map-get($cart-item-cell, quantity) / map-get($cart-item-cell, columns));
  }

  .cart-item-total {
    display: table-cell;
    width: percentage(map-get($cart-item-cell, total) / map-get($cart-item-cell, columns));
  }
}

/* scss-combine:components/cart/content-large */
//-- Cart Content -- Large Up --//
@include breakpoint(l) {
  .cart-item-row .button {
    padding: $gutter-half $gutter-third;
    font-size: 1em;
  }
}

/* scss-combine:components/cart/content-giftwrap */
//-- Stylings for Giftwrap Cell --//
.giftwrap-item {
  margin-top: em(6px, $body-font-size);
}

.giftwrap-item-title {
  @include smallcaps;
  display: block;
  line-height: 1.4;
  color: $heading-color;
}

.giftwrap-item-actions {
  display: block;
  margin-top: $gutter-half;
}

.giftwrap-item-message {
  display: block;
  margin-top: $gutter-half;
  color: $body-color-alt;
}

.giftwrap-item-action {
  @extend %meta-text-treatment;
  padding-right: $gutter-half;
  font-size: em(12px);

  ~ .giftwrap-item-action {
    margin-left: $gutter-third;
  }

  svg {
    width: em(14px);
    height: em(14px);
    margin-right: $gutter-half / 2;
    fill: currentColor;
  }
}

.giftwrap-item-add {
  @include smallcaps;
  @include anchor-underline("off-hover", $body-color-alt, $body-color);
  position: relative;
  display: inline-block;
  padding-left: $gutter-half;
  font-size: em(10px, $body-font-size);
  font-weight: get-font-weight($weight: "bold");

  @include breakpoint(ms-only) {
    &:before {
      display: inline-block;
      content: attr(data-text-short);
    }
  }

  &:before {
    display: inline-block;
    content: attr(data-text-long);
  }

  svg {
    position: absolute;
    top: 50%;
    left: 0;
    width: 9px;
    height: 9px;
    margin-top: -5px;
    fill: currentColor;
  }
}

/* scss-combine:components/cart/totals */
//-- Cart Totals --//
.cart-totals-row {
  //scss-lint:disable PropertySortOrder
  @include container();
  display: flex;
  flex: 1;
  flex-direction: row;
  flex-flow: row wrap;
  border-bottom: 1px solid $content-border-color;

  .cart-total-cell {
    width: 100%;
    padding: $gutter 0;
    border-top: 1px solid $content-border-color;

    @include breakpoint(m) {
      width: 50%;
      border-top: 0;

      &:first-child {
        @include first();
        border-left: 0;
      }
    }

    &:first-child {
      border-top: 0;
    }
  }

  .form-field {
    position: relative;

    .form-label-text {
      @extend %show-for-sr;
    }

    .form-icon-button {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
    }
  }

  .alert {
    padding: $gutter-third $gutter-half;
    margin-top: $gutter-half;
    font-size: $h6-font-base;

    &.alert-error {
      @extend %meta-text-treatment;
      padding: 0;
      font-size: 0.8em;
      color: $error-color;
      background-color: transparent;
      border-color: transparent;
    }
  }
}

.cart-totals-heading {
  @extend %meta-text-treatment;
  margin-top: 0;
  margin-bottom: 0;
  font-size: em(12px, $body-font-size);
  letter-spacing: em(2px, $body-font-size);

  .cart-totals-toggle {
    @extend %primary-link-style;
    float: right;
    font-size: 1em;
    border-bottom: 1px solid $heading-color;

    &:hover {
      cursor: pointer;
      border-bottom-color: transparent;
    }

    &.active svg use {
      transform: rotate(45deg);
    }

    svg {
      width: em(12px);
      height: em(12px);
      fill: currentColor;
    }

    use {
      transform: rotate(0deg);
      transform-origin: 50% 50%;
    }

  }
}

//-- Cart Totals Forms --//
[data-coupon-code-form],
[data-gift-certificate-form] {
  display: none;

  &.visible {
    display: block;
  }
}

//--Totals - Cart Codes --//
.cart-total-codes {
  > [class*="cart-total-"] {
    padding: $gutter 0;
    border-top: 1px solid $border-color;

    @include breakpoint(m) {
      margin-right: $gutter;
    }

    &:first-child {
      padding-top: 0;
      border: 0;
    }

    &:last-child {
      padding-bottom: 0;
    }
  }

  form {
    margin-top: $gutter-half;
  }
}

//-- Totals - Coupon Cell --//
.coupon-item-toggle-wrapper {
  margin: $gutter-third 0;
}

.coupon-item-applied {
  padding: $gutter-half;
  margin: $gutter 0;
  background-color: contrast($content-background, 3%);
}

//-- Totals - Gift Certificate Cell --//
.gift-certificate-applied {
  padding: $gutter-half;
  margin: $gutter 0;
  background-color: contrast($content-background, 3%);

  span {
    display: block;
  }

  + form {
    padding-top: $gutter-third;
  }
}

//-- Totals - Overview / Pricing Information --//
.cart-total-overview {
  @include breakpoint(m) {
    padding-left: $gutter;
  }
}

.cart-total-item {
  @include container();
  @include smallcaps;
  padding-top: $gutter-half;
  font-size: em(12px, $body-font-size);
  color: $meta-color;
}

.cart-total-item-label {
  @include span(5 of 12 first);
}

.cart-total-item-value {
  @include span(7 of 12);
  line-height: 1;
  color: $meta-color;
  text-align: right;

  .cart-total & {
    color: $cart-total-value-color;
  }
}

.cart-total-link {
  @extend %primary-font, %primary-link-style;
  font-size: 1em;
  border-bottom: 1px solid $heading-color;

  &:hover {
    border-bottom-color: transparent;
  }

  svg {
    width: em(12px);
    height: em(12px);
    fill: currentColor;
  }
}

//-- Totals - Actions --//
.cart-actions {
  padding-top: $gutter;
  padding-bottom: $gutter;
  text-align: center;

  @include breakpoint(ms) { text-align: right; }

  .continue-shopping {
    @extend %primary-link-style;
    display: block;
    width: 100%;
    margin-bottom: $gutter;
    text-align: center;
    border-bottom: 1px solid $heading-color;

    &:hover {
      border-bottom-color: transparent;
    }

    @include breakpoint(ms) {
      float: left;
      width: auto;
      margin-bottom: 0;
    }
  }
}

.cart-additional-checkout-buttons {
  @extend %clearfix;
  margin-top: $gutter-half;
  text-align: center;

  @include breakpoint(ms) { text-align: right; }

  // scss-lint:disable ImportantRule, QualifyingElement
  p {
    float: none !important;
    margin: em($gutter-half);
    color: $meta-color;
  }

  form { clear: both;}
}

/* scss-combine:components/cart/apple-pay */
.apple-pay-checkout-button {
  display: none;
  max-height: em(64px);
  min-width: em(200px);
  min-height: em(32px);
  padding: em(20px);
  margin-bottom: em($gutter-half);
  background: {
    position: 50% 50%;
    repeat: no-repeat;
    size: 100% 60%;
  }
  border-radius: 5px;
  box-sizing: border-box;

  //scss-lint:disable ColorKeyword ColorVariable
  @if $apple-pay-style == "white" {
    background-color: white;
    background-image: -webkit-named-image(apple-pay-logo-black);
  } @else if $apple-pay-style == "white-border" {
    background-color: white;
    background-image: -webkit-named-image(apple-pay-logo-black);
    border: 0.5px solid black;
  } @else {
    background-color: black;
    background-image: -webkit-named-image(apple-pay-logo-white);
  }

  .apple-pay-supported & { display: inline-block; }
}

/* scss-combine:components/collections/compare */
//-- Compare Bar Wrapper --//
.compare-bar {
  position: fixed;
  right: 0;
  bottom: -100%;
  left: 0;
  z-index: map-get($zindex, compare-bar);
  background-color: $content-background;
  transition: all 0.2s $ease-out-quad;

  @include breakpoint(s-down) {
    position: absolute;
    display: none;
  }

  &.visible {
    bottom: 0;
  }
}

.compare-bar-header,
.compare-bar-content {
  padding-right: $gutter;
  padding-left: $gutter;
}

//-- Compare Bar Header --//
.compare-bar-header {
  display: flex;
  align-content: flex-start;
  align-items: flex-start;
  flex-flow: column wrap;
  justify-content: flex-start;
  padding-top: $gutter-third;
  padding-bottom: $gutter-third;
  margin-bottom: -1px;
  text-align: left;
  vertical-align: middle;
  border-top: 1px solid $compare-bar-border;
  border-bottom: 1px solid $compare-bar-border;

  .layout-container {
    padding: $gutter-half $gutter-double;
    box-sizing: border-box;
  }

  .is-opened & {
    margin-bottom: 0;
  }

  @include breakpoint(m) {
    align-content: center;
    align-items: center;
    flex-flow: row wrap;
    justify-content: center;
  }
}

.compare-bar-title {
  @extend %as-h4;
  display: inline-block;
  flex: 1;
  height: 100%;
  margin: 0;
}

.compare-bar-buttons {
  flex: 1;
  margin-top: $gutter-half;
  text-align: left;

  @include breakpoint(m) {
    text-align: right;
  }
}

.compare-bar-toggle,
.compare-bar-submit {
  display: inline-block;

  @include breakpoint(l) {
    //same as @extend %button-large. But you can't extend in breakpoints
    padding: ($button-padding-vertical * 2) $button-padding-horizontal;
  }
}

.compare-bar-submit {
  opacity: 0;
  transition: opacity 0.2s $ease-out-quad;

  &.visible {
    opacity: 1;
  }
}

//-- Compare Bar Contents --//
.compare-bar-content {
  display: block;
  width: 100%;
  max-height: 0;
  overflow: hidden;
  font-size: 0;
  text-align: left;
  transition: all 0.5s linear;

  .is-opened & {
    max-height: 500px;
  }

  @include breakpoint(m){
    text-align: center;
  }
}

//-- Compare Bar Items --//
.compare-bar-item {
  position: relative;
  display: inline-block;
  width: 100px;
  margin: $gutter-half 0 $gutter-half $gutter-half;
  font-size: $body-font-size;

  &:first-child { margin-left: 0; }

  @include breakpoint(l) {
    width: 150px;
  }
}

.compare-item-border {
  border: 1px solid $compare-bar-border;
}

.compare-bar-image {
  @include aspect-ratio(map-get($product-item-image, width) map-get($product-item-image, height));
  background: {
    position: 50% 50%;
    repeat: no-repeat;
    size: cover;
  }
}

.compare-bar-item-add {
  @include aspect-ratio(map-get($product-item-image, width) map-get($product-item-image, height));
}

.compare-bar-item-text {
  @extend %font-smoothing;
  @include smallcaps();
  position: absolute;
  top: 50%;
  left: 50%;
  display: inline-block;
  padding: 0;
  margin: 0;
  font-size: em(12px, $body-font-size);
  line-height: 1.2;
  transform: translateY(-50%) translateX(-50%);
}

.compare-bar-item-remove {
  position: absolute;
  top: 0;
  right: 0;
  padding: 6px;
  background-color: $content-background;

  svg {
    display: block;
    width: 8px;
    height: 8px;
  }

  use {
    width: 100%;
    height: 100%;
    transition: fill 0.5s $ease-out-quad;
    fill: brightness-adjust($color: $compare-bar-border, $amount: 20%);
  }

  &:hover use {
    fill: $compare-bar-accent;
  }
}

/* scss-combine:components/header */

.main-header {
  position: relative;
  z-index: map-get($zindex, header);
  display: table;
  width: 100%;
  background-color: $header-background;

  &,
  a:not(.button) {
    color: $header-color;
    vertical-align: middle;
  }

  .header-menu {
    display: table;
    width: 100%;
    padding: 0 $gutter-half;
    border-top: 1px solid $header-background;
    border-bottom: 1px solid $header-background;
    box-sizing: border-box;
    table-layout: fixed;

    @include breakpoint(l) {
      padding-right: $gutter;
      padding-left: $gutter;
    }

    @if $header-enable-border {
      border-bottom-color: blend-multiply($content-border-color, $header-background);
    }

    &.has-banner {
      border-top-color: $content-border-color;

      //scss-lint:disable NestingDepth
      .mobile-nav-open & {
        border-top-color: $header-background;
      }
    }
  }
}

// -- Header Quick Nav && Header Tools && Header Logo -- //
.header-logo-wrapper,
.header-tools-wrapper,
.header-mobile-nav-wrapper,
.header-nav-wrapper {
  @extend %font-smoothing;
  display: table-cell;
  width: percentage(1 / 3);
  font-size: $header-font-size;
  font-weight: get-font-weight($weight: "bold");
  vertical-align: middle;
}

// -- Header Logo -- //
.header-logo-wrapper {
  height: $header-height;
  padding-top: 5px;
  padding-bottom: 5px;
  text-align: center;

  @include breakpoint(m) {
    text-align: left;
  }

  @include breakpoint(l) {
    height: $header-height-large;
  }

  .header-logo,
  .header-logo-text {
    padding: 0;
    margin: 0;
    font-size: $header-logotype-size;
  }

  .header-logo-text {
    line-height: 1;
  }

  .header-logo-image {
    max-width: 100%;
    max-height: $header-logo-size;

    @include breakpoint(ms) {
      max-width: 250px;
    }
  }

  a {
    display: inline-block;
    color: $header-color;
    border-bottom: 0;
  }

  img {
    display: block;
  }
}

//-- Mobile Menu Trigger --//
.header-mobile-nav-wrapper {
  @include breakpoint(m) {
    display: none;
  }
}

//-- Center navigation --//
.header-nav-wrapper {
  @include breakpoint(ms-down) {
    display: none;
  }

  .header-nav {
    display: block;
    margin: 0;
    text-align: center;
  }
}

.header-nav-item {
  position: relative;
  display: inline-block;
  margin-left: $gutter;

  &:first-child {
    margin-left: 0;
  }

  &.dropdown-active a,
  > a:hover {

    use {
      fill: $header-color-accent;
    }

    .header-nav-label:before {
      width: 100%;
    }
  }
}

.header-tools-item {
  display: none;

  @include breakpoint(m) {
    display: inline-block;
  }

  &.header-tools-item-cart {
    display: inline-block;
    vertical-align: bottom;
  }
}

.header-nav-item {
  @if $header-use-megamenu {
    position: inherit;

    &.header-nav-item-pages {
      position: relative;
    }
  }
}

//-- Tools / Far right navigation --//
.header-tools {
  text-align: right;
}

.header-nav-label {
  position: relative;
  display: inline-block;
  letter-spacing: em(1px, 12px);
  text-transform: uppercase;
  vertical-align: middle;

  &:before {
    position: absolute;
    top: calc(50% + 1em);
    right: 0;
    left: 50%;
    display: block;
    width: 0;
    height: 1px;
    background: mix($header-color, $header-background, 50%);
    content: "";
    transform: translateX(-50%);
    transition: all 0.2s $ease-out-quad;
  }
}

//-- Dropdown Arrows --//
.header-nav-arrow {
  position: relative;
  width: 4px;
  margin-top: 1px;
  margin-left: 4px;
  vertical-align: middle;

  &:after {
    display: inline-block;
    margin-bottom: em(3);
    border-top: 4px solid $header-color;
    border-right: 4px solid transparent;
    border-left: 4px solid transparent;
    content: "";
  }
}

//-- Header Menu Icons --//
.header-tools-search,
.header-tools-cart,
.header-tools-menu {
  position: relative;
  padding-left: 25px;
}

.header-tools-cart {
  display: block;

  @include breakpoint(m) {
    padding-left: 0;

    .header-tools-icon {
      display: none;
    }
  }

  .header-nav-arrow,
  .header-cart-label {
    @include breakpoint(ms-down) {
      display: none;
    }
  }
}

.header-tools-icon {
  position: absolute;
  top: 50%;
  left: 0;
  width: 18px;
  height: 18px;
  margin-top: -9px;

  use {
    transition: fill 0.4s $ease-out-quad;
    fill: $header-color;

    .dropdown-active & {
      fill: $header-color-accent;
    }
  }
}

/* scss-combine:components/header/search-modal */
//-- Modal Wrapper --//
.modal-header-search {

  .modal-content {
    position: initial;
    background-color: transparent;
  }
}

//-- Modal Form --//
.modal-search {
  position: relative;
  width: 100%;
  padding: $gutter-half 0;

  .form-field {
    width: 100%;
    vertical-align: middle;
  }

  .form-label-text,
  .form-field-title {
    @extend %show-for-sr;
  }

  .form-input {
    @extend %as-h3, %secondary-font;
    padding: $gutter-half (map-get($search-modal-icon, width) + $gutter-third + 18px) $gutter-half 0;
    color: $search-modal-color;
    background-color: transparent;
    border: 0;
    border-bottom: 1px solid $search-modal-color-accent;

    &::placeholder {
      color: $search-modal-color;
    }
  }

  .form-field-invalid {
    .form-input {
      background-image: none;
    }

    .form-inline-message {
      position: absolute;
      bottom: - $gutter;
      left: map-get($search-modal-icon, width) + $gutter-third;
      color: $search-modal-error-color;
    }
  }

  .form-field-valid .form-input {
    background-image: none;
  }
}

.modal-search-submit {
  position: absolute;
  top: 50%;
  right: 0;
  display: inline-block;
  width: map-get($search-modal-icon, width);
  height: map-get($search-modal-icon, height);
  margin-top: - map-get($search-modal-icon, width) / 2;
  vertical-align: middle;
  background: transparent;
  border: 0;
}

.modal-search-submit-icon {
  display: inline-block;
  max-width: 100%;
  max-height: 100%;
  vertical-align: middle;

  use {
    transition: fill 0.4s $ease-out-quad;
    fill: $search-modal-color;
  }

  &:hover use {
    fill: $search-modal-color
  }
}

/* scss-combine:components/header/dropdown */
//-- Header Dropdowns --//
.header-dropdown {
  @extend %header-box-shadow;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 100;
  line-height: 1.666;
  background-color: $header-background;
  opacity: 0;
  transition: opacity 0.3s $ease-out-quad, top 0.3s $ease-out-quad;

  &:not(.visible) {
    display: none;
  }

  &.animating-in,
  &.animating-out,
  &.animating {
    display: block;
  }

  &.visible {
    top: calc(100% + #{$header-dropdown-offset});
    display: block;
    opacity: 1;
    transition: all 0.3s $ease-out-quad;

    &.dropdown-currency,
    &.dropdown-quick-cart,
    &.dropdown-menu-style-mega-menu { top: 100%; }
  }

  .dropdown-column {
    height: 100%;
  }
}

//-- Common Dropdown li styles --//
.dropdown-link-list-item,
.dropdown-column-header {

  a {
    @include anchor-underline('on-hover', $color: $header-color, $hover: $header-color);
    text-transform: uppercase;
    transition: all 0.4s $ease-out-quad;
  }
}

.dropdown-column-header {
  padding-bottom: $header-dropdown-padding-small;
  line-height: 1.3;

  &:last-child {
    padding-bottom: 0;
  }
}

.dropdown-link-list-item {
  position: relative;
  display: block;
  padding-top: $header-dropdown-padding-small;
  padding-bottom: $header-dropdown-padding-small;
  line-height: 1.2;
}

.dropdown-menu {
  @extend %clearfix;
  left: 50%;
  text-align: left;
  transform: translateX(-50%);

  &.dropdown-menu-style-drill-down {
    min-width: $header-dropdown-shop;
    background: transparent;
    box-shadow: none;
  }

  &.dropdown-menu-style-mega-menu {
    align-content: flex-start;
    flex-flow: row;
    flex-wrap: wrap;
    justify-content: flex-start;
    width: (($max-width / 5) * $header-mega-menu-columns) - $gutter-double;
    max-width: calc(100% - #{$header-dropdown-padding-small * 2});
    padding: $header-dropdown-padding-small 0;

    &.animating,
    &.visible {
      display: flex;
    }
  }
}

//-- Applies to drill down --//
.header-dropdown-menu {
  @extend %header-box-shadow;
  padding: $header-dropdown-padding-small 0;
  background-color: $header-background;

  &.submenu {
    position: absolute;
    top: 50%;
    left: calc(100% - #{$gutter-third});
    min-width: $header-dropdown-shop;
  }

  a {
    font-weight: get-font-weight($weight: "medium");
    text-transform: uppercase;
  }

  .dropdown-link-list-item {
    padding: 0 $header-dropdown-padding-small;
    margin: $header-dropdown-padding-small 0;

    &.submenu-item {
      margin: em($header-dropdown-padding-small) 0;
    }

    &.has-children {
      padding-right: 2.25em;
    }

    &:first-child {
      margin-top: 0;
    }

    &:last-child {
      margin-bottom: 0;
    }
  }
}

//-- Applies to mega menu --//
.dropdown-menu-column {
  flex: 0 0 auto;
  width: calc(#{percentage(1 / $header-mega-menu-columns)} - 1px);
  padding: $header-dropdown-padding-small;
  border-right: 1px solid $content-border-color;

  &:nth-child(#{$header-mega-menu-columns}n) {
    border-right: 0;
  }

  &:nth-child(-n+#{$header-mega-menu-columns}) {
    margin-top: 0;
  }

  &:nth-child(#{$header-mega-menu-columns}n + 1) {
    clear: left;
  }

  .mega-menu-item a:hover {
    color: $header-color-accent;
  }
}

/* scss-combine:components/header/quick-cart */
//-- Quick Cart --//
.dropdown-quick-cart {
  right: -$gutter-half;
  left: auto;
  width: $header-dropdown-quick-cart-small;
  max-height: calc(100vh - #{$header-height} - #{$gutter-half});
  overflow-x: hidden;
  overflow-y: auto;
  text-align: left;

  @include breakpoint(m) {
    right: 0;
    width: $header-dropdown-quick-cart-large;
    max-height: calc(100vh - #{$header-height-large} - #{$gutter});
  }
}

.dropdown-column-quick-cart {
  right: 0;
  z-index: 10;
  display: block;
  font-size: $body-font-size;
}

.quick-cart-empty {
  padding: $header-dropdown-padding-small / 2;

  @include breakpoint(xl) {
    padding: $header-dropdown-padding-large / 2;
  }
}

.quick-cart-empty {
  @extend %meta-text-treatment;
  color: $header-color;
}

.quick-cart-item {
  @include layout-group($header-dropdown-padding-small);
}

.quick-cart-item-image-wrapper,
.quick-cart-item-details,
.quick-cart-item-remove-wrapper {
  @include layout-group-item(top)
}

.quick-cart-item-image-wrapper {
  width: 80px;
}

.quick-cart-item-image {
  display: block;
  width: 80px;
  height: 80px;
  background: {
    position: 50% 50%;
    repeat: no-repeat;
    size: cover;
  }

  img {
    @extend %show-for-sr;
  }
}

.quick-cart-item-remove-wrapper {
  width: 18px;
  height: 20px;
  text-align: center;
}

.quick-cart-item-details {
  font-size: em(13px, $body-font-size);
}

.quick-cart-item-title {
  @extend %primary-font, %primary-font-bold;
  margin: 0;
  font-size: 1em;
  line-height: 1.2;
  text-transform: uppercase;

  a {
    @include anchor-underline('none', $header-color, $header-color-accent)
  }
}

.quick-cart-item-quantity {
  @extend %primary-font-normal;
  display: inline-block;
  margin-left: 5px;
  font-size: em(10px, 13px);
}

.quick-cart-item-brand {
  @extend %meta-text-treatment;
  display: block;
  margin-top: 4px;
  margin-bottom: 2px;
  font-size: em(10px, 13px);
  line-height: 1.3;
}

.quick-cart-item-price {
  @extend %primary-font-bold;
  display: block;
  font-size: em(13px, $body-font-size);
}

.quick-cart-item-remove {
  display: block;
  padding: 0 5px;

  svg {
    vertical-align: top;

    &,
    use {
      width: 10px;
      height: 10px;
      transition: fill 0.4s $ease-out-quad;
      fill: $meta-color;
    }
  }

  &:hover use {
    fill: $heading-color;
  }
}

//-- Cart totals --//
.quick-cart-totals {
  padding: 0 $header-dropdown-padding-small;

  .cart-total-item {
    padding-top: 0;

    &:first-child {
      padding-top: $header-dropdown-padding-large / 2;
      border-top: 1px solid $content-border-color;
    }
  }

  .cart-total-item-label {
    text-align: left;
  }

  .cart-total-item-label,
  .cart-total-item-value {
    @extend %primary-font, %primary-font-normal;
    font-size: em(14px, $body-font-size);
  }
}

//-- Cart / Checkout buttons --//
.quick-cart-footer {
  @include layout-group($header-dropdown-padding-small);
  border-bottom: 1px solid $content-border-color;

  @include breakpoint(xl) {
    border-spacing: $header-dropdown-padding-small $header-dropdown-padding-small;
  }

  .quick-cart-footer-cell {
    display: table-cell;
  }
}

/* scss-combine:components/header/currency */

.dropdown-currency {
  right: 0;
  left: auto;
  min-width: $header-dropdown-currency;
  padding: $header-dropdown-padding-small;
  text-align: left;

  .dropdown-link-list-item {
    padding-top: 5px;
    padding-bottom: 5px;

    &:last-child {
      padding-bottom: 0;
    }

    &:first-child {
      padding-top: 0;
    }
  }
}

/* scss-combine:components/header/mobile-nav */
//-- Outer Wrapper --//
.navigation-wrap {
  position: absolute;
  top: 0;
  z-index: map-get($zindex, navigation-wrap);
  width: $mobile-menu-width-xs;
  height: 100vh;
  padding: 0;
  overflow-y: hidden;
  border-right: 1px solid $mobile-menu-border;
  opacity: 0;
  transition: all 0.4s $ease-out-quad;

  @include breakpoint(s) {
    width: $mobile-menu-width-s;
  }

  @include breakpoint(l-up) {
    background: transparent;
    opacity: 0;
  }

  .mobile-nav-open & { opacity: 1; }

  .mobile-nav-closed & {
    z-index: -2;
    background: transparent;
  }
}

//-- Menu Offsets --//
.mobile-nav-open {
  .main-header,
  .main-content,
  .main-footer {
    transform: translateX($mobile-menu-width-xs);

    @include breakpoint(s) {
      transform: translateX($mobile-menu-width-s);
    }
  }
}

//-- Inner menu --//
.mobile-nav-wrap {
  position: relative;
  top: 0;
  left: 0;
  z-index: -1;
  width: $mobile-menu-width-xs;
  height: 100vh;
  padding: 0;
  margin: 0;
  overflow: hidden;
  background-color: $header-background;
  transform: translateX(-$mobile-menu-width-xs);
  transition: all 0.2s $ease-out-quad;

  @include breakpoint(s) {
    width: $mobile-menu-width-s;
    transform: translateX(-$mobile-menu-width-s);
  }

  .mobile-nav-open & {
    z-index: 2;
    overflow-y: auto;
    transform: translateX(0);
  }
}

//------ Mobile Nav Header ------//
//-- Search Form --//
.mobile-search {
  position: relative;
  padding: $mobile-menu-padding;

  .mobile-search-submit {
    position: absolute;
    top: $mobile-menu-padding;
    bottom: $mobile-menu-padding;
    left: $mobile-menu-padding;
    padding: $gutter-third;
    background: transparent;
    border: 0;
  }

  .search-submit-icon {

    &,
    use {
      width: $mobile-menu-search-icon;
      height: $mobile-menu-search-icon;
    }

    use {
      transition: fill 0.5s $ease-out-quad;
      fill: $input-color;
    }

    &:hover,
    &:active,
    &:focus { fill: $header-color; }

  }

  .form-inline-message,
  .form-field-title {
    @extend %show-for-sr;
  }

  .form-input {
    padding-right: $mobile-menu-search-icon + $gutter-third;
    padding-left: $mobile-menu-search-icon + $gutter-third;
    font-size: em(12px, $body-font-size);
    line-height: 1;
    text-align: center;
  }
}

//-- Header Buttons --//
.mobile-header-buttons {
  width: 100%;
  padding: $mobile-menu-padding;
  font-size: 0;
  border-top: 1px solid $mobile-menu-border;

  .button {
    @extend %button-small;
    position: relative;
    z-index: 1;
    display: inline-block;
    width: 50%;
    font-size: 10px;
    color: $mobile-menu-buttons;
    background-color: $header-background;
    border-color: $mobile-menu-buttons;
    border-width: 2px;

    &:hover {
      z-index: 10;
      background: $mobile-menu-color-light;
    }

    &:last-child {
      margin-left: -1px;
    }
  }
}

//scss-lint:disable SelectorDepth
.mobile-nav {
  display: block;
  width: 100%;
  font-size: em(12px, $body-font-size);
  border-bottom: 1px solid $mobile-menu-border;

  .button-open-submenu {
    top: 0;
    right: 0;
    bottom: 0;
    width: auto;
    height: 100%;
    padding: 0 15px;
  }

  .nav-menu-item {
    a {
      display: block;
      padding: $mobile-menu-padding;
      font-size: 1em;
      line-height: 1.4;
      color: $header-color;
      text-transform: uppercase;
      border-top: 1px solid $mobile-menu-border;
    }

    &.has-children > a {
      padding-right: $mobile-menu-dropdown-icon * 2.5;
    }
  }

  .submenu a {
    background-color: $mobile-menu-color-light;
    transition: all 0.5s $ease-out-quad;

    &:active,
    &:hover {
      background-color: contrast($mobile-menu-color-light, 5%);
    }
  }

  .submenu .submenu a {
    background-color: $mobile-menu-color-medium;
    border-top-color: contrast($mobile-menu-color-medium, 10%);

    &:active,
    &:hover {
      background-color: contrast($mobile-menu-color-medium, 5%);
    }
  }

  .submenu .submenu .submenu a {
    background-color: $mobile-menu-color-dark;
    border-top-color: contrast($mobile-menu-color-dark, 10%);

    &:active,
    &:hover {
      background-color: contrast($mobile-menu-color-dark, 5%);
    }
  }
}


/* scss-combine:components/header/submenu-button */
//-- Menu items with children --//
.nav-menu-item {
  position: relative;
}

//-- Submenu Button--//
.button-open-submenu {
  position: absolute;
  top: 0.3em;
  right: 1.25em;
  width: 0.8em;
  height: 0.8em;
  padding: 0;
  color: inherit;
  background: transparent;
  border: 0;
  opacity: 1;

  &:hover {
    opacity: 1;

    use {
      fill: $header-color-accent;
    }
  }

  &:focus { outline: 0; }

  &.active {

    .icon-increment-vertical {
      transform: scale(1, 0);
    }

  }

  svg {
    display: block;
    width: 0.8em;
    height: 0.8em;
    margin-top: 0;
    transition: fill 0.2s $ease-out-quad;
    fill: $header-color;
  }
}

//-- Submenu--//
.submenu {
  display: none;
  transition: height 0.2s ease 0s, opacity 0.2s ease 0.1s;

  &.animating,
  &.visible {
    display: block;
  }

  // Initial State
  &.animating {
    height: 0;
    opacity: 0;
  }

  &.animating-out {
    transition: height 0.2s ease 0s, opacity 0.1s ease 0s;
  }

  // Final State
  &.visible {
    opacity: 1;
  }
}

.submenu-item {

  a {
    display: inline-block;
    font-size: 0.9em;
    line-height: 1.2em;
  }
}

/* scss-combine:components/footer */
//------ Modal Wrappers ------//
.footer-modals-wrapper {
  display: none;
  visibility: hidden;
}

.footer-container {
  font-size: em($footer-font-base, $body-font-size);
  background-color: $footer-background;

  @if ($footer-background == $newsletter-background) {
    border-top: 1px solid $footer-border-color;
  }

  a {
    color: $footer-primary;
    transition: all 0.2s $ease-out-quad;

    &:hover {
      color: $footer-secondary;
    }
  }
}

.footer-navigation {
  @extend %clearfix;
  position: relative;
  padding-top: $gutter-double;
  padding-bottom: $gutter-double;

  @include breakpoint(ms) {
    padding-bottom: $gutter-half;
  }
}

//-- Styles for the footer payment icons / attribute area --//
.footer-interaction {
  @extend %clearfix;
  padding-top: $gutter-half;
  padding-bottom: $gutter-double;
  margin-top: $gutter-third;

  @if lightness($footer-background) > 50% {
    border-top: 1px solid $content-border-color;
  } @else {
    border-top: 1px solid contrast($footer-background, 25%);
  }

  @include breakpoint(m) {
    margin-top: $gutter-double;
  }
}

.footer-attribution {
  @extend %tertiary-font;
  color: $footer-secondary;

  @include breakpoint(s) {
    @include span(6 of 12 first);
  }

  a {
    color: $footer-tertiary;
  }

  .footer-credits {
    display: block;
  }
}

.footer-payment-icons {
  @include breakpoint(m) {
    @include span(6 of 12);
    text-align: right;
  }
}

//-- Return to the top ofthe page --//
.footer-back-to-top {
  position: absolute;
  top: -30px;
  right: 0;
  display: inline-block;
  width: em(60px, 14px);
  height: em(60px, 14px);
  background: $primary-button-background;
  border-radius: 100%;
  transform: rotate(-90deg);
  transition: fill 0.5s $ease-out-quad;

  svg {
    @extend %subpixel-smooth;
    position: absolute;
    left: 50%;
    display: block;
    max-width: 25px;
    max-height: 100%;
    transform: translateX(-50%);
    fill: $primary-button-color;
  }

  &:hover {
    background: $primary-button-accent-background;
  }
}

/* scss-combine:components/footer/footer-recent-posts */
.footer-blog-recent-posts {
  @extend %clearfix;
  padding-top: $gutter;
  padding-bottom: $gutter;
  border-top: 1px solid $content-border-color;

  @include breakpoint(m) {
    padding-top: $gutter-double;
    padding-bottom: $gutter-double;
  }

  @if($header-enable-border){
    &:first-child {
      border-top: 0;
    }
  }
}

.footer-recent-posts-header {
  padding-bottom: $gutter;
  text-align: center;

  @include breakpoint(m) {
    padding-bottom: $gutter-double;
  }
}

/* scss-combine:components/footer/footer-navigation */
//-- Styles for the Footer Navigation / Meta area --//
.footer-column {
  @include breakpoint(xs) {
    @include squish(1);
    padding-top: $gutter;

    &:first-child {
      padding-top: 0;
    }
  }

  @include breakpoint(s-only) {
    @include gallery(6 of 12);
    padding-top: $gutter;

    &:nth-child(1),
    &:nth-child(2) {
      padding-top: 0;
    }
  }

  @include breakpoint(ms) {
    @include span(4 of 12);
    padding-top: $gutter;

    &:nth-child(1),
    &:nth-child(2) {
      padding-top: 0;
    }

    &:first-child {
      @include span(8 of 12 first);
    }
  }

  @include breakpoint(ms-only) {

    &:nth-child(3) {
      @include first();
      clear: both;
    }
  }

  @include breakpoint(m) {
    @include span(2);
    padding-top: 0;

    &:first-child {
      @include span(4 first);
      @include first();

      .alternate-footer-layout & {
        @include span(6 first);
      }
    }
  }

  .footer-contact-address,
  .footer-contact-phone {
    @extend %tertiary-font;
  }
}

.footer-title {
  @extend %as-h6, %secondary-font, %secondary-font-normal;
  display: block;
  margin-bottom: $gutter / 2;
  color: $footer-secondary;
  text-transform: none;
}

.footer-contact-address {
  margin-bottom: $gutter / 2;
  font-style: normal;
  color: $footer-secondary;
}

.footer-contact-phone {
  color: $footer-secondary;
}

.footer-payment-icons,
.footer-social-icons {
  li {
    display: inline-block;
    margin-bottom: $gutter / 2;
    margin-left: $gutter / 2;
  }

  a {
    border-bottom: 0;
  }
}

.footer-social-icons {
  margin-left: -$gutter / 2;
}

.footer-payment-icon,
.footer-social-icon {
  width: em(30px);
  height: em(30px);

  use {
    transition: all 0.2s $ease-out-quad;
    fill: $footer-secondary;

    a:hover & {
      fill: $footer-primary;
    }
  }
}

.footer-link-list {

  li {
    margin-top: (em(30, $body-font-size) - 1em) / 2;
    line-height: 145%;

    &:first-child {
      margin-top: 0;
    }
  }

  a {
    @extend %primary-font-bold;
    @include smallcaps(1px);
    @include anchor-underline('on-hover', $footer-primary, $footer-primary);
    font-size: em(12px, $footer-font-base);
    line-height: 115%;

  }
}

/* scss-combine:components/footer/footer-attribution */

/* scss-combine:components/footer/footer-newsletter */
.footer-newsletter {
  padding-top: em(65px);
  padding-bottom: em(65px);
  text-align: left;
  background-color: $newsletter-background;
  border-top: 1px solid $content-border-color;

  @include breakpoint(m) {
    padding-top: em(80px);
    padding-bottom: em(80px);
  }

  .layout-container {
    width: $newsletter-width;
    max-width: 100%;
    margin: 0 auto;
  }

  @if($alternate-style-for-newsletter == false){
    .template-account &,
    .template-blog &,
    .template-brands &,
    .template-cart &,
    .template-contains &,
    .template-giftcertificates &,
    .template-page &,
    .template-newsletter_subscribe {
      border-top: 0;
    }
  }
}

.footer-newsletter-form {
  position: relative;

  @include breakpoint(s-down) {

    .form-action {
      margin-top: $gutter;
    }
  }

  @include breakpoint(ms) {
    @include layout-group();

    .form-field,
    .form-action {
      @include layout-group-item(middle);
    }

    .form-action {
      width: 160px;
      overflow: hidden;
    }

    .form-input,
    .button {
      height: 58px;
      max-height: 100%;
    }
  }

  .form-field-title {
    @extend %show-for-sr;
  }

  .form-input {
    padding: em($gutter-third) $gutter-half;
    font-size: em(18px);
    color: $newsletter-input-color;
    background-color: $newsletter-input-background;
    border-color: $newsletter-input-border;

    &::placeholder {
      @extend %secondary-font;
      @extend %secondary-font-normal;
    }
  }

  .form-inline-message {
    position: absolute;
    padding-top: $gutter-half;
  }
}

/* scss-combine:components/card-item */
//-- Card Grid --//

.cards-row {
  @extend %clearfix;

  + .cards-row {
    margin-top: gutter();
  }
}

.alternate-card-item,
.card-item {

  &:first-child {
    margin-top: 0;
  }

  .row-of-3 & {
    @include breakpoint(xs) {
      @include span(full);
      margin-top: gutter();
    }

    @include breakpoint(s) {
      @include gallery(6 of 12);
      margin-top: gutter();

      &:nth-child(-n+2) {
        margin-top: 0;
      }
    }

    @include breakpoint(ms) {
      @include gallery(4 of 12);
      margin-top: gutter();

      &:nth-child(-n+3) {
        margin-top: 0;
      }
    }
  }

  .row-of-2 & {
    @include breakpoint(xs) {
      @include span(full);
      margin-top: gutter();
    }

    @include breakpoint(s) {
      @include gallery(6 of 12);
      margin-top: gutter();

      &:nth-child(-n+2) {
        margin-top: 0;
      }
    }
  }
}

//-- Inside Card --//
.card-item-thumbnail {
  @include aspect-ratio(map-get($card-image, width) map-get($card-image, height));
  display: block;
  background: 50% 50% transparent no-repeat;
  background-size: cover;

  &.no-image {
    border-top: 1px solid $content-border-color;
    border-right: 1px solid $content-border-color;
    border-left: 1px solid $content-border-color;

    .alternate-card-item & {
      border-width: 0;
    }
  }

  img {
    @extend %show-for-sr;
  }
}

.card-item-details {
  padding: $gutter-half 0;
  text-align: center;
  border: {
    right: 1px solid $content-border-color;
    bottom: 1px solid $content-border-color;
    left: 1px solid $content-border-color;
  }

  .hide-image & {
    padding: $gutter $gutter-half;
    border-top: 1px solid $content-border-color;
  }

  .alternate-card-item & {
    text-align: left;
    border-width: 0;
  }
}

.card-item-title {
  @extend %as-h3;
  margin-bottom: 0;

  .hide-image & {
    margin-top: 0;
  }

  .small-headers & {
    font-size: $h3-font-size * 0.8;
  }
}

.card-item-content,
.card-item-title,
.card-item-details .button {
  margin-top: $gutter-half;
}

.card-item-content {
  @extend %tertiary-font;
}

//-- Alternate Card adjustments --//
.alternate-card-item {

  .card-item-link {
    @extend %meta-text-treatment;
    @include anchor-underline("on-hover", $heading-color, $body-color-alt);
    position: relative;
    display: inline-block;
    margin-top: $gutter-half;
    font-size: em(12px, $body-font-size);
    font-weight: get-font-weight($weight: "bold");
    transition: all 0.4s $ease-out-quad;

    &:hover svg {
      fill: $body-color-alt;
    }

    svg {
      position: absolute;
      top: 1px;
      right: em(-30px, $body-font-size);
      width: em(25px, $body-font-size);
      height: em(20px, $body-font-size);
      line-height: 1;
      transition: fill 0.4s $ease-out-quad;
    }
  }
}

/* scss-combine:components/breadcrumbs */

.page-breadcrumbs {
  @extend %collection-header-list;
  padding-top: $gutter;
  padding-bottom: $gutter;

  .breadcrumb-item { display: inline-block; }

  .breadcrumb-label {
    @extend %collection-header-list-item;
    letter-spacing: em(2px, 12px);
    opacity: 1;
    transition: all 0.4s $ease-out-quad;

    &.is-active {  border-color: transparent; }
  }

  .is-active { opacity: 0.5; }
}

/* scss-combine:components/pagination */

.pagination {
  @extend %meta-text-treatment;
  @include layout-group();
  width: 100%;
}

.pagination-item {
  @include layout-group-item(middle);
  width: percentage(1 / 2);
  table-layout: fixed;

  @include breakpoint(ms) {
    width: percentage(1 / 3);
  }

  a {
    @include smallcaps();
    display: inline-block;
    font-size: em(12, $body-font-size);
    color: $tab-color;
    transition: all 0.5s $ease-out-quad;

    &:hover {
      color: $tab-color-active;

      //scss-lint:disable NestingDepth
      use { fill: $tab-color-active; }
    }
  }
}

.pagination-count {
  display: none;
  text-align: center;

  @include breakpoint(ms) {
    display: table-cell;
  }
}

.pagination-next {
  text-align: right;
}

.pagination-links {
  text-align: center;
}

.pagination-link-item {
  display: inline-block;
  padding-right: $gutter-third / 2;
  padding-left: $gutter-third / 2;

  &:first-child {
    padding-left: 0;
  }

  &:last-child {
    padding-right: 0;
  }

  a {
    @extend %tab-link;
    padding-right: $gutter-third / 2;
    padding-left: $gutter-third / 2;

    &.active {
      @extend %tab-link-active;
    }
  }
}

.pagination-page {
  position: relative;
}

.pagination-icon {
  position: relative;
  top: -1px;
  display: inline-block;
  width: em(25px, $body-font-size);
  height: em(20px, $body-font-size);
  vertical-align: middle;

  .pagination-previous & {
    transform: rotate(-180deg);
  }

  use {
    transition: fill 0.5s $ease-out-quad;
    fill: $tab-color;
  }
}

/* scss-combine:components/product/images */
// Product Images
.product-slideshow {
  display: block;
  float: left;
  width: 100%;
  transform: translate3d(0, 0, 0);

  @include breakpoint(m-down) {
    text-align: center;
  }
}

.product-slideshow-images {
  position: relative;
  min-height: 400px;

  @include breakpoint(m-down) { min-height: 20px; }

  .loading-spinner {
    @include centerer();
    top: 300px;
    opacity: 1;
    visibility: visible;
    transition: opacity 0.3s $ease-out-quad;

    @include breakpoint(m-down) { display: none; }

    .quick-shop & { display: none; }
  }

  &.flickity-enabled {
    min-height: 0;

    > .product-single-sale-badge { display: block; }

    > .loading-spinner {
      opacity: 0;
      visibility: hidden;
    }
  }

  .product-single-sale-badge {
    @extend %subpixel-smooth, %meta-text-treatment;
    position: absolute;
    bottom: 0;
    left: 0;
    z-index: 10;
    display: none;
    padding: 7px 10px;
    font-size: em(13, 16);
    color: $product-item-sale-color;
    pointer-events: none;
    background-color: $product-item-sale-background;
  }

  .product-slideshow-image {
    display: none;
    width: 100%;
    height: auto;
    text-align: center;
    
    &:first-child { 
      display: block;
      visibility: hidden;
    }

    img {
      display: block;
      margin: 0 auto;
    }
  }

  .flickity-viewport {
    margin-bottom: 0;

    .product-slideshow-image {
      display: block;
      visibility: visible;
    }
  }

  .flickity-page-dots {
    position: absolute;
    bottom: $gutter-half;
    left: 50%;
    display: none;
    width: calc(100% - #{($zoom-icon-size + ($zoom-icon-padding * 3)) * 2});
    transform: translateX(-50%);
  }

  .flickity-prev-next-button {
    display: none;

    @include breakpoint(m) {
      width: $carousel-arrow-size / 1.3;
      height: $carousel-arrow-size / 1.3;
    }
  }

  .flickity-prev-next-button,
  .flickity-page-dots {
    opacity: 0;
    transition: opacity 0.4s $ease-out-quad;

    .visible-controls & { display: block; }
    .product-slideshow:hover & { opacity: 1; }
  }
}

.product-image-zoom {
  @extend %button-base, %button-secondary;
  position: absolute;
  right: 0;
  bottom: 0;
  display: inline-block;
  padding: $zoom-icon-padding;
  border-width: 0;
  opacity: 0;
  transition: all 0.4s $ease-out-quad;

  svg {
    display: block;
    width: $zoom-icon-size;
    height: $zoom-icon-size;
    transition: all 0.4s $ease-out-quad;
    fill: $secondary-button-color;
  }

  &:hover svg { fill: $secondary-button-accent-color; }

  .product-slideshow:hover & { opacity: 1; }
}

// Product Thumbnails
.product-thumbnails {
  @extend %clearfix;
  display: none;
  margin-right: - $gutter-half;
  margin-left: - $gutter-half;

  @include breakpoint(m-down) { font-size: 0; }

  .flickity-enabled + & { display: block; }
}

.product-thumbnail {
  @include aspect-ratio(1 1);
  display: inline-block;
  float: left;
  width: calc(25% - #{$gutter});
  padding-bottom: calc(25% - #{$gutter});
  margin-top: $gutter;
  margin-right: $gutter-half;
  margin-left: $gutter-half;
  cursor: pointer;
  background-color: transparent;
  background-position: 50% 50%;
  background-size: cover;
  transition: opacity 0.2s $ease-out-quad;

  @include breakpoint(m-down) {
    display: inline-block;
    float: none;
    margin: 10px 5px;
    vertical-align: top;
  }

  &:hover { opacity: 0.75; }
}

/* scss-combine:components/product/options */
//-- Set Items Only--//
%option-set-item {
  position: relative;
  display: block;
  float: left;
  margin-right: map-get($product-option, space);
  margin-bottom: map-get($product-option, space);
}

.form-field-customizations,
.form-field-options {
  padding: $product-gutter-half 0;

  &.form-field-swatch {
    padding-bottom: $product-gutter-half - map-get($product-swatch, space);
  }

  .option-unavailable {

    &,
    &:hover {
      opacity: 0.5;
    }

    .form-label-text { text-decoration: line-through; }
  }

  @include breakpoint(l) {
    display: block;
    max-width: $input-max-width;
    margin: 0 auto;

    .modal-quick-shop & {
      max-width: 100%;
    }
  }

  @if ($content-same-as-background == false) {
    border-bottom: 1px solid $content-border-color;
  }
}

//-- Date Fields --//
.form-field-date {

  .form-field-control {
    @extend %clearfix;
  }

  .form-select-wrapper {
    display: block;
    float: left;
    width: calc(33.33% - 6px);
    margin-right: 9px;

    &:last-child {
      margin-right: 0;
    }
  }
}

//-- Form Rectangle Options --//
.form-field-rectangle {
  .form-field-control {
    @extend %clearfix;
    font-size: 0;
  }

  .form-input {
    @extend %show-for-sr;
  }

  .rectangle {
    display: inline-block;
    margin-right: map-get($product-option, padding);
    font-size: $body-font-size;
  }

  .rectangle-text {
    position: relative;
    z-index: 1;
    display: block;
    height: 55px;
    min-width: 55px;
    padding: 0 map-get($product-option, padding);
    margin-bottom: map-get($product-option, padding);
    margin-left: -1px;
    overflow: hidden;
    line-height: 52px;
    text-align: center;
    text-overflow: ellipsis;
    white-space: nowrap;
    cursor: pointer;
    border: 2px solid $input-border-color;
    transition: all 0.4s $ease-out-quad;
  }

  .rectangle-text:hover {
    color: $body-color-alt;
    border-color: map-get($product-option, hover);
  }

  .form-input:focus + .rectangle-text {
    color: map-get($product-option, selected);
  }

  .form-input:checked + .rectangle-text {
    position: relative;
    z-index: 10;
    color: map-get($product-option, selected);
    border-color: map-get($product-option, selected);
  }
}

//-- Swatch Picker --//
.form-field-swatch {
  .form-field-control {
    @extend %clearfix;
    display: inline-block;
  }

  .form-input,
  .form-label-text {
    @extend %show-for-sr;
  }

  .swatch-wrap {
    position: relative;
    float: left;
    width: map-get($product-swatch, size);
    height: map-get($product-swatch, size);
    margin-right: map-get($product-swatch, space);
    margin-bottom: map-get($product-swatch, space);

    &:last-of-type {
      margin-right: 0;
    }

    &:hover .swatch-pattern-expanded {
      opacity: 1;
      visibility: visible;
    }
  }

  .swatch {
    position: relative;
    display: block;
    width: map-get($product-swatch, size);
    height: map-get($product-swatch, size);
    padding: 0;
    cursor: pointer;
    transition: all 0.4s $ease-out-quad;
    user-select: none;

    &:before,
    &:after {
      position: absolute;
      top: 0;
      left: 0;
      display: block;
      width: map-get($product-swatch, size);
      height: map-get($product-swatch, size);
      content: "";
    }

    &:before {
      z-index: 2;
      box-shadow: inset 0 0 0 1px $border-color;
    }

    &:after {
      z-index: 1;
      box-shadow: inset 0 0 0 3px $content-background;
    }

    &:hover:before { box-shadow: inset 0 0 0 1px map-get($product-option, hover); }
  }

  .form-input:checked + .swatch {
    &:before {
      box-shadow: inset 0 0 0 1px map-get($product-option, selected);
    }

    &:after {
      box-shadow: inset 0 0 0 4px $content-background;
    }
  }


  .swatch-color {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-size: cover;
  }

  .swatch-value {
    font-style: italic;
    color: $meta-color;
    text-transform: capitalize;

    @include breakpoint(m-only) {
      display: block;
      margin-top: 10px;
    }
  }

  .two-colors {
    .secondary {
      top: 50%;
    }
  }

  .three-colors {
    .secondary {
      top: 33.33%;
    }

    .tertiary {
      top: 66.66%;
    }
  }

  .swatch-pattern-expanded {
    position: absolute;
    top: calc(100% + #{map-get($product-swatch, border) * 2});
    left: 50%;
    z-index: 100;
    padding: map-get($product-swatch, border);
    background-color: $content-background;
    border: 1px solid map-get($product-option, hover);
    opacity: 0;
    visibility: hidden;
    transform: translate(-50%, 0);
    transition: opacity 0.4s $ease-out-quad;

    @include breakpoint(ms-down) { display: none; }
  }

  .swatch-pattern-image {
    display: block;
    width: 100px;
    height: auto;
    max-width: 100px;
  }
}

//-- File Upload --//
.form-file-types {
  display: block;
  margin-top: $gutter-third;
}

//-- Product Picklist --//
.form-field-product-list {
  width: 100%;

  .form-field-control {
    padding: $gutter-half;
    text-align: left;
    background-color: $content-background;
    border: 1px solid $border-color;

    .form-label {
      position: relative;
      padding-top: em(5px, $body-font-size);
      margin-top: em(5px, $body-font-size);
      border-top: 1px solid $border-color;
    }

    .form-label:first-child {
      padding-top: 0;
      margin-top: 0;
      border-top: 0;
    }
  }
}

.product-picklist-item,
.product-picklist-no-image {
  position: relative;
  padding: map-get($product-pick-list, padding);
  opacity: 1;
  transition: all 0.2s $ease-out-quad;

  &:last-child {
    &:after {
      display: none;
    }
  }

  .product-picklist-image-wrap {
    padding: map-get($product-pick-list, padding) / 3;
    margin-right: 10px;
    border: 1px solid $border-color;
    transition: all 0.2s $ease-out-quad;
  }

  img {
    display: block;
  }

  &:hover {
    cursor: pointer;
    opacity: 0.7;
  }
}

.form-input.product-picklist-radio,
.product-picklist-item-body,
.product-picklist-image-wrap,
.product-picklist-label-text {
  display: inline-block;
  vertical-align: middle;
}

.product-picklist-radio:checked {
  + .product-picklist-item-body {
    color: $accent-color;

    .product-picklist-image-wrap {
      border-color: $accent-color;
    }

    .form-label-text {
      color: $accent-color;

      //scss-lint:disable NestingDepth
      &:after {
        background-color: $accent-color;
      }
    }
  }
}

.product-picklist-item-body {
  width: 100%;

  &.picklist-none {
    font-style: normal;
    line-height: 1;

    .form-label-text {
      margin: map-get($product-pick-list, padding) 0;
    }
  }
}

.product-picklist-label-text {
  margin-bottom: 0;
  font-style: italic;
  text-transform: none;
}

.product-picklist-image-wrap {
  max-width: map-get($product-pick-list, size);
}

.product-picklist-image {
  display: block;
}


//-- Product Events --//
.product-event-bounds {
  @extend %meta-text-treatment;
  display: inline-block;
  margin-top: $gutter-third / 2;
  font-size: $h6-font-size;
}

/* scss-combine:components/product/price */
.product-price,
.product-item-price,
.price-saved,
.price-withouttax,
.price-with-tax {
  display: block;
  white-space: normal;
}

.price {
  @extend %secondary-font, %secondary-font-normal;
  color: $meta-color;
}

.product-price {
  margin: $gutter-third 0;
}

.price-rrp {
  color: $price-color-alternate;
  text-decoration: line-through;

  + .price-value {
    &:before {
      display: inline-block;
      content: " ";
    }
  }

}

.price-tax-label {
  padding-left: $gutter-third / 2;
}

/* scss-combine:components/product/tabs */
.module-product-tabs {
  background-color: $content-background;
}

.module-product-tabs-header {

  @include breakpoint(ms) {
    border-top: 1px solid $content-border-color;
    border-bottom: 1px solid $content-border-color;
  }
}

.product-tabs {
  font-size: 0;
  text-align: center;
  border-bottom: 0;

  @include breakpoint(s-down) {
    @include clearfix();
  }

  @include breakpoint(ms) {
    text-align: left;
  }
}

.product-tab-title {
  display: inline-block;
  font-size: $body-font-size;

  @include breakpoint(xs) {
    @include span(12 first);
  }
  @include breakpoint(s-only) {
    @include gallery(6)
  }

  @include breakpoint(ms) {
    width: auto;
    margin: 0 0 0 $product-gutter;

    &:first-child {
      margin-left: 0;
    }
  }

  .share-buttons-list-trigger,
  .tab-link {
    font-size: em(12px, $body-font-size);
    text-align: center;
    border-bottom: 2px solid $border-color;

    @include breakpoint(ms) {
      border-bottom: 2px solid transparent;
    }

    @include breakpoint(m-down) {
      padding: ($product-gutter-half / 2) 0;
    }
  }

  .share-buttons-list-trigger {
    &,
    &:hover {
      border-bottom: transparent;
    }
  }
}

.product-tabs-content {
  padding: $product-gutter-half 0;

  .product-reviews,
  .rte {
    @extend %tertiary-font;
  }

  .rte {
    text-align: center;

    @include breakpoint(ms) {
      text-align: left;
    }
  }
}

//-- Information Tab --//
.product-information-block {
  @extend %clearfix;
  display: block;
  vertical-align: middle;
}

.product-information-name,
.product-information-value {
  display: inline-block;
  float: left;
}

.product-information-name {
  clear: both;
}

.product-information-value {
  display: inline-block;
  margin-left: 5px;
}

//-- Video Tab --//
.product-video-container {
  margin-top: $gutter;

  &:first-child {
    margin-top: 0;
  }
}

/* scss-combine:components/product/reviews */
//-- Review Header --//
.review-header {
  vertical-align: middle;

  .review-count,
  .review-link,
  .rating-stars {
    display: inline-block;
    line-height: 1;
    vertical-align: middle;
  }

  .review-count {
    padding-left: $gutter-third / 2;
  }

  .rating-stars {
    padding-bottom: 3px;
  }

  .review-link {
    @include anchor-underline("off-hover", $body-color, $accent-color);
    transition: all 0.2s $ease-out-quad;

    @include media($min: $breakpoint-ms, $max: $breakpoint-l) {
      display: inline-block;
    }

    @include breakpoint(l) {
      margin-left: $gutter;
    }
  }
}

.review-header-text,
.review-header-information {
  display: block;

  @include breakpoint(m) {
    display: inline-block;
  }
}

.review-header-information {
  font-family: $body-font;
  font-size: em($h6-font-base, $h4-font-base);
  font-weight: $body-font-weight;
  color: $body-color;

  @include breakpoint(l) {
    float: right;
  }
}

//-- Review Items --//
.review-item-stars {
  margin-bottom: $gutter-third;

  .review-item-score,
  .rating-stars {
    display: inline-block;
    line-height: 1;
    vertical-align: middle;
  }

  .review-item-score {
    margin-left: $gutter-third;
  }
}

.review-item-title {
  margin-top: 1em;
  margin-bottom: $gutter-third;
}

.review-item-body {
  margin: 0;
}

//-- Review Modal --//
.input-stars-wrapper {
  position: relative;
  width: 100%;

  .form-inline-message {
    display: block;
    margin-top: 0.5em;
    text-align: center;
    white-space: nowrap;

    + .form-inline-message {
      display: none;
    }
  }
}

.input-stars {
  width: 106px;
  max-width: 100%;
  margin-right: auto;
  margin-left: auto;

  &.form-field-error {
    padding-bottom: 20px;
  }

  .star {
    float: right;
    width: $star-size-medium;
    height: $star-size-medium;
    margin: 0 2px;
    cursor: pointer;
    transition: fill 0.2s $ease-out-quad;
    fill: contrast($star-color, 80%);

    &:last-of-type {
      margin-left: 0;
    }

    &:first-of-type {
      margin-right: 0;
    }

    &:hover,
    &:hover ~ .star svg {
      fill: $star-color;
    }
  }

  > input:checked {
    ~ label svg {
      fill: $star-color;
    }
  }
}

//-- Animations --//
.review-item { transition: opacity 0.4s $ease-out-quad; }

/* scss-combine:components/product/quick-shop */
.modal-quick-shop {
  opacity: 0;
  transition: opacity 0.5s $ease-out-quad;

  .loaded & {
    opacity: 1;
  }

  .modal-content {
    padding: $gutter;
  }

  .product-column-left {
    margin-top: $modal-icon-size + $gutter-third;
  }

  @include breakpoint(ms) {
    .product-column-left {
      width: percentage(6 / 12);
      margin-top: 0;
    }

    .product-column-right {
      width: percentage(6 / 12);
    }
  }

  .product-title {
    font-size: $h3-font-size;
  }

  .product-description {
    @extend %tertiary-font;
    font-size: $h5-font-size;
    font-weight: get-font-weight($weight: "light");
  }

  .module-product-tabs {
    margin-top: $gutter;

    .layout-container {
      padding: 0;
    }
  }
}

.modal-wrapper {
  .loading-spinner {
    opacity: 1;
    transition: opacity 0.1s $ease-out-quad;
  }

  &.loaded .loading-spinner {
    opacity: 0;
  }
}

.quickshop-messages {
  @extend %clearfix;
  width: 100%;

  .alert {
    margin-bottom: $gutter;
    overflow: hidden;
  }
}

/* scss-combine:components/product-item */
//-- Product Item Top Section --//
@if($alternate-style-for-product-item) {
  .product-item-top {
    border: $gutter-half solid $product-page-background;
  }

  .product-item-details {
    padding-bottom: $gutter-half;
  }
}

.product-item-top {
  @extend %product-item-image;
}

.product-item-badges {
  @extend %product-item-badges;
}

//-- Item Actions --//
.product-item-rating,
.product-item-quickshop,
.product-item-compare,
.product-item-remove {
  @extend %meta-text-treatment;
  position: absolute;
  opacity: 0;
  transition: all 0.5s $ease-out-quad;
  backface-visibility: hidden;

  .product-item-top:hover & {
    opacity: 1;
  }

  .no-js & {
    display: none;
  }
}

.product-item-quickshop {
  @extend %item-overlay-button;
}

.product-item-remove {
  top: $gutter-half;
  right: $gutter-half;
  display: block;

  //scss-lint:disable QualifyingElement
  input[type=submit] {
    @extend %button-base, %button-secondary;
    display: block;
    padding: 0 $gutter-third / 2;
    font-size: $h3-font-size;
    line-height: 1;
  }

  .product-item-thumbnail:hover & {
    opacity: 1;
  }
}

.product-item-compare {
  top: calc(60% + 40px);
  display: block;
  width: 100%;
  font-size: em(12px, $body-font-size);
  text-align: center;

  @include breakpoint(s-down) {
    position: absolute;
    display: none;
  }

  .form-label { display: inline-block; }

  .form-label-text {
    font-size: 1em;
    letter-spacing: em(1px, 12px);
  }

  .form-checkbox + .form-label-text {
    &,
    &:hover {
      @include anchor-underline("on-hover", $body-color, $heading-color);
      display: inline-block;
      width: auto;
      color: $product-item-compare;
      transition: all 0.4s $ease-out-quad;
    }

    &:before {
      @include icon-plus($product-item-compare);
      position: relative;
      top: 1px;
    }
  }

  .form-checkbox:checked + .form-label-text {
    &,
    &:hover {
      color: $product-item-compare-alt;
    }

    &:before {
      @include icon-plus($product-item-compare-alt, transparent);
    }
  }

  .product-item-top:hover & {
    //scss-lint:disable NameFormat
    @if $alternate-product-item-size {
      top: calc(50% + 30px);
    } @else {
      top: calc(50% + 40px);
    }
  }
}

.product-item-rating {
  bottom: -$gutter-third;
  display: block;
  width: 100%;
  text-align: center;

  .product-item-top:hover & {
    bottom: $gutter-third;
    opacity: 1;
  }
}

//-- Product Item Information Section --//
.product-item-details {
  padding-top: $gutter-half;
  text-align: center;
}

.product-item-brand {
  display: block;
  margin: em(7px, $body-font-size) 0;
  color: $body-color;
}

.product-item-title {
  @extend %product-item-title;
}

.product-item-price {
  font-size: em(16px);
}

/* scss-combine:components/product-item-grid */
//-- Column Setup--//
.product-item {
  @extend %product-item;

  //-- 3 items across --//
  .collection-row-of-3 & {
    @extend %product-item-grid-3;
  }

  //-- 4 items across --//
  .collection-row-of-4 & {
    @extend %product-item-grid-4;
  }
}

.product-grid {
  @extend %clearfix;
  padding-top: gutter();
  padding-bottom: gutter();
}

/* scss-combine:components/rating-stars */

.rating-stars {
  &.small-stars {
    min-height: $star-size-small;
  }

  &.medium-stars {
    min-height: $star-size-medium;
  }

  &.large-stars {
    min-height: $star-size-large;
  }
}

.rating-star {
  display: inline-block;
  line-height: 1;
  vertical-align: middle;

  .small-stars & {
    width: $star-size-small;
    height: $star-size-small;
  }

  .medium-stars & {
    width: $star-size-medium;
    height: $star-size-medium;
  }

  .large-stars & {
    width: $star-size-large;
    height: $star-size-large;
  }
}

.rating-star-full {
  use {
    fill: $star-color;
  }
}

.rating-star-empty {
  use {
    fill: contrast($star-color, 75%);
  }
}

/* scss-combine:components/share-links */
.share-buttons {
  position: relative;

  &.tab-title { display: inline-block; }
}

.share-button-item,
.share-buttons-list-trigger {
  vertical-align: middle;
  background: $share-color-button-base;
  border-color: transparent;
  transition: all 0.5s $ease-out-quad;
}

.share-buttons-list-trigger {
  @extend %tab-link;
  color: $share-color-button;

  &.active {
    color: $share-color-active;

    use {
      fill: $share-color-active;
    }
  }

  &:hover use {
    fill: $share-color-active;
  }

  use {
    transition: fill 0.5s $ease-out-quad;
    fill: $share-color-default;
  }
}

.share-button-icon {
  position: absolute;
  top: 50%;
  left: em(12px);
  width: em(23px, $body-font-size);
  height: em(26px, $body-font-size);
  margin-top: em(-26px, $body-font-size) / 2;

  use {
    max-width: 100%;
    max-height: 100%;
    fill: $share-color-button;
  }

  @include breakpoint(ms) {
    left: em(-55px, $body-font-size) / 2;
  }
}

.share-button-text {
  margin-left: $gutter-half / 2;
}

.share-buttons-list {
  position: absolute;
  right: 0;
  z-index: map-get($zindex, body-menus);
  min-width: 200px;
  padding: 0;
  margin: 0;
  font-size: $body-font-size;
  transition: all 0.5s $ease-out-quad;

  @include breakpoint(s-down) {
    width: 100%;
  }

  li {
    padding: 0;
    margin: 0;
    list-style: none;
  }

  .show-list-top & {
    bottom: em(42px, $body-font-size); //12px font, 20px padding, 10px gap

    &.hidden {
      bottom: 0;
    }
  }

  .show-list-bottom & {
    top: calc(100% + 1px);

    &.hidden {
      top: 0;
    }
  }

  &.animating-out,
  &.hidden {
    height: 0;
    overflow: hidden;
    opacity: 0;
    visibility: hidden;
  }

  &.animating {
    overflow: hidden;
  }

  &.visible {
    opacity: 1;
  }
}

.share-button-item {
  display: block;
  padding: $share-button-padding;
  font-size: $body-font-size - 1px;
  line-height: 1;
  background: $share-color-button-accent;
  border-top-width: 0;
  border-bottom-width: 0;

  @include breakpoint(ms) {
    padding-left: $share-button-padding;
  }

  &:first-child {
    border-top-width: 1px;
  }

  &:last-child {
    border-bottom-width: 1px;
  }

  &:hover {
    background: contrast($share-color-button-accent, 5%);
  }

  svg,
  .share-button-text {
    display: inline-block;
    vertical-align: middle;
  }

  svg {
    width: 20px;
    height: 20px;
  }

  .share-button-text {
    line-height: em(20px, $body-font-size - 1px);
  }

  &.share-facebook use {
    fill: $share-color-facebook;
  }

  &.share-twitter use {
    fill: $share-color-twitter;
  }

  &.share-linkedin use {
    fill: $share-color-linkedin;
  }

  &.share-google use {
    fill: $share-color-google;
  }

  &.share-pinterest use {
    fill: $share-color-pinterest;
  }

  &.share-email use,
  &.share-print use,
  &.share-clipboard use {
    fill: $share-color-default;
  }

  .fb-like iframe { max-width: none; }
}

/* scss-combine:components/loading */
.loading {
  @extend %overlay;
  background-color: $loading-background;
}

// http://tobiasahlin.com/spinkit/
.loading-spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  display: block;
  width: 64px;
  height: 64px;
  margin-top: -32px;
  margin-left: -32px;

  &:before,
  &:after {
    position: absolute;
    top: 0;
    left: 0;
    display: inline-block;
    width: 64px;
    height: 64px;
    background-color: $accent-color;
    border-radius: 50%;
    content: "";
    opacity: 0.6;
    animation: bounce 2s infinite ease-in-out;
  }

  &:after {
    animation-delay: -1s;
  }
}

@keyframes bounce {
  0%, 100% {
    transform: scale(0);
  }
  50% {
    transform: scale(1);
  }
}

/* scss-combine:components/modals */
.modal-overlay {
  @extend %overlay;
  background-color: rgba($modal-background-color, 0.85);
}

.modal-wrapper {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: map-get($zindex, main-overlay) + 1;
  display: block;
  width: 100%;
  height: 100vh;
  box-sizing: content-box;
  backface-visibility: hidden;

  > .modal {
    width: 80%;
    max-width: $modal-max-width;
    max-height: 100%;
    margin-right: auto;
    margin-left: auto;
    overflow-y: auto;

    @include breakpoint(s-down) {
      max-height: 100%;
      padding: 0;
    }

    &.modal-quick-shop {
      max-width: 100%;
      transition: margin-top 0.4s $ease-out-quad;
    }
  }
}

.modal-close {
  position: absolute;
  top: $gutter;
  right: $gutter;
  display: inline-block;
  line-height: 1;

  .modal-close-icon {
    display: inline-block;
    width: $modal-icon-size;
    height: $modal-icon-size;
    vertical-align: middle;

    use {
      transition: fill 0.4s $ease-out-quad;
      fill: $modal-accent-color;
    }
  }

  .modal-close-label {
    display: none;
    color: $modal-accent-color;
    transition: color 0.4s $ease-out-quad;

    @include breakpoint(ms) {
      display: inline-block;
      margin-left: 5px;
      line-height: 1;
      vertical-align: middle;
    }
  }

  &:hover {
    .modal-close-label {
      color: $modal-accent-color-active;
    }

    .modal-close-icon {
      //scss-lint:disable NestingDepth
      use {
        fill: $modal-accent-color-active;
      }
    }
  }
}

.modal-content {
  position: relative;
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  background: $modal-content-background;
  box-sizing: border-box;

  @include breakpoint(ms-down) {
    overflow-y: auto;
  }
}

.modal-header,
.modal-form-contents,
.modal-footer {
  padding: $modal-gutter;

  @include breakpoint(ms-down) {
    overflow-y: $modal-gutter / 2;
  }
}

.modal-header {
  text-align: center;
}

.modal-heading {
  margin-top: 0;

  &:only-child {
    margin-bottom: 0;
  }

  + p {
    margin-bottom: 0;
  }
}

.modal-form-contents {
  @if ($content-same-as-background == false) {
    border-top: 1px solid $content-border-color;
    border-bottom: 1px solid $content-border-color;
  } @else {
    padding-top: 0;
  }

  + .modal-form-contents {
    border-top: 0;

    @if ($content-same-as-background) {
      padding: ($modal-gutter / 2) $modal-gutter;
    }
  }
}

/* scss-combine:components/masthead */
.masthead-item {
  position: relative;
  width: 100%;
  height: 100%;
  min-height: 100%;
  margin: 0;
  background: {
    position: center;
    repeat: no-repeat;
    size: cover;
  }

  &,
  .masthead-item-content {
    background-color: $masthead-background;
  }

  .masthead-item-content {
    display: table-cell;
    width: 100%;
    padding: $gutter-half;
    text-align: center;
    vertical-align: middle;

    &.has-background-image {
      border-right: 10px solid $content-background;
      border-left: 10px solid $content-background;
    }
  }

  .masthead-item-info {
    display: table;
    width: 100%;
    padding: 0 5%;
    margin-right: auto;
    margin-left: auto;
    vertical-align: middle;
    transition: width 0.2s $ease-out-quad;

    @include breakpoint(ms) {
      width: percentage(10 / 12);
      padding: 0;
    }

    @include breakpoint(m) {
      width: percentage(9 / 12);
    }

    @include breakpoint(l) {
      width: percentage(8 / 12);
    }
  }
}

.masthead-item {
  min-height: map-get($masthead-height, xs);

  @include breakpoint(ms) {
    min-height: map-get($masthead-height, ms);
  }
}

.masthead-item-content {
  height: map-get($masthead-height, xs);

  @include breakpoint(ms) {
    height: map-get($masthead-height, ms);
  }
}

.masthead-item-title {
  @extend %as-h2;
  position: relative;
  display: inline-block;
  margin: 0;
  line-height: 1.2;
  color: $masthead-color;
  white-space: pre-wrap;

  @include breakpoint(s-down) {
    font-size: $h4-font-size;
  }

  @include breakpoint(ms) {
    padding: 0 $gutter-half;
  }
}

.masthead-item-text {
  @extend %tertiary-font;
  margin: 0;
  color: $masthead-color;
  text-align: center;

  @include breakpoint(s) {
    padding-right: $gutter-half;
    padding-left: $gutter-half;
  }

  @include breakpoint(m) {
    padding: 0 $gutter-half;

    &:before {
      display: block;
      width: 100px;
      height: 1px;
      margin: $gutter-half auto;
      font-size: 1px;
      line-height: 1px;
      border-bottom: 1px solid $masthead-color;
      content: "";
    }
  }
}

.masthead-item-link {
  @include button-with-arrow();
  display: inline-block;
}

/* scss-combine:components/search/header */
@include breakpoint(m) {
  .search-page {
    .collection-header { padding-bottom: 0; }
    .collection-navigation { padding-top: 0; }
    .collection-navigation-list li {
      padding-top: 0;
      padding-bottom: 0;
    }

    .tab-title .tab-link {
      padding-top: $gutter + $gutter-half;
      padding-bottom: $gutter + $gutter-half - 2px;
    }
  }
}

.search-tabs {
  border-bottom: 0;

  .tab-title { max-width: inherit; }

  .tab-link {
    display: inline-block;
    opacity: 1;

    @include breakpoint(ms-down) {
      padding-top: 0;
      padding-bottom: 0;
    }
  }
}

/* scss-combine:components/search/masthead */
//-- Masthead --//
.masthead-search {
  .masthead-item-content {
    border-right-width: 0;
    border-left-width: 0;
  }
}

.masthead-search-title {
  @extend %as-h4;
  margin-top: 0;
  margin-bottom: em($gutter-half, $h4-font-base);
  color: $masthead-color;
  text-align: center;

  @include breakpoint(m) {
    font-size: em(36px, $body-font-size);
  }

  + .masthead-search {
    padding-top: em($gutter-half);
  }
}

.masthead-form-toggle {
  @include smallcaps();
  font-size: em(12px, $body-font-size);
  color: $masthead-color;
  border-bottom: 1px solid $masthead-color;
  transition: all 0.4s $ease-out-quad;

  &:hover {
    color: $search-masthead-accent;
    border-bottom-color: $search-masthead-accent;
  }
}

.masthead-search-form {
  position: relative;
  width: calc(100% - #{$gutter});
  height: ($h5-font-size + em($gutter * 2.5));
  max-width: 800px;
  margin-right: auto;
  margin-left: auto;
  overflow: hidden;
  transition: all 0.3s $ease-out-quad;

  .form-field {
    display: block;
    width: 100%;
    padding-bottom: em($gutter);
    margin-top: em($gutter);
  }

  .form-input {
    @extend %as-h5, %secondary-font;
    padding: 0 map-get($search-search-icon, width) + $gutter-third $gutter-half 0;
    color: $masthead-color;
    background-color: transparent;
    border: 0;
    border-bottom: 1px solid $search-masthead-accent;

    @include breakpoint(m) {
      font-size: $h4-font-size;
    }

    &::placeholder {
      color: $masthead-color;
    }
  }

  .form-field-title {
    @extend %show-for-sr;
  }

  .form-field-invalid {

    .form-input {
      background-image: none;
    }

    .form-inline-message {
      position: absolute;
      bottom: - $gutter;
      left: map-get($search-search-icon, width) + $gutter-third;
      color: $masthead-color;
    }
  }

  .form-field-valid .form-input {
    background-image: none;
  }
}

.masthead-search-submit {
  position: absolute;
  top: $gutter;
  right: 0;
  display: inline-block;
  width: map-get($search-search-icon, width);
  height: map-get($search-search-icon, height);
  vertical-align: middle;
  background: transparent;
  border: 0;
}

.masthead-search-submit-icon {
  display: inline-block;
  max-width: 100%;
  max-height: 100%;
  vertical-align: middle;

  use {
    transition: fill 0.2s $ease-out-quad;
    fill: $masthead-color;
  }

  &:hover use {
    fill: $masthead-color;
  }
}

/* scss-combine:components/search/search-information */
.no-content-results {
  padding-right: 0;
  padding-bottom: $gutter;
  padding-left: 0;
  max-width: 100%;
  border-bottom: 1px solid $content-border-color;

  @include breakpoint(m-down) {
    padding-top: $gutter-half;
  }
}

.search-result-item-title {
  margin-top: 0;
  font-size: $h4-font-size;
}

.search-result-item-content {
  margin-bottom: 0;
}

.search-result-item-more {
  @extend %meta-text-treatment;
  @include smallcaps();
  font-size: em(12, $body-font-size);
  color: $body-color;
  border-bottom: 1px solid $body-color;
  transition: all 0.4s $ease-out-quad;

  &:hover {
    color: $body-color-alt;
    border-color: $body-color-alt;
  }

  &:before {
    display: block;
    width: 100%;
    margin-top: $gutter-third / 2;
    content: "";
  }
}


// -- Pages -- //
/* scss-combine:pages/home */
.home-container {
  padding-right: 0;
  padding-left: 0;
  border-top: 0;
}

.products-new,
.products-featured {
  padding-top: $gutter-double;
  padding-bottom: $gutter-double;
}

/* scss-combine:pages/blog */
//-- Main Blog Page --//
.blog-page {
  @extend %clearfix;

  .page-content {
    @include breakpoint(ms) {
      display: table;
      width: 100%;
      table-layout: fixed;
    }
  }
}

//-- Blog, Article Listing --//
.blog-column-articles .blog-item {
  @extend %clearfix;

  @include breakpoint(ms) {
    max-width: $max-width - 200px;
    margin: $gutter-double auto;

    &:first-child {
      margin-top: 0;
    }
  }

  &:last-child {
    margin-bottom: $gutter;
  }

  .blog-item-header,
  .blog-item-content {
    background-color: $content-background;
  }

  .blog-item-header {
    padding: 0;
  }

  .blog-item-content {
    @extend %tertiary-font;
    padding: $blog-gutter;

    @include breakpoint(m) {
      padding: $blog-gutter $blog-gutter * 2 $blog-gutter * 2;
    }
  }

  .blog-item-actions {
    @extend %primary-font;
  }
}

/* scss-combine:pages/blog-post */
//------ Blog Post ------//
.blog-post-page {
  @extend %clearfix;
}

//-- Page Banner --//
.blog-post-featured-image {
  @include aspect-ratio(12 4);
  display: block;
  background: 50% 50% transparent no-repeat;
  background-color: $content-background;
  background-size: cover;
}

//-- Blog Post Structure --//
.blog-post-share,
.blog-post-content,
.blog-post-header {
  @include breakpoint(s-down) {
    @extend %wrapper;
  }

  @include breakpoint(ms) {
    @include span(10);
    @include squish(1);
  }

  @include breakpoint(m) {
    @include span(8);
    @include squish(2);
  }

  @include breakpoint(l) {
    @include span(6);
    @include squish(3);
  }
}

//-- Post Header --//
.blog-post-header {
  padding-top: $blog-gutter;
}

.blog-post-caption {
  padding: $blog-gutter / 2 0;
  border-top: 1px solid $content-border-color;
  border-bottom: 1px solid $content-border-color;
}

.blog-post-title {
  padding-bottom: $blog-gutter / 2;
  margin: 0;
  font-size: $h2-font-size;
}

//-- Post Body Content --//
.blog-post-content {
  padding-top: $blog-gutter;
  padding-bottom: $blog-gutter;
}

.blog-post-share {
  padding-bottom: $blog-gutter;
}

/* scss-combine:pages/brands */

.brands-page-link {
  @extend %clearfix;
  text-align: center;

  @include breakpoint(ms) {
    text-align: left;
  }

  li {
    @include breakpoint(ms) {
      @include gallery(6 of 12);
    }

    @include breakpoint(m) {
      @include gallery(4 of 12);
    }
  }

  a {
    @extend %primary-font-bold;
    @include smallcaps();
    @include anchor-underline('on-hover', $heading-color, $heading-color);
    font-size: em(12px, $body-font-size);
    line-height: 1.15;
  }
}

/* scss-combine:pages/cart */

.cart-page {
  background: transparent;
}

.cart-empty {
  padding: $gutter-double $gutter;
  margin: 0;
}

.shipping-method-badge {
  display: inline-block;
  max-height: 100%;
  line-height: 1;
  vertical-align: middle;
}

/* scss-combine:pages/category */
.category-subheader{
  font-size: $h3-font-size;
}

/* scss-combine:pages/collections */
//-- Collections Footer / Header --//
.collection-footer,
.collection-navigation {
  display: table;
  width: 100%;
  padding-top: $gutter;
  padding-bottom: $gutter;
  vertical-align: middle;

  @include breakpoint(m-down) {
    padding-top: $gutter-half;
    padding-bottom: $gutter-half;

    > div:not(:empty) {
      margin-top: $gutter-half;

      &:first-child {
        margin-top: 0;
      }
    }
  }
}

//-- Collection Header --//
.collection-header {
  padding: 0 $gutter-half $gutter-half;
  background-color: $content-background;
  border-bottom: 1px solid $content-border-color;

  @include breakpoint(l) {
    padding: 0 $gutter $gutter;
  }
}

.collection-navigation {
  padding-bottom: 0;
}

.collection-navigation-list,
.collection-sortby {
  display: block;
  width: 100%;
  text-align: center;
  vertical-align: middle;
  table-layout: fixed;
}

@include breakpoint(m) {
  .collection-navigation-list {
    text-align: left;

    &,
    ~ .collection-sortby {
      display: table-cell;
      width: 50%;
    }
  }
}

//-- Collection Header: Header navigation (sub categories, search tabs) --//
.collection-navigation-list {
  @extend %collection-header-list;

  ul {
    display: flex;
    align-content: center;
    align-items: center;
    flex-flow: row wrap;
    justify-content: center;

    @include breakpoint(m) {
      align-content: flex-start;
      align-items: flex-start;
      justify-content: flex-start;
    }
  }

  li {
    display: inline-block;
    max-width: percentage(1 / 4);
    padding: $gutter-third;
    margin-right: $gutter-half;
    line-height: 1.1;
  }

  a {
    @extend %collection-header-list-item;

    &:hover {
      @extend %collection-header-list-item-accent;
    }
  }
}

//-- Collection Header: Sortby / Filters --//
.collection-sortby {
  position: relative;

  @include breakpoint(m) {
    text-align: right;
  }
}

.collection-toggle-facets {
  @extend %button-reset, %primary-font-bold;
  @include anchor-underline("on-hover", $body-color, $body-color-alt);
  @include smallcaps(false);
  font-size: em(12, $body-font-size);
  letter-spacing: 0.1em;
  color: $heading-color;

  @include breakpoint(s-down) {
    position: relative;
    display: inline-block;
    margin-bottom: $gutter-half;
  }

  svg {
    width: $body-font-size / 1.5;
    height: $body-font-size / 1.2;
    margin-right: 5px;
    margin-left: 4px;
  }

  &.toggle-icon .icon-increment-vertical {
    transform: scale(1, 0);
  }
}

.collections-sort-by-form {
  display: inline-block;
  margin-left: $gutter-third;

  @include breakpoint(s-down) {
    width: 100%;
    margin-left: 0;
  }

  .form-field-title {
    margin-right: $gutter-half;
    margin-bottom: 0;
    text-transform: uppercase;
  }

  .form-select-wrapper {
    width: auto;
    max-width: $input-max-width * (percentage(2 / 3) / 100%);
  }
}

//-- Collection Footer --//
.collection-footer {
  background-color: $collections-background;

  @include breakpoint(l) {
    padding-top: $gutter;
    padding-bottom: 0;
  }
}

//------ Collection Main Grid ------//
.no-content-results,
.collection-products {
  @extend %clearfix;
  padding-top: $gutter-double;
  padding-bottom: $gutter-double + $gutter;
  background-color: $collections-background;
}

.no-content-results p,
.no-product-results {
  @extend %as-h6;
  padding-bottom: $gutter;
  margin: 0;
  text-align: center;
}

//-- Collections Filter Column --//
.collection-filter {
  @include clearfix();
  display: none;
  background-color: $body-background;

  &.facets-open {
    display: block;
    padding: $gutter-half;
    margin-top: $gutter;

    @include breakpoint(l) {
      padding: $gutter-double $gutter;
    }
  }
}

.collection-facet {
  margin-top: $gutter;

  @include breakpoint(s-only) {
    @include gallery(6 of 12);

    &:nth-child(-n+2) {
      margin-top: 0;
    }
  }

  @include breakpoint(ms-only) {
    @include gallery(4 of 12);

    &:nth-child(-n+3) {
      margin-top: 0;
    }
  }

  @include breakpoint(m) {
    @include gallery(3 of 12);

    &:nth-child(-n+4) {
      margin-top: 0;
    }
  }

  @include breakpoint(m) {
    margin-top: 0;
  }
}

.collection-inside-column-heading,
.collection-facet-heading,
.collection-filter-heading {
  @extend %as-h6;
  margin: 0;
  color: $body-color;
}

//-- Facet Lists & 'Shop by' fallback --//
.collection-facet-list-wrapper,
.collection-facet-range,
.collection-facet-list,
.collection-link-list {
  padding-top: $gutter-half;
  padding-bottom: $gutter-half;
}

.collection-facet-list-item,
.collection-link-list-item {

  &.hidden {
    display: none;
  }

  &.visible {
    display: block;
  }
}

.collection-facet-list-separation a { @extend %secondary-link-style; }

.collection-facet-list-additional {
  display: none;
}

.collection-facet-list-toggle {
  @extend %secondary-link-style, %button-reset;

  .hidden { display: none; }
}

.collection-facet-range {

  .form-field {
    float: left;
    width: 50%;
    margin-bottom: $gutter-half;

    &.minimum {
      padding-right: $gutter-third;
    }

    &.maximum {
      padding-left: $gutter-third;
    }
  }

  .form-input {
    font-size: em(10, $body-font-size);
    background-color: $content-background;
  }

  .button {
    font-size: em(10, $body-font-size);

    + .button {
      margin-top: $gutter-third;
      margin-left: 0;
    }
  }
}

[data-faceted-search-facet] {
  @extend %primary-link-style, %primary-font-bold;
  position: relative;
  display: inline-block;
  vertical-align: middle;

  .rating-stars {
    display: inline-block;
  }

  .is-active & {
    @include anchor-underline('off-hover', $heading-color, $body-color);

    &:after {
      position: absolute;
      right: - $gutter-half;
      bottom: 0;
      text-transform: lowercase;
      content: "x";
      transition: opacity 0.5s $ease-out-quad;
    }

    &:hover:after {
      opacity: 0.5;
    }
  }
}

/* scss-combine:pages/contact */
.button-contact-submit {
  @extend %button-large;
}

/* scss-combine:pages/compare */
.compare-page .block-content {
  padding-top: $gutter;
  padding-bottom: $gutter;
  overflow: hidden;

  @include breakpoint(ms) {
    max-width: $max-width + 200px;
  }
}

.compare-content { overflow: hidden; }

.comparison-item {
  //scss-lint:disable NestingDepth
  position: relative;
  display: block;
  float: left;
  width: 100%;
  overflow: visible;

  @include breakpoint(s-down) {
    .comparison-item-detail:before,
    .comparison-item-detail:after { display: block; }

    &:first-child {
      .comparison-item-detail:first-child:before { display: none; }
    }
  }

  @include breakpoint(ms) {
    .row-of-2 &,
    .row-of-3 &,
    .row-of-4 & {
      @include gallery(6);
      padding-top: $gutter;
    }

    .row-of-1 &,
    .row-of-2 &,
    .row-of-3 &,
    .row-of-4 & {
      &:nth-child(-n+2) {
        padding-top: 0;
      }

      &:nth-child(2n+1) {
        .comparison-item-detail:before,
        .comparison-item-detail:after { display: block; }
      }

      &:nth-child(-2n+1) {
        .comparison-item-detail:first-child:before { display: none; }
      }
    }
  }

  @include breakpoint(l) {
    .row-of-1 &,
    .row-of-2 & {
      &:nth-child(-n+2) {
        padding-top: 0;
      }

      &:nth-child(2n+1) {
        .comparison-item-detail:before,
        .comparison-item-detail:after { display: block; }
      }

      &:nth-child(-2n+1) {
        .comparison-item-detail:first-child:before { display: none; }
      }
    }

    .row-of-3 &,
    .row-of-4 & {
      &:nth-child(2n+1) {
        .comparison-item-detail:before,
        .comparison-item-detail:after { display: none; }
      }
    }

    .row-of-3 & {
      @include gallery(4);

      &:nth-child(-n+3) {
        padding-top: 0;
      }

      &:nth-child(3n+1) {
        .comparison-item-detail:before,
        .comparison-item-detail:after { display: block; }
      }

      &:nth-child(-3n+1) {
        .comparison-item-detail:first-child:before { display: none; }
      }
    }

    .row-of-4 & {
      @include gallery(3);

      &:nth-child(-n+4) {
        padding-top: 0;
      }

      &:nth-child(4n+1) {
        .comparison-item-detail:before,
        .comparison-item-detail:after { display: block; }
      }

      &:nth-child(-4n+1) {
        .comparison-item-detail:first-child:before { display: none; }
      }
    }
  }
}

.comparison-item-detail {
  position: relative;
  height: auto;
  padding: $gutter-double 0 $gutter;
  transition: all 0.5s $ease-out-quad;

  p {
    margin-top: 0;
    margin-bottom: 0;
  }

  &.comparison-item-detail-flush { padding-top: $gutter; }

  &:before {
    position: absolute;
    top: 0;
    left: 0;
    display: none;
    width: calc(100% * 4 + #{$gutter * 4});
    border-top: 1px solid $content-border-color;
    content: "";
  }

  &:after {
    @include smallcaps();
    position: absolute;
    top: $gutter;
    left: 0;
    display: none;
    float: left;
    font-size: em(13);
    font-weight: 400;
    content: attr(data-comparison-label);

    @include breakpoint(s-only) { top: em(15, 13px); }
  }
}

.comparison-item-image { @extend %product-item-image; }

.comparison-item-badges { @extend %product-item-badges; }

.comparison-item-title {
  display: table;
  width: 100%;
  vertical-align: bottom;

  h1 { @extend %product-item-title; }
}

.comparison-price .price-rrp {
  margin-left: 5px;
  text-decoration: line-through;
}

.comparison-item-rating {

  .rating-stars,
  .rating-text {
    display: inline-block;
    vertical-align: middle;
  }

  .rating-text {  @include smallcaps(); }

  .rating-stars + .rating-text {
    margin-left: 8px;
  }
}

.compare-item-brand {
  @extend %primary-link-style;
  @include anchor-underline("off-hover", $heading-color, $heading-color);
}

.comparison-item-links {
  margin-top: $gutter;
}

.comparison-item-remove {
  @extend %primary-link-style;
  display: inline-block;
  margin-top: $gutter-half;
}

/* scss-combine:pages/gift-certificate */
//-- Layout --//
.giftcard-page {

  .button {
    @extend %button-large;
  }

  .form-field {
    margin-bottom: $account-form-spacing;
  }

  .form-giftcard-balance {

    .button {
      padding: $gutter-third $gutter-half;
      font-size: $body-font-size;
    }

    @include breakpoint(s) {

      .form-field {
        display: inline-block;
        width: 400px;
        margin-bottom: 0;
      }

      .form-field-control {
        margin-right: $account-gutter-inner;
      }

      .form-input {
        max-width: 100%;
      }

      .form-actions {
        position: absolute;
        bottom: 0;
        display: inline-block;
      }

      .button {
        position: absolute;
        top: 0;
        bottom: 0;
      }
    }
  }
}

.giftcard-nav {
  @extend %account-layout-nav;
}

.giftcard-body {
  @extend %account-layout-body;
}

//-- Navigation --//
.giftcard-nav-list {
  @extend %account-nav;
}

//-- Heading --//
.giftcard-heading-container {
  margin-bottom: em($gutter);
}

.giftcard-heading {
  padding-bottom: $gutter-half;
  margin-top: 0;
  margin-bottom: $gutter;
  font-size: $h3-font-size;
  text-align: left;
  border-bottom: 1px solid $content-border-color;
}

.giftcard-subheading {
  text-align: left;
}

//-- Contents --//
.giftcard-redeem-steps {
  margin-left: $gutter;
}

.giftcard-balance-container {

  @include breakpoint(m) {
    max-width: 100%;
  }
}

.giftcard-single-theme {
  @extend %show-for-sr;
}

/* scss-combine:pages/page */
.module-page-container {
  @extend %clearfix;
}

.block-header {
  text-align: center;

  + .block-content {
    margin-top: 0;
  }
}

.block-content {
  @extend %clearfix, %wrapper, %vertical-padding;
  margin: $gutter auto;
  background-color: $content-background;

  .cms-page &,
  .rte p {
    @extend %tertiary-font;
  }

  @include breakpoint(ms) {
    max-width: $max-width - 200px;
    margin: $gutter-double auto;

    .account-page & {
      max-width: $max-width;
    }
  }

  @include breakpoint(m) {
    padding: $gutter-double;
  }
}

.block-footer {
  @extend %clearfix;
  padding-top: $gutter;

  @include breakpoint(ms) {
    padding-top: $gutter-double;
  }
}

.fluid-width-video-wrapper {
  margin-bottom: 1em;

  &:last-of-type {
    margin-bottom: 0;
  }
}

/* scss-combine:pages/error */
.error-page {

  .page-content {
    padding-bottom: $gutter;
    text-align: center;
  }
}

/* scss-combine:pages/product */
//-- Main Product Page --//
.product-page {
  @extend %clearfix;

  .page-content {
    padding-bottom: 0;
  }
}

.product-details {
  width: 100%;
  padding-bottom: $product-gutter;
  background-color: $product-page-background;

  .modal-quick-shop & {
    background: $content-background;
  }

  @include breakpoint(ms) {
    display: table;
    table-layout: fixed;
  }

  .modal-quick-shop & {
    padding-bottom: 0;
  }
}

//-- Product Columns --//
.product-column-left {
  display: inline-block;
  width: 100%;
  padding: $product-gutter-half 0;

  @include breakpoint(ms) {
    display: block;
    float: left;
    width: percentage(6 / 12);
    height: 100%;
    padding-right: $product-gutter;
  }

  @include breakpoint(l) {
    width: percentage(8 / 12);
  }

  .modal-quick-shop & {
    padding-top: 0;
    padding-bottom: 0;
  }
}

.product-column-right {
  display: inline-block;
  width: 100%;
  text-align: center;

  @include breakpoint(ms) {
    display: block;
    float: left;
    width: percentage(6 / 12);
    height: 100%;
  }

  @include breakpoint(l) {
    width: percentage(4 / 12);
  }

  ul li,
  ol li {
    list-style-position: inside;
  }
}

//-- Inside-column elements --//
.product-column-section {
  border-bottom: 1px solid $content-border-color;

  header:last-child,
  &:last-child {
    border-bottom: 0;
  }
}

.product-column-header {
  padding: $product-gutter-half 0;
}

.product-column-heading {
  margin: 0;
  font-size: $h4-font-size;
}

.product-column-row {
  padding: $product-gutter-half 0;
  @if ($content-same-as-background == false) {
    border-bottom: 1px solid $content-border-color;
  }

  &:last-child {
    border-bottom: 0;
  }
}

[data-load-more-reviews] {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);

  .product-column-row & { position: relative; }
}

.product-details-hidden { display: none; }

//-- Product Quantity Input --//
.product-quantity {
  display: inline-block;
  vertical-align: middle;

  .form-label-text {
    @extend %show-for-sr;
  }
}

//-- Product Cart Actions --//
.product-form-actions {
  display: inline-block;
  margin-top: -7px;
  margin-left: 7px;
  vertical-align: middle;

  .button {
    margin-top: 7px;
  }
}

.product-wishlist-form {
  padding: 0 $product-gutter;
}

.product-wishlist-button {
  @extend %button-reset, %secondary-link-style;

  svg {
    width: $body-font-size / 1.5;
    height: $body-font-size / 1.2;
    margin-right: 5px;
    fill: $accent-color;
  }
}

//-- Main Product Details --//
.product-brand {
  color: $body-color;

  + .product-title {
    margin: em($gutter-third, 24px) 0;
  }
}

.product-title {
  @extend %as-h2;
  margin: 0 0 em($gutter-third, 24px);
}

.product-price {
  font-size: $h4-font-size;
}

.product-share {
  @include breakpoint(ms) {
    float: right;
  }
}

.product-description {
  @extend %tertiary-font;
  display: none;

  &.loaded,
  .modal-quick-shop & {
    display: block;
  }

  &.loaded + .product-description-read-more {
    display: inline-block;
  }
}

.product-description-read-more {
  @extend %primary-link-style;
  display: none;
  margin-top: $gutter-half;
}

.products-related {
  padding-top: $gutter-double;
  padding-bottom: $gutter;
  border-top: 1px solid $content-border-color;
}

/* scss-combine:pages/subscribe */
.newsletter-page {
  padding-bottom: $gutter;
}

/* scss-combine:pages/search */

.search-results-information {
  @extend %wrapper;
}

/* scss-combine:pages/sitemap */
.sitemap {
  @extend %clearfix;
  @include container;
}

.sitemap-group {
  @include span(12 first);
  margin-top: $gutter-double;

  &:first-child {
    margin-top: 0;
  }

  @include breakpoint(m) {
    @include gallery(6);

    &:nth-child(-n+2) {
      margin-top: 0;
    }
  }

  @include breakpoint(l) {
    @include gallery(4);

    &:nth-child(-n+3) {
      margin-top: 0;
    }
  }

  ul {
    ul {
      margin-bottom: $gutter-half;
      margin-left: $gutter-half;
    }
  }

  li {
    margin: $gutter-third / 2 0;
  }

  a {
    color: inherit;
  }
}

.sitemap-title {
  @extend %as-h1;
  margin-top: 0;
  margin-bottom: 1em;
  font-size: $h5-font-size;
}

.sitemap-subsection {
  @extend %secondary-link-style;
}


//-- Account --//
/* scss-combine:account/account */
//-- Account Page Headings --//
.account-header {
  display: none;

  .account-page-orders-receipt &,
  .account-page-messages &,
  .account-page-addresses & {
    display: block;
  }

  .account-heading {
    display: none;
  }
}

.account-sub-heading {
  @extend %as-h3;
  margin-top: 0;
}

//-- Account Page Forms --//
.account-content {
  .form-select-wrapper {
    line-height: inherit;

    @include breakpoint(l) {
      max-width: 100%
    }
  }
}

//-- Account List Items --//
.account-item:first-of-type,
.account-page-add-address .account-content,
.account-page-settings .account-content {
  padding-top: 0;
  border-top-width: 0;

  > * {
    padding-top: 0;
  }

  .account-page-addresses & {
    border-top-width: 1px;

    > * {
      padding-top: $account-gutter / 2;
    }
  }
}

.account-receipt-summary {
  padding-right: 0;
}

//-- Account Product Items --//
.account-product-item {
  @extend %product-item;

  .collection-row-of-3 & {
    @extend %product-item-grid-3;
  }

  .collection-row-of-4 & {
    @extend %product-item-grid-4;
  }
}

.account-product-wrapper {
  @extend %clearfix;
  padding-bottom: gutter();
}

.account-product-item-thumbnail {
  @include aspect-ratio(map-get($product-item-image, width) map-get($product-item-image, height));
  position: relative;
  overflow: hidden;

  > a {
    @include aspect-ratio(map-get($product-item-image, width) map-get($product-item-image, height));
    display: block;
    overflow: hidden;
    background-position: 50% 50%;
    background-repeat: no-repeat;
    background-size: cover;
    transform: scale(1, 1);
    transition: all 0.5s $ease-out-quad;

    img {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      object-fit: cover;
      width: 100%;
    }
  }

  &:hover {
    > a {
      transform: scale(1.1, 1.1);
    }
  }
}

.account-product-item-sale-tag {
  @extend %subpixel-smooth;
  @extend %meta-text-treatment;
  position: absolute;
  top: 0;
  right: 0;
  display: inline-block;
  padding: 5px 10px;
  font-size: em(10, 14);
  color: $product-item-sale-color;
  pointer-events: none;
  background-color: $product-item-sale-background;
  transition: all 0.5s $ease-out-quad;
}

.account-product-item-remove {
  position: absolute;
  top: 0;
  left: 0;
  display: inline-block;

  input {
    @extend %button-base, %button-primary;
    padding: 5px 10px;
    font-size: em(10, 14);
  }
}

.account-product-item-details {
  padding-top: $gutter-half;
  text-align: center;
}

.account-product-item-brand {
  display: block;
  margin: em($gutter-third, $body-font-size) 0;
  color: $body-color;
}

.account-product-item-title {
  @extend %product-item-title;
}

.account-product-item-price {
  font-size: em(16px);
}

// Account Buttons
.account-page .form-actions,
.account-item-actions {
  .button {
    margin-right: em(15px);
    margin-left: 0;

    &:nth-child(even) {
      @extend %button-secondary;
    }

    &:last-child {
      margin-right: 0;
    }
  }
}

.account-button-secondary:not(.account-button-small),
.account-button-primary:not(.account-button-small) {
  @extend %button-large;
}

.account-nav{
  @extend %account-layout-nav;
}

.account-body {
  @extend %account-layout-body;
}

//-- Navigation --//
.account-nav-list {
  @extend %account-nav;
}

